
// ==================================================================
// AccessRightsRule.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccessRightsRuleFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Docflow.IAccessRightsRule
    {
      protected new global::Sungero.Docflow.IAccessRightsRuleFilterState Filter { get; private set; }

      private global::Sungero.Docflow.IAccessRightsRuleFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Docflow.AccessRightsRuleFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public AccessRightsRuleFilter(global::Sungero.Docflow.IAccessRightsRuleFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected AccessRightsRuleFilter()
      {
      }
    }
      public class AccessRightsRuleUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Docflow.IAccessRightsRule
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class AccessRightsRuleSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AccessRightsRuleDocumentKindsModel DocumentKinds { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AccessRightsRuleBusinessUnitsModel BusinessUnits { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AccessRightsRuleDepartmentsModel Departments { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AccessRightsRuleDocumentGroupsModel DocumentGroups { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AccessRightsRuleMembersModel Members { get; protected set; }

        }


      public class AccessRightsRuleDocumentKindsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AccessRightsRuleBusinessUnitsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AccessRightsRuleDepartmentsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AccessRightsRuleDocumentGroupsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AccessRightsRuleMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }




  [global::Sungero.Domain.Filter(typeof(global::Sungero.Docflow.Server.AccessRightsRuleFilter<global::Sungero.Docflow.IAccessRightsRule>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Docflow.Server.AccessRightsRuleUiFilter<global::Sungero.Docflow.IAccessRightsRule>))]

  public class AccessRightsRule :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Docflow.IAccessRightsRule
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("6b57117e-0253-4a46-a3dc-4ed0d5b512ec");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.AccessRightsRule.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IAccessRightsRule, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Docflow.IAccessRightsRuleState State
    {
      get { return (global::Sungero.Docflow.IAccessRightsRuleState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.AccessRightsRuleState(this);
    }

    public new virtual global::Sungero.Docflow.IAccessRightsRuleInfo Info
    {
      get { return (global::Sungero.Docflow.IAccessRightsRuleInfo)base.Info; }
    }

    public new virtual global::Sungero.Docflow.IAccessRightsRuleAccessRights AccessRights
    {
      get { return (global::Sungero.Docflow.IAccessRightsRuleAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Server.AccessRightsRuleAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Docflow.Server.AccessRightsRuleFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.AccessRightsRuleFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.AccessRightsRuleServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.AccessRightsRuleSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.Boolean? _GrantRightsOnLeadingDocument;
    public virtual global::System.Boolean? GrantRightsOnLeadingDocument
    {
      get
      {
        return this._GrantRightsOnLeadingDocument;
      }

      set
      {
        this.SetPropertyValue("GrantRightsOnLeadingDocument", this._GrantRightsOnLeadingDocument, value, (propertyValue) => { this._GrantRightsOnLeadingDocument = propertyValue; }, this.GrantRightsOnLeadingDocumentChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.DateTime? _Modified;
    public virtual global::System.DateTime? Modified
    {
      get
      {
        return this._Modified;
      }

      set
      {
        this.SetPropertyValue("Modified", this._Modified, value, (propertyValue) => { this._Modified = propertyValue; }, this.ModifiedChangedHandler);
      }
    }
    private global::System.Boolean? _GrantRightsOnExistingDocuments;
    public virtual global::System.Boolean? GrantRightsOnExistingDocuments
    {
      get
      {
        return this._GrantRightsOnExistingDocuments;
      }

      set
      {
        this.SetPropertyValue("GrantRightsOnExistingDocuments", this._GrantRightsOnExistingDocuments, value, (propertyValue) => { this._GrantRightsOnExistingDocuments = propertyValue; }, this.GrantRightsOnExistingDocumentsChangedHandler);
      }
    }








    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentKinds> _DocumentKinds;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentKinds> DocumentKinds
    {
      get
      {
        if (this._DocumentKinds == null)
        {
          this._DocumentKinds = this.CreateDocumentKindsCollection();
          this.SetDocumentKindsEventHandlers();
        }
        return this._DocumentKinds;
      }

      set
      {
        if (this._DocumentKinds != null)
          this.UnsetChildCollectionEventHandlers(this._DocumentKinds);

        this._DocumentKinds = value;
        this.SetDocumentKindsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentKinds> CreateDocumentKindsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentKinds>() { RootEntity = this };
    }

    private void SetDocumentKindsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._DocumentKinds, "DocumentKinds");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._DocumentKinds;
      changeNotifier.Added += this.DocumentKindsAddedHandler;
      changeNotifier.Deleted += this.DocumentKindsDeletedHandler;
      changeNotifier.Added += this.DocumentKindsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.DocumentKindsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.DocumentKindsCollectionUpdateEventHandler;
    }

    private void DocumentKindsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.DocumentKindsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleBusinessUnits> _BusinessUnits;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleBusinessUnits> BusinessUnits
    {
      get
      {
        if (this._BusinessUnits == null)
        {
          this._BusinessUnits = this.CreateBusinessUnitsCollection();
          this.SetBusinessUnitsEventHandlers();
        }
        return this._BusinessUnits;
      }

      set
      {
        if (this._BusinessUnits != null)
          this.UnsetChildCollectionEventHandlers(this._BusinessUnits);

        this._BusinessUnits = value;
        this.SetBusinessUnitsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleBusinessUnits> CreateBusinessUnitsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleBusinessUnits>() { RootEntity = this };
    }

    private void SetBusinessUnitsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._BusinessUnits, "BusinessUnits");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._BusinessUnits;
      changeNotifier.Added += this.BusinessUnitsAddedHandler;
      changeNotifier.Deleted += this.BusinessUnitsDeletedHandler;
      changeNotifier.Added += this.BusinessUnitsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.BusinessUnitsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.BusinessUnitsCollectionUpdateEventHandler;
    }

    private void BusinessUnitsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.BusinessUnitsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDepartments> _Departments;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDepartments> Departments
    {
      get
      {
        if (this._Departments == null)
        {
          this._Departments = this.CreateDepartmentsCollection();
          this.SetDepartmentsEventHandlers();
        }
        return this._Departments;
      }

      set
      {
        if (this._Departments != null)
          this.UnsetChildCollectionEventHandlers(this._Departments);

        this._Departments = value;
        this.SetDepartmentsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDepartments> CreateDepartmentsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDepartments>() { RootEntity = this };
    }

    private void SetDepartmentsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Departments, "Departments");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Departments;
      changeNotifier.Added += this.DepartmentsAddedHandler;
      changeNotifier.Deleted += this.DepartmentsDeletedHandler;
      changeNotifier.Added += this.DepartmentsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.DepartmentsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.DepartmentsCollectionUpdateEventHandler;
    }

    private void DepartmentsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.DepartmentsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentGroups> _DocumentGroups;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentGroups> DocumentGroups
    {
      get
      {
        if (this._DocumentGroups == null)
        {
          this._DocumentGroups = this.CreateDocumentGroupsCollection();
          this.SetDocumentGroupsEventHandlers();
        }
        return this._DocumentGroups;
      }

      set
      {
        if (this._DocumentGroups != null)
          this.UnsetChildCollectionEventHandlers(this._DocumentGroups);

        this._DocumentGroups = value;
        this.SetDocumentGroupsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentGroups> CreateDocumentGroupsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleDocumentGroups>() { RootEntity = this };
    }

    private void SetDocumentGroupsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._DocumentGroups, "DocumentGroups");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._DocumentGroups;
      changeNotifier.Added += this.DocumentGroupsAddedHandler;
      changeNotifier.Deleted += this.DocumentGroupsDeletedHandler;
      changeNotifier.Added += this.DocumentGroupsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.DocumentGroupsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.DocumentGroupsCollectionUpdateEventHandler;
    }

    private void DocumentGroupsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.DocumentGroupsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleMembers> _Members;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleMembers> Members
    {
      get
      {
        if (this._Members == null)
        {
          this._Members = this.CreateMembersCollection();
          this.SetMembersEventHandlers();
        }
        return this._Members;
      }

      set
      {
        if (this._Members != null)
          this.UnsetChildCollectionEventHandlers(this._Members);

        this._Members = value;
        this.SetMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleMembers> CreateMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccessRightsRuleMembers>() { RootEntity = this };
    }

    private void SetMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Members, "Members");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Members;
      changeNotifier.Added += this.MembersAddedHandler;
      changeNotifier.Deleted += this.MembersDeletedHandler;
      changeNotifier.Added += this.MembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.MembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.MembersCollectionUpdateEventHandler;
    }

    private void MembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.MembersChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.AccessRightsRuleCreatingFromServerHandler((global::Sungero.Docflow.IAccessRightsRule)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DocumentKindsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).DocumentKindsChanged(args);
    }

    protected void BusinessUnitsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).BusinessUnitsChanged(args);
    }

    protected void DepartmentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).DepartmentsChanged(args);
    }

    protected void DocumentGroupsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).DocumentGroupsChanged(args);
    }

    protected void GrantRightsOnLeadingDocumentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.GrantRightsOnLeadingDocument, this.GrantRightsOnLeadingDocument, this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).GrantRightsOnLeadingDocumentChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void MembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).MembersChanged(args);
    }

    protected void ModifiedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Modified, this.Modified, this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).ModifiedChanged(args);
    }

    protected void GrantRightsOnExistingDocumentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.GrantRightsOnExistingDocuments, this.GrantRightsOnExistingDocuments, this);
     ((global::Sungero.Docflow.AccessRightsRuleSharedHandlers)this.SharedHandlers).GrantRightsOnExistingDocumentsChanged(args);
    }



    protected virtual global::Sungero.Docflow.AccessRightsRuleDocumentKindsSharedCollectionHandlers CreateDocumentKindsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDocumentKindsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.AccessRightsRuleDocumentKindsSharedCollectionHandlers CreateDocumentKindsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDocumentKindsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DocumentKindsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentKindsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.DocumentKindsAdded(args);
      }
    }

    protected virtual void DocumentKindsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentKindsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.DocumentKindsDeleted(args);
      }
    }


    protected virtual global::Sungero.Docflow.AccessRightsRuleBusinessUnitsSharedCollectionHandlers CreateBusinessUnitsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleBusinessUnitsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.AccessRightsRuleBusinessUnitsSharedCollectionHandlers CreateBusinessUnitsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleBusinessUnitsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void BusinessUnitsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateBusinessUnitsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.BusinessUnitsAdded(args);
      }
    }

    protected virtual void BusinessUnitsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateBusinessUnitsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.BusinessUnitsDeleted(args);
      }
    }


    protected virtual global::Sungero.Docflow.AccessRightsRuleDepartmentsSharedCollectionHandlers CreateDepartmentsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDepartmentsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.AccessRightsRuleDepartmentsSharedCollectionHandlers CreateDepartmentsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDepartmentsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DepartmentsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDepartmentsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.DepartmentsAdded(args);
      }
    }

    protected virtual void DepartmentsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDepartmentsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.DepartmentsDeleted(args);
      }
    }


    protected virtual global::Sungero.Docflow.AccessRightsRuleDocumentGroupsSharedCollectionHandlers CreateDocumentGroupsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDocumentGroupsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.AccessRightsRuleDocumentGroupsSharedCollectionHandlers CreateDocumentGroupsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleDocumentGroupsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DocumentGroupsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentGroupsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.DocumentGroupsAdded(args);
      }
    }

    protected virtual void DocumentGroupsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentGroupsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.DocumentGroupsDeleted(args);
      }
    }


    protected virtual global::Sungero.Docflow.AccessRightsRuleMembersSharedCollectionHandlers CreateMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.AccessRightsRuleMembersSharedCollectionHandlers CreateMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccessRightsRuleMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void MembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.MembersAdded(args);
      }
    }

    protected virtual void MembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.MembersDeleted(args);
      }
    }


    #endregion


    public AccessRightsRule()
    {
    }

  }
}

// ==================================================================
// AccessRightsRuleHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{

  public partial class AccessRightsRuleFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Docflow.IAccessRightsRule
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Docflow.IAccessRightsRuleFilterState Filter { get; private set; }

    private global::Sungero.Docflow.IAccessRightsRuleFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public AccessRightsRuleFilteringServerHandler(global::Sungero.Docflow.IAccessRightsRuleFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected AccessRightsRuleFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class AccessRightsRuleUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Docflow.IAccessRightsRule
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class AccessRightsRuleSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Docflow.Server.AccessRightsRuleSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Docflow.Server.AccessRightsRuleSearchDialogModel)this.Dialog;
       }
     }

     public AccessRightsRuleSearchDialogServerHandler(global::Sungero.Docflow.Server.AccessRightsRuleSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class AccessRightsRuleServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Docflow.IAccessRightsRule _obj
    {
      get { return (global::Sungero.Docflow.IAccessRightsRule)this.Entity; }
    }

    public AccessRightsRuleServerHandlers(global::Sungero.Docflow.IAccessRightsRule entity)
      : base(entity)
    {
    }
  }

  public partial class AccessRightsRuleCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Docflow.IAccessRightsRule _source
    {
      get { return (global::Sungero.Docflow.IAccessRightsRule)this.Source; }
    }

    private global::Sungero.Docflow.IAccessRightsRuleInfo _info
    {
      get { return (global::Sungero.Docflow.IAccessRightsRuleInfo)this._Info; }
    }

    public AccessRightsRuleCreatingFromServerHandler(global::Sungero.Docflow.IAccessRightsRule source, global::Sungero.Docflow.IAccessRightsRuleInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// AccessRightsRuleEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// AccessRightsRuleAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class AccessRightsRuleAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Docflow.IAccessRightsRuleAccessRights
  {

    public AccessRightsRuleAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AccessRightsRuleTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Docflow.IAccessRightsRuleAccessRights
  {

    public AccessRightsRuleTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AccessRightsRuleRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccessRightsRuleRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Docflow.IAccessRightsRuleRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IAccessRightsRule 
    {
       public new global::Sungero.Docflow.IAccessRightsRuleAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IAccessRightsRuleAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IAccessRightsRuleInfo Info
       {
          get { return (global::Sungero.Docflow.IAccessRightsRuleInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Server.AccessRightsRuleTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AccessRightsRulePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccessRightsRuleDocumentKindPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccessRightsRule
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.Docflow.IAccessRightsRuleFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccessRightsRuleFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccessRightsRule>(query);
      }
    }

    public class AccessRightsRuleBusinessUnitPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccessRightsRule
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.Docflow.IAccessRightsRuleFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccessRightsRuleFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccessRightsRule>(query);
      }
    }

    public class AccessRightsRuleDepartmentPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccessRightsRule
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.Docflow.IAccessRightsRuleFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccessRightsRuleFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccessRightsRule>(query);
      }
    }

}

// ==================================================================
// AccessRightsRuleServerFunctions.g.cs
// ==================================================================

namespace Sungero.Docflow.Server
{
  public partial class AccessRightsRuleFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Docflow.IAccessRightsRule _obj
    {
      get { return (global::Sungero.Docflow.IAccessRightsRule)this.Entity; }
    }

    public AccessRightsRuleFunctions(global::Sungero.Docflow.IAccessRightsRule entity) : base(entity) { }
  }
}

// ==================================================================
// AccessRightsRuleFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Functions
{
  internal static class AccessRightsRule
  {
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccessRightsRuleFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void EnqueueAccessRightsAgent()
    {
    global::Sungero.Docflow.Server.AccessRightsRuleFunctions.EnqueueAccessRightsAgent();
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccessRightsRuleFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IAccessRightsRule> GetAccessRightsRulesByDocumentKind(global::Sungero.Docflow.IDocumentKind documentKind)
    {
      return global::Sungero.Docflow.Server.AccessRightsRuleFunctions.GetAccessRightsRulesByDocumentKind(documentKind);
    }

    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccessRightsRuleFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.IDocumentGroupBase> GetDocumentGroups(global::Sungero.Docflow.IAccessRightsRule accessRightsRule)
    {
      var functions = (global::Sungero.Docflow.Shared.AccessRightsRuleFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accessRightsRule).FunctionsContainer.SharedFunctions;
      return functions.GetDocumentGroups();
    }

  }
}

// ==================================================================
// AccessRightsRuleServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class AccessRightsRuleServerPublicFunctions : global::Sungero.Docflow.Server.IAccessRightsRuleServerPublicFunctions
  {
    public global::System.Linq.IQueryable<global::Sungero.Docflow.IAccessRightsRule> GetAccessRightsRulesByDocumentKind(global::Sungero.Docflow.IDocumentKind documentKind)
    {
      return global::Sungero.Docflow.Functions.AccessRightsRule.GetAccessRightsRulesByDocumentKind(documentKind);
    }
  }
}

// ==================================================================
// AccessRightsRuleQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Queries
{
  public class AccessRightsRule
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Docflow.Server.AccessRightsRule.AccessRightsRuleQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
