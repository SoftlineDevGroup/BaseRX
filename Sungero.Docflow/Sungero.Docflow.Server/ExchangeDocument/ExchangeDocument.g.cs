
// ==================================================================
// ExchangeDocument.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class ExchangeDocumentFilter<T> :
      global::Sungero.Docflow.Server.OfficialDocumentFilter<T>
      where T : class, global::Sungero.Docflow.IExchangeDocument
    {
      private global::Sungero.Docflow.IExchangeDocumentFilterState filter
      {
        get
        {
          return (Sungero.Docflow.IExchangeDocumentFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ExchangeDocumentFilter(global::Sungero.Docflow.IExchangeDocumentFilterState filter)
      : base(filter)
      {
      }

      protected ExchangeDocumentFilter()
      {
      }
    }
    public class ExchangeDocumentSearchDialogModel : global::Sungero.Docflow.Server.OfficialDocumentSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.String Name { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }


                  public virtual global::System.String Note { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }


                   public new ExchangeDocumentVersionsModel Versions { get { return (ExchangeDocumentVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new ExchangeDocumentTrackingModel Tracking { get { return (ExchangeDocumentTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class ExchangeDocumentVersionsModel : global::Sungero.Docflow.Server.OfficialDocumentVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class ExchangeDocumentTrackingModel : global::Sungero.Docflow.Server.OfficialDocumentTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class ExchangeDocumentFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Docflow.IExchangeDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.ExchangeDocumentCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.ExchangeDocumentCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentFilterForBusinessUnitBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
    where TSourceEntity : class, global::Sungero.Docflow.IExchangeDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.ExchangeDocumentBusinessUnitBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BusinessUnitBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentFilterForBusinessUnitBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentSearchFilterForBusinessUnitBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.ExchangeDocumentBusinessUnitBoxSearchPropertyFilteringServerHandler<TQueryEntity>().BusinessUnitBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentSearchFilterForBusinessUnitBox(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Docflow.Server.ExchangeDocumentFilter<global::Sungero.Docflow.IExchangeDocument>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.ExchangeDocumentFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.Docflow.IExchangeDocument>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.ExchangeDocumentSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.ExchangeDocumentFilterForBusinessUnitBox<global::Sungero.ExchangeCore.IBusinessUnitBox, global::Sungero.Docflow.IExchangeDocument>), "BusinessUnitBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.ExchangeDocumentSearchFilterForBusinessUnitBox<global::Sungero.ExchangeCore.IBusinessUnitBox>), "BusinessUnitBox")]


  public class ExchangeDocument :
    global::Sungero.Docflow.Server.OfficialDocument, global::Sungero.Docflow.IExchangeDocument, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("cf8357c3-8266-490d-b75e-0bd3e46b1ae8");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.ExchangeDocument.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IExchangeDocument, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Docflow.IExchangeDocumentState State
    {
      get { return (global::Sungero.Docflow.IExchangeDocumentState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ExchangeDocumentState(this);
    }

    public new virtual global::Sungero.Docflow.IExchangeDocumentInfo Info
    {
      get { return (global::Sungero.Docflow.IExchangeDocumentInfo)base.Info; }
    }

    public new virtual global::Sungero.Docflow.IExchangeDocumentAccessRights AccessRights
    {
      get { return (global::Sungero.Docflow.IExchangeDocumentAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Server.ExchangeDocumentAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Docflow.Server.ExchangeDocumentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.ExchangeDocumentFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ExchangeDocumentServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ExchangeDocumentSharedHandlers(this);
    }







    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBusinessUnitBox _BusinessUnitBox;
    public virtual global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox
    {
      get
      {
        return this._BusinessUnitBox;
      }

      set
      {
        this.SetPropertyValue("BusinessUnitBox", this._BusinessUnitBox, value, (propertyValue) => { this._BusinessUnitBox = propertyValue; }, this.BusinessUnitBoxChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IExchangeDocumentVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IExchangeDocumentTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.ExchangeDocumentCreatingFromServerHandler((global::Sungero.Docflow.IExchangeDocument)entitySource, this.Info);
    }

    #region Framework events

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ExchangeDocumentCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Docflow.ExchangeDocumentSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void BusinessUnitBoxChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ExchangeDocumentBusinessUnitBoxChangedEventArgs(this.State.Properties.BusinessUnitBox, this.BusinessUnitBox, this);
     ((global::Sungero.Docflow.ExchangeDocumentSharedHandlers)this.SharedHandlers).BusinessUnitBoxChanged(args);
    }





    #endregion


    public ExchangeDocument()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.ExchangeDocumentConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// ExchangeDocumentHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class ExchangeDocumentCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Docflow.IExchangeDocument _obj
    {
      get { return (global::Sungero.Docflow.IExchangeDocument)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentCounterpartyPropertyFilteringServerHandler(global::Sungero.Docflow.IExchangeDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentBusinessUnitBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    private global::Sungero.Docflow.IExchangeDocument _obj
    {
      get { return (global::Sungero.Docflow.IExchangeDocument)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BusinessUnitBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentBusinessUnitBoxPropertyFilteringServerHandler(global::Sungero.Docflow.IExchangeDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentBusinessUnitBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {

    public virtual global::System.Linq.IQueryable<T> BusinessUnitBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentBusinessUnitBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ExchangeDocumentFilteringServerHandler<T>
    : global::Sungero.Docflow.OfficialDocumentFilteringServerHandler<T>  
    where T : class, global::Sungero.Docflow.IExchangeDocument
  {
    private global::Sungero.Docflow.IExchangeDocumentFilterState _filter
    {
      get
      {
        return (Sungero.Docflow.IExchangeDocumentFilterState)this.Filter;
      }
    }

    public ExchangeDocumentFilteringServerHandler(global::Sungero.Docflow.IExchangeDocumentFilterState filter)
    : base(filter)
    {
    }

    protected ExchangeDocumentFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }


  }

  public partial class ExchangeDocumentSearchDialogServerHandler : global::Sungero.Docflow.OfficialDocumentSearchDialogServerHandler
   {
     private global::Sungero.Docflow.Server.ExchangeDocumentSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Docflow.Server.ExchangeDocumentSearchDialogModel)this.Dialog;
       }
     }

     public ExchangeDocumentSearchDialogServerHandler(global::Sungero.Docflow.Server.ExchangeDocumentSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ExchangeDocumentServerHandlers : global::Sungero.Docflow.OfficialDocumentServerHandlers
  {
    private global::Sungero.Docflow.IExchangeDocument _obj
    {
      get { return (global::Sungero.Docflow.IExchangeDocument)this.Entity; }
    }

    public ExchangeDocumentServerHandlers(global::Sungero.Docflow.IExchangeDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentCreatingFromServerHandler : global::Sungero.Docflow.OfficialDocumentCreatingFromServerHandler
  {
    private global::Sungero.Docflow.IExchangeDocument _source
    {
      get { return (global::Sungero.Docflow.IExchangeDocument)this.Source; }
    }

    private global::Sungero.Docflow.IExchangeDocumentInfo _info
    {
      get { return (global::Sungero.Docflow.IExchangeDocumentInfo)this._Info; }
    }

    public ExchangeDocumentCreatingFromServerHandler(global::Sungero.Docflow.IExchangeDocument source, global::Sungero.Docflow.IExchangeDocumentInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ExchangeDocumentEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// ExchangeDocumentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class ExchangeDocumentAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentAccessRights, Sungero.Docflow.IExchangeDocumentAccessRights
  {

    public ExchangeDocumentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ExchangeDocumentTypeAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentTypeAccessRights, Sungero.Docflow.IExchangeDocumentAccessRights
  {

    public ExchangeDocumentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ExchangeDocumentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class ExchangeDocumentRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IExchangeDocumentRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IExchangeDocument 
    {
       public new global::Sungero.Docflow.IExchangeDocumentAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IExchangeDocumentAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IExchangeDocumentInfo Info
       {
          get { return (global::Sungero.Docflow.IExchangeDocumentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Server.ExchangeDocumentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ExchangeDocumentPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// ExchangeDocumentServerFunctions.g.cs
// ==================================================================

namespace Sungero.Docflow.Server
{
  public partial class ExchangeDocumentFunctions : global::Sungero.Docflow.Server.OfficialDocumentFunctions
  {
    private global::Sungero.Docflow.IExchangeDocument _obj
    {
      get { return (global::Sungero.Docflow.IExchangeDocument)this.Entity; }
    }

    public ExchangeDocumentFunctions(global::Sungero.Docflow.IExchangeDocument entity) : base(entity) { }
  }
}

// ==================================================================
// ExchangeDocumentFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Functions
{
  internal static class ExchangeDocument
  {
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ExchangeDocumentFunctions" />
    internal static  void FillName(global::Sungero.Docflow.IExchangeDocument exchangeDocument)
    {
      var functions = (global::Sungero.Docflow.Shared.ExchangeDocumentFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocument).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ExchangeDocumentFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetCounterparties(global::Sungero.Docflow.IExchangeDocument exchangeDocument)
    {
      var functions = (global::Sungero.Docflow.Shared.ExchangeDocumentFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocument).FunctionsContainer.SharedFunctions;
      return functions.GetCounterparties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ExchangeDocumentFunctions" />
    internal static  void SetLifeCycleState(global::Sungero.Docflow.IExchangeDocument exchangeDocument)
    {
      var functions = (global::Sungero.Docflow.Shared.ExchangeDocumentFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocument).FunctionsContainer.SharedFunctions;
    functions.SetLifeCycleState();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ExchangeDocumentFunctions" />
    internal static  void ChangeCounterpartyPropertyAccess(global::Sungero.Docflow.IExchangeDocument exchangeDocument, global::System.Boolean isEnabled, global::System.Boolean counterpartyCodeInNumber)
    {
      var functions = (global::Sungero.Docflow.Shared.ExchangeDocumentFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocument).FunctionsContainer.SharedFunctions;
    functions.ChangeCounterpartyPropertyAccess(isEnabled, counterpartyCodeInNumber);
    }

  }
}

// ==================================================================
// ExchangeDocumentServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class ExchangeDocumentServerPublicFunctions : global::Sungero.Docflow.Server.IExchangeDocumentServerPublicFunctions
  {
  }
}

// ==================================================================
// ExchangeDocumentQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Queries
{
  public class ExchangeDocument
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Docflow.Server.ExchangeDocument.ExchangeDocumentQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ExchangeDocumentServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class ExchangeDocumentConvertingFromServerHandler : global::Sungero.Docflow.OfficialDocumentConvertingFromServerHandler
  { 
    private global::Sungero.Docflow.IExchangeDocumentInfo _info
    {
      get { return (global::Sungero.Docflow.IExchangeDocumentInfo)this._Info; }
    }

    public ExchangeDocumentConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Docflow.IExchangeDocumentInfo info)
      : base(source, info)
    {
    }
  }
}
