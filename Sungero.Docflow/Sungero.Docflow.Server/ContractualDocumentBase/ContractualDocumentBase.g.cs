
// ==================================================================
// ContractualDocumentBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class ContractualDocumentBaseFilter<T> :
      global::Sungero.Docflow.Server.OfficialDocumentFilter<T>
      where T : class, global::Sungero.Docflow.IContractualDocumentBase
    {
      private global::Sungero.Docflow.IContractualDocumentBaseFilterState filter
      {
        get
        {
          return (Sungero.Docflow.IContractualDocumentBaseFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ContractualDocumentBaseFilter(global::Sungero.Docflow.IContractualDocumentBaseFilterState filter)
      : base(filter)
      {
      }

      protected ContractualDocumentBaseFilter()
      {
      }
    }
    public class ContractualDocumentBaseSearchDialogModel : global::Sungero.Docflow.Server.OfficialDocumentSearchDialogModel
        {
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }


                  public virtual global::System.Double? TotalAmount { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }


                   public new ContractualDocumentBaseVersionsModel Versions { get { return (ContractualDocumentBaseVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new ContractualDocumentBaseTrackingModel Tracking { get { return (ContractualDocumentBaseTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class ContractualDocumentBaseVersionsModel : global::Sungero.Docflow.Server.OfficialDocumentVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class ContractualDocumentBaseTrackingModel : global::Sungero.Docflow.Server.OfficialDocumentTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class ContractualDocumentBaseFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentBaseSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentBaseFilterForCounterpartySignatory<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartySignatoryFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseFilterForCounterpartySignatory(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentBaseSearchFilterForCounterpartySignatory<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySignatorySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseSearchFilterForCounterpartySignatory(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentBaseFilterForCurrency<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
    where TSourceEntity : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCurrencyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CurrencyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentBaseSearchFilterForCurrency<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.ContractualDocumentBaseCurrencySearchPropertyFilteringServerHandler<TQueryEntity>().CurrencySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentBaseSearchFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseFilter<global::Sungero.Docflow.IContractualDocumentBase>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.Docflow.IContractualDocumentBase>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseFilterForCounterpartySignatory<global::Sungero.Parties.IContact, global::Sungero.Docflow.IContractualDocumentBase>), "CounterpartySignatory")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseSearchFilterForCounterpartySignatory<global::Sungero.Parties.IContact>), "CounterpartySignatory")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseFilterForCurrency<global::Sungero.Commons.ICurrency, global::Sungero.Docflow.IContractualDocumentBase>), "Currency")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.ContractualDocumentBaseSearchFilterForCurrency<global::Sungero.Commons.ICurrency>), "Currency")]


  public class ContractualDocumentBase :
    global::Sungero.Docflow.Server.OfficialDocument, global::Sungero.Docflow.IContractualDocumentBase, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("454df3c6-b850-47cf-897f-a10d767baa77");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.ContractualDocumentBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IContractualDocumentBase, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Docflow.IContractualDocumentBaseState State
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBaseState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ContractualDocumentBaseState(this);
    }

    public new virtual global::Sungero.Docflow.IContractualDocumentBaseInfo Info
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBaseInfo)base.Info; }
    }

    public new virtual global::Sungero.Docflow.IContractualDocumentBaseAccessRights AccessRights
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBaseAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Server.ContractualDocumentBaseAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Docflow.Server.ContractualDocumentBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ContractualDocumentBaseServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers(this);
    }

    private global::System.Double? _TotalAmount;
    public virtual global::System.Double? TotalAmount
    {
      get
      {
        return this._TotalAmount;
      }

      set
      {
        this.SetPropertyValue("TotalAmount", this._TotalAmount, value, (propertyValue) => { this._TotalAmount = propertyValue; }, this.TotalAmountChangedHandler);
      }
    }







    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }
    private global::Sungero.Parties.IContact _CounterpartySignatory;
    public virtual global::Sungero.Parties.IContact CounterpartySignatory
    {
      get
      {
        return this._CounterpartySignatory;
      }

      set
      {
        this.SetPropertyValue("CounterpartySignatory", this._CounterpartySignatory, value, (propertyValue) => { this._CounterpartySignatory = propertyValue; }, this.CounterpartySignatoryChangedHandler);
      }
    }
    private global::Sungero.Commons.ICurrency _Currency;
    public virtual global::Sungero.Commons.ICurrency Currency
    {
      get
      {
        return this._Currency;
      }

      set
      {
        this.SetPropertyValue("Currency", this._Currency, value, (propertyValue) => { this._Currency = propertyValue; }, this.CurrencyChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IContractualDocumentBaseVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IContractualDocumentBaseTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.ContractualDocumentBaseCreatingFromServerHandler((global::Sungero.Docflow.IContractualDocumentBase)entitySource, this.Info);
    }

    #region Framework events

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void CounterpartySignatoryChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCounterpartySignatoryChangedEventArgs(this.State.Properties.CounterpartySignatory, this.CounterpartySignatory, this);
     ((global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartySignatoryChanged(args);
    }

    protected void TotalAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.TotalAmount, this.TotalAmount, this);
     ((global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers)this.SharedHandlers).TotalAmountChanged(args);
    }

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ContractualDocumentBaseCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.ContractualDocumentBaseSharedHandlers)this.SharedHandlers).CurrencyChanged(args);
    }







    #endregion


    public ContractualDocumentBase()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.ContractualDocumentBaseConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// ContractualDocumentBaseHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class ContractualDocumentBaseCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Docflow.IContractualDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCounterpartyPropertyFilteringServerHandler(global::Sungero.Docflow.IContractualDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentBaseCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ContractualDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.Docflow.IContractualDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartySignatoryFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler(global::Sungero.Docflow.IContractualDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySignatorySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ContractualDocumentBaseCurrencyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {
    private global::Sungero.Docflow.IContractualDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CurrencyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCurrencyPropertyFilteringServerHandler(global::Sungero.Docflow.IContractualDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentBaseCurrencySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {

    public virtual global::System.Linq.IQueryable<T> CurrencySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentBaseCurrencySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ContractualDocumentBaseFilteringServerHandler<T>
    : global::Sungero.Docflow.OfficialDocumentFilteringServerHandler<T>  
    where T : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    private global::Sungero.Docflow.IContractualDocumentBaseFilterState _filter
    {
      get
      {
        return (Sungero.Docflow.IContractualDocumentBaseFilterState)this.Filter;
      }
    }

    public ContractualDocumentBaseFilteringServerHandler(global::Sungero.Docflow.IContractualDocumentBaseFilterState filter)
    : base(filter)
    {
    }

    protected ContractualDocumentBaseFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }


  }

  public partial class ContractualDocumentBaseSearchDialogServerHandler : global::Sungero.Docflow.OfficialDocumentSearchDialogServerHandler
   {
     private global::Sungero.Docflow.Server.ContractualDocumentBaseSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Docflow.Server.ContractualDocumentBaseSearchDialogModel)this.Dialog;
       }
     }

     public ContractualDocumentBaseSearchDialogServerHandler(global::Sungero.Docflow.Server.ContractualDocumentBaseSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ContractualDocumentBaseServerHandlers : global::Sungero.Docflow.OfficialDocumentServerHandlers
  {
    private global::Sungero.Docflow.IContractualDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Entity; }
    }

    public ContractualDocumentBaseServerHandlers(global::Sungero.Docflow.IContractualDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentBaseCreatingFromServerHandler : global::Sungero.Docflow.OfficialDocumentCreatingFromServerHandler
  {
    private global::Sungero.Docflow.IContractualDocumentBase _source
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Source; }
    }

    private global::Sungero.Docflow.IContractualDocumentBaseInfo _info
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBaseInfo)this._Info; }
    }

    public ContractualDocumentBaseCreatingFromServerHandler(global::Sungero.Docflow.IContractualDocumentBase source, global::Sungero.Docflow.IContractualDocumentBaseInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ContractualDocumentBaseEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// ContractualDocumentBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class ContractualDocumentBaseAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentAccessRights, Sungero.Docflow.IContractualDocumentBaseAccessRights
  {

    public ContractualDocumentBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ContractualDocumentBaseTypeAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentTypeAccessRights, Sungero.Docflow.IContractualDocumentBaseAccessRights
  {

    public ContractualDocumentBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ContractualDocumentBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class ContractualDocumentBaseRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IContractualDocumentBaseRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IContractualDocumentBase 
    {
       public new global::Sungero.Docflow.IContractualDocumentBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IContractualDocumentBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IContractualDocumentBaseInfo Info
       {
          get { return (global::Sungero.Docflow.IContractualDocumentBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Server.ContractualDocumentBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ContractualDocumentBasePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// ContractualDocumentBaseServerFunctions.g.cs
// ==================================================================

namespace Sungero.Docflow.Server
{
  public partial class ContractualDocumentBaseFunctions : global::Sungero.Docflow.Server.OfficialDocumentFunctions
  {
    private global::Sungero.Docflow.IContractualDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBase)this.Entity; }
    }

    public ContractualDocumentBaseFunctions(global::Sungero.Docflow.IContractualDocumentBase entity) : base(entity) { }
  }
}

// ==================================================================
// ContractualDocumentBaseFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Functions
{
  internal static class ContractualDocumentBase
  {
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.ContractualDocumentBaseFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettings(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Server.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.ServerFunctions;
      return functions.GetSignatureSettings();
    }

    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase, global::System.Boolean isEnabled, global::System.Boolean isRepeatRegister)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, isRepeatRegister);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetCounterparties(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.GetCounterparties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  void ChangeCounterpartyPropertyAccess(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase, global::System.Boolean isEnabled, global::System.Boolean counterpartyCodeInNumber, global::System.Boolean enabledState)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeCounterpartyPropertyAccess(isEnabled, counterpartyCodeInNumber, enabledState);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  void ChangeCounterpartyPropertyAccess(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase, global::System.Boolean isEnabled)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeCounterpartyPropertyAccess(isEnabled);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  global::System.Boolean HasEmptyRequiredProperties(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.HasEmptyRequiredProperties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.ContractualDocumentBaseFunctions" />
    internal static  void EnableRegistrationNumberAndDate(global::Sungero.Docflow.IContractualDocumentBase contractualDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.ContractualDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocumentBase).FunctionsContainer.SharedFunctions;
    functions.EnableRegistrationNumberAndDate();
    }

  }
}

// ==================================================================
// ContractualDocumentBaseServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class ContractualDocumentBaseServerPublicFunctions : global::Sungero.Docflow.Server.IContractualDocumentBaseServerPublicFunctions
  {
  }
}

// ==================================================================
// ContractualDocumentBaseQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Queries
{
  public class ContractualDocumentBase
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Docflow.Server.ContractualDocumentBase.ContractualDocumentBaseQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ContractualDocumentBaseServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class ContractualDocumentBaseConvertingFromServerHandler : global::Sungero.Docflow.OfficialDocumentConvertingFromServerHandler
  { 
    private global::Sungero.Docflow.IContractualDocumentBaseInfo _info
    {
      get { return (global::Sungero.Docflow.IContractualDocumentBaseInfo)this._Info; }
    }

    public ContractualDocumentBaseConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Docflow.IContractualDocumentBaseInfo info)
      : base(source, info)
    {
    }
  }
}
