
// ==================================================================
// AccountingDocumentBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccountingDocumentBaseFilter<T> :
      global::Sungero.Docflow.Server.OfficialDocumentFilter<T>
      where T : class, global::Sungero.Docflow.IAccountingDocumentBase
    {
      private global::Sungero.Docflow.IAccountingDocumentBaseFilterState filter
      {
        get
        {
          return (Sungero.Docflow.IAccountingDocumentBaseFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Docflow.AccountingDocumentBaseFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public AccountingDocumentBaseFilter(global::Sungero.Docflow.IAccountingDocumentBaseFilterState filter)
      : base(filter)
      {
      }

      protected AccountingDocumentBaseFilter()
      {
      }
    }
    public class AccountingDocumentBaseSearchDialogModel : global::Sungero.Docflow.Server.OfficialDocumentSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }


                  public virtual global::System.Boolean? IsAdjustment { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IOfficialDocument> LeadingDocument { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> ResponsibleEmployee { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.IContact> Contact { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.IContact> CounterpartySignatory { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IAccountingDocumentBase> Corrected { get; protected set; }


                   public new AccountingDocumentBaseVersionsModel Versions { get { return (AccountingDocumentBaseVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new AccountingDocumentBaseTrackingModel Tracking { get { return (AccountingDocumentBaseTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class AccountingDocumentBaseVersionsModel : global::Sungero.Docflow.Server.OfficialDocumentVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class AccountingDocumentBaseTrackingModel : global::Sungero.Docflow.Server.OfficialDocumentTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class AccountingDocumentBaseFilterForLeadingDocument<TQueryEntity, TSourceEntity>
    : global::Sungero.Docflow.Server.OfficialDocumentFilterForLeadingDocument<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IContractualDocumentBase
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseLeadingDocumentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).LeadingDocumentFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForLeadingDocument(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForCurrency<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCurrencyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CurrencyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForCurrency<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICurrency
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCurrencySearchPropertyFilteringServerHandler<TQueryEntity>().CurrencySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForCurrency(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForResponsibleEmployee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseResponsibleEmployeePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ResponsibleEmployeeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForResponsibleEmployee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForResponsibleEmployee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseResponsibleEmployeeSearchPropertyFilteringServerHandler<TQueryEntity>().ResponsibleEmployeeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForResponsibleEmployee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForContact<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseContactPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ContactFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForContact<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseContactSearchPropertyFilteringServerHandler<TQueryEntity>().ContactSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForCounterpartySignatory<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartySignatoryFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForCounterpartySignatory(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForCounterpartySignatory<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySignatorySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForCounterpartySignatory(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForBusinessUnitBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseBusinessUnitBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BusinessUnitBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForBusinessUnitBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForBusinessUnitBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseBusinessUnitBoxSearchPropertyFilteringServerHandler<TQueryEntity>().BusinessUnitBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForBusinessUnitBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseFilterForCorrected<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
    where TSourceEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCorrectedPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CorrectedFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseFilterForCorrected(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AccountingDocumentBaseSearchFilterForCorrected<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Docflow.AccountingDocumentBaseCorrectedSearchPropertyFilteringServerHandler<TQueryEntity>().CorrectedSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AccountingDocumentBaseSearchFilterForCorrected(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilter<global::Sungero.Docflow.IAccountingDocumentBase>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForLeadingDocument<global::Sungero.Docflow.IContractualDocumentBase, global::Sungero.Docflow.IAccountingDocumentBase>), "LeadingDocument")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForCurrency<global::Sungero.Commons.ICurrency, global::Sungero.Docflow.IAccountingDocumentBase>), "Currency")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForCurrency<global::Sungero.Commons.ICurrency>), "Currency")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.Docflow.IAccountingDocumentBase>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForResponsibleEmployee<global::Sungero.Company.IEmployee, global::Sungero.Docflow.IAccountingDocumentBase>), "ResponsibleEmployee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForResponsibleEmployee<global::Sungero.CoreEntities.IRecipient>), "ResponsibleEmployee")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForContact<global::Sungero.Parties.IContact, global::Sungero.Docflow.IAccountingDocumentBase>), "Contact")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForContact<global::Sungero.Parties.IContact>), "Contact")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForCounterpartySignatory<global::Sungero.Parties.IContact, global::Sungero.Docflow.IAccountingDocumentBase>), "CounterpartySignatory")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForCounterpartySignatory<global::Sungero.Parties.IContact>), "CounterpartySignatory")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForBusinessUnitBox<global::Sungero.ExchangeCore.IBusinessUnitBox, global::Sungero.Docflow.IAccountingDocumentBase>), "BusinessUnitBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForBusinessUnitBox<global::Sungero.ExchangeCore.IBusinessUnitBox>), "BusinessUnitBox")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseFilterForCorrected<global::Sungero.Docflow.IAccountingDocumentBase, global::Sungero.Docflow.IAccountingDocumentBase>), "Corrected")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchFilterForCorrected<global::Sungero.Docflow.IAccountingDocumentBase>), "Corrected")]


  public class AccountingDocumentBase :
    global::Sungero.Docflow.Server.OfficialDocument, global::Sungero.Docflow.IAccountingDocumentBase, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("96c4f4f3-dc74-497a-b347-e8faf4afe320");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Server.AccountingDocumentBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IAccountingDocumentBase, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Docflow.IAccountingDocumentBaseState State
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBaseState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.AccountingDocumentBaseState(this);
    }

    public new virtual global::Sungero.Docflow.IAccountingDocumentBaseInfo Info
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)base.Info; }
    }

    public new virtual global::Sungero.Docflow.IAccountingDocumentBaseAccessRights AccessRights
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBaseAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Server.AccountingDocumentBaseAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.AccountingDocumentBaseServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers(this);
    }

    private global::System.String _Number;
    public virtual global::System.String Number
    {
      get
      {
        return this._Number;
      }

      set
      {
        this.SetPropertyValue("Number", this._Number, value, (propertyValue) => { this._Number = propertyValue; }, this.NumberChangedHandler);
      }
    }
    private global::System.DateTime? _Date;
    public virtual global::System.DateTime? Date
    {
      get
      {
        return this._Date;
      }

      set
      {
        this.SetPropertyValue("Date", this._Date, value, (propertyValue) => { this._Date = propertyValue; }, this.DateChangedHandler);
      }
    }
    private global::System.Double? _TotalAmount;
    public virtual global::System.Double? TotalAmount
    {
      get
      {
        return this._TotalAmount;
      }

      set
      {
        this.SetPropertyValue("TotalAmount", this._TotalAmount, value, (propertyValue) => { this._TotalAmount = propertyValue; }, this.TotalAmountChangedHandler);
      }
    }
    private global::System.Boolean? _IsFormalized;
    public virtual global::System.Boolean? IsFormalized
    {
      get
      {
        return this._IsFormalized;
      }

      set
      {
        this.SetPropertyValue("IsFormalized", this._IsFormalized, value, (propertyValue) => { this._IsFormalized = propertyValue; }, this.IsFormalizedChangedHandler);
      }
    }
    private global::System.Int32? _SellerTitleId;
    public virtual global::System.Int32? SellerTitleId
    {
      get
      {
        return this._SellerTitleId;
      }

      set
      {
        this.SetPropertyValue("SellerTitleId", this._SellerTitleId, value, (propertyValue) => { this._SellerTitleId = propertyValue; }, this.SellerTitleIdChangedHandler);
      }
    }
    private global::System.Int32? _BuyerTitleId;
    public virtual global::System.Int32? BuyerTitleId
    {
      get
      {
        return this._BuyerTitleId;
      }

      set
      {
        this.SetPropertyValue("BuyerTitleId", this._BuyerTitleId, value, (propertyValue) => { this._BuyerTitleId = propertyValue; }, this.BuyerTitleIdChangedHandler);
      }
    }
    private global::System.Int32? _SellerSignatureId;
    public virtual global::System.Int32? SellerSignatureId
    {
      get
      {
        return this._SellerSignatureId;
      }

      set
      {
        this.SetPropertyValue("SellerSignatureId", this._SellerSignatureId, value, (propertyValue) => { this._SellerSignatureId = propertyValue; }, this.SellerSignatureIdChangedHandler);
      }
    }
    private global::System.Int32? _BuyerSignatureId;
    public virtual global::System.Int32? BuyerSignatureId
    {
      get
      {
        return this._BuyerSignatureId;
      }

      set
      {
        this.SetPropertyValue("BuyerSignatureId", this._BuyerSignatureId, value, (propertyValue) => { this._BuyerSignatureId = propertyValue; }, this.BuyerSignatureIdChangedHandler);
      }
    }
    private global::System.Boolean? _IsAdjustment;
    public virtual global::System.Boolean? IsAdjustment
    {
      get
      {
        return this._IsAdjustment;
      }

      set
      {
        this.SetPropertyValue("IsAdjustment", this._IsAdjustment, value, (propertyValue) => { this._IsAdjustment = propertyValue; }, this.IsAdjustmentChangedHandler);
      }
    }
    private global::System.Boolean? _IsRevision;
    public virtual global::System.Boolean? IsRevision
    {
      get
      {
        return this._IsRevision;
      }

      set
      {
        this.SetPropertyValue("IsRevision", this._IsRevision, value, (propertyValue) => { this._IsRevision = propertyValue; }, this.IsRevisionChangedHandler);
      }
    }
    private global::System.Boolean? _IsFormalizedSignatoryEmpty;
    public virtual global::System.Boolean? IsFormalizedSignatoryEmpty
    {
      get
      {
        return this._IsFormalizedSignatoryEmpty;
      }

      set
      {
        this.SetPropertyValue("IsFormalizedSignatoryEmpty", this._IsFormalizedSignatoryEmpty, value, (propertyValue) => { this._IsFormalizedSignatoryEmpty = propertyValue; }, this.IsFormalizedSignatoryEmptyChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _FormalizedServiceTypeItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Docflow.AccountingDocumentBase.FormalizedServiceType),
      typeof(global::Sungero.Docflow.Server.AccountingDocumentBase),
      "FormalizedServiceType");

    public static global::Sungero.Domain.Shared.EnumerationItems FormalizedServiceTypeItems
    {
      get { return global::Sungero.Docflow.Server.AccountingDocumentBase._FormalizedServiceTypeItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems FormalizedServiceTypeAllowedItems
    {
      get { return global::Sungero.Docflow.Server.AccountingDocumentBase.FormalizedServiceTypeItems; }
    }

    private global::Sungero.Core.Enumeration? _FormalizedServiceType;

    public virtual global::Sungero.Core.Enumeration? FormalizedServiceType
    {
      get { return this._FormalizedServiceType; }
      set { this.SetEnumPropertyValue("FormalizedServiceType", this._FormalizedServiceType, value, (propertyValue) => { this._FormalizedServiceType = propertyValue; }, this.FormalizedServiceTypeChangedHandler, this.FormalizedServiceTypeAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _FormalizedFunctionItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Docflow.AccountingDocumentBase.FormalizedFunction),
      typeof(global::Sungero.Docflow.Server.AccountingDocumentBase),
      "FormalizedFunction");

    public static global::Sungero.Domain.Shared.EnumerationItems FormalizedFunctionItems
    {
      get { return global::Sungero.Docflow.Server.AccountingDocumentBase._FormalizedFunctionItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems FormalizedFunctionAllowedItems
    {
      get { return global::Sungero.Docflow.Server.AccountingDocumentBase.FormalizedFunctionItems; }
    }

    private global::Sungero.Core.Enumeration? _FormalizedFunction;

    public virtual global::Sungero.Core.Enumeration? FormalizedFunction
    {
      get { return this._FormalizedFunction; }
      set { this.SetEnumPropertyValue("FormalizedFunction", this._FormalizedFunction, value, (propertyValue) => { this._FormalizedFunction = propertyValue; }, this.FormalizedFunctionChangedHandler, this.FormalizedFunctionAllowedItems); }
    }


    public new virtual global::Sungero.Docflow.IContractualDocumentBase LeadingDocument
    {
      get
      {
      return base.LeadingDocument as global::Sungero.Docflow.IContractualDocumentBase;
      }

      set
      {
      base.LeadingDocument = value;
      }
    }
    private global::Sungero.Commons.ICurrency _Currency;
    public virtual global::Sungero.Commons.ICurrency Currency
    {
      get
      {
        return this._Currency;
      }

      set
      {
        this.SetPropertyValue("Currency", this._Currency, value, (propertyValue) => { this._Currency = propertyValue; }, this.CurrencyChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _ResponsibleEmployee;
    public virtual global::Sungero.Company.IEmployee ResponsibleEmployee
    {
      get
      {
        return this._ResponsibleEmployee;
      }

      set
      {
        this.SetPropertyValue("ResponsibleEmployee", this._ResponsibleEmployee, value, (propertyValue) => { this._ResponsibleEmployee = propertyValue; }, this.ResponsibleEmployeeChangedHandler);
      }
    }
    private global::Sungero.Parties.IContact _Contact;
    public virtual global::Sungero.Parties.IContact Contact
    {
      get
      {
        return this._Contact;
      }

      set
      {
        this.SetPropertyValue("Contact", this._Contact, value, (propertyValue) => { this._Contact = propertyValue; }, this.ContactChangedHandler);
      }
    }
    private global::Sungero.Parties.IContact _CounterpartySignatory;
    public virtual global::Sungero.Parties.IContact CounterpartySignatory
    {
      get
      {
        return this._CounterpartySignatory;
      }

      set
      {
        this.SetPropertyValue("CounterpartySignatory", this._CounterpartySignatory, value, (propertyValue) => { this._CounterpartySignatory = propertyValue; }, this.CounterpartySignatoryChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBusinessUnitBox _BusinessUnitBox;
    public virtual global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox
    {
      get
      {
        return this._BusinessUnitBox;
      }

      set
      {
        this.SetPropertyValue("BusinessUnitBox", this._BusinessUnitBox, value, (propertyValue) => { this._BusinessUnitBox = propertyValue; }, this.BusinessUnitBoxChangedHandler);
      }
    }
    private global::Sungero.Docflow.IAccountingDocumentBase _Corrected;
    public virtual global::Sungero.Docflow.IAccountingDocumentBase Corrected
    {
      get
      {
        return this._Corrected;
      }

      set
      {
        this.SetPropertyValue("Corrected", this._Corrected, value, (propertyValue) => { this._Corrected = propertyValue; }, this.CorrectedChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccountingDocumentBaseVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Docflow.IAccountingDocumentBaseTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseCreatingFromServerHandler((global::Sungero.Docflow.IAccountingDocumentBase)entitySource, this.Info);
    }

    #region Framework events

    protected void NumberChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Number, this.Number, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).NumberChanged(args);
    }

    protected void DateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Date, this.Date, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).DateChanged(args);
    }

    protected void TotalAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.TotalAmount, this.TotalAmount, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).TotalAmountChanged(args);
    }

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CurrencyChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void ResponsibleEmployeeChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseResponsibleEmployeeChangedEventArgs(this.State.Properties.ResponsibleEmployee, this.ResponsibleEmployee, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).ResponsibleEmployeeChanged(args);
    }

    protected void ContactChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseContactChangedEventArgs(this.State.Properties.Contact, this.Contact, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).ContactChanged(args);
    }

    protected void IsFormalizedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsFormalized, this.IsFormalized, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsFormalizedChanged(args);
    }

    protected void SellerTitleIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SellerTitleId, this.SellerTitleId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).SellerTitleIdChanged(args);
    }

    protected void BuyerTitleIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.BuyerTitleId, this.BuyerTitleId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BuyerTitleIdChanged(args);
    }

    protected void CounterpartySignatoryChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCounterpartySignatoryChangedEventArgs(this.State.Properties.CounterpartySignatory, this.CounterpartySignatory, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartySignatoryChanged(args);
    }

    protected void SellerSignatureIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SellerSignatureId, this.SellerSignatureId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).SellerSignatureIdChanged(args);
    }

    protected void BuyerSignatureIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.BuyerSignatureId, this.BuyerSignatureId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BuyerSignatureIdChanged(args);
    }

    protected void BusinessUnitBoxChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseBusinessUnitBoxChangedEventArgs(this.State.Properties.BusinessUnitBox, this.BusinessUnitBox, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BusinessUnitBoxChanged(args);
    }

    protected void IsAdjustmentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsAdjustment, this.IsAdjustment, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsAdjustmentChanged(args);
    }

    protected void CorrectedChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCorrectedChangedEventArgs(this.State.Properties.Corrected, this.Corrected, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CorrectedChanged(args);
    }

    protected void FormalizedServiceTypeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.FormalizedServiceType, this.FormalizedServiceType, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).FormalizedServiceTypeChanged(args);
    }

    protected void FormalizedFunctionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.FormalizedFunction, this.FormalizedFunction, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).FormalizedFunctionChanged(args);
    }

    protected void IsRevisionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsRevision, this.IsRevision, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsRevisionChanged(args);
    }

    protected void IsFormalizedSignatoryEmptyChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsFormalizedSignatoryEmpty, this.IsFormalizedSignatoryEmpty, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsFormalizedSignatoryEmptyChanged(args);
    }



    protected override global::Sungero.Content.ElectronicDocumentVersionsSharedCollectionHandlers CreateVersionsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseVersionsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected override global::Sungero.Content.ElectronicDocumentVersionsSharedCollectionHandlers CreateVersionsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseVersionsSharedCollectionHandlers(this, null, e.Value, null);
    }





    #endregion


    public AccountingDocumentBase()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// AccountingDocumentBaseHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class AccountingDocumentBaseLeadingDocumentPropertyFilteringServerHandler<T>
    : global::Sungero.Docflow.OfficialDocumentLeadingDocumentPropertyFilteringServerHandler<T>
    where T : class, global::Sungero.Docflow.IContractualDocumentBase
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseLeadingDocumentPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCurrencyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CurrencyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCurrencyPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCurrencySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICurrency
  {

    public virtual global::System.Linq.IQueryable<T> CurrencySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCurrencySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCounterpartyPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseResponsibleEmployeePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ResponsibleEmployeeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseResponsibleEmployeePropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseResponsibleEmployeeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> ResponsibleEmployeeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseResponsibleEmployeeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseContactPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseContactPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseContactSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> ContactSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseContactSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySignatorySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCounterpartySignatorySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseBusinessUnitBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BusinessUnitBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseBusinessUnitBoxPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseBusinessUnitBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {

    public virtual global::System.Linq.IQueryable<T> BusinessUnitBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseBusinessUnitBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class AccountingDocumentBaseCorrectedPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseCorrectedPropertyFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCorrectedSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IAccountingDocumentBase
  {

    public virtual global::System.Linq.IQueryable<T> CorrectedSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AccountingDocumentBaseCorrectedSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class AccountingDocumentBaseFilteringServerHandler<T>
    : global::Sungero.Docflow.OfficialDocumentFilteringServerHandler<T>  
    where T : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    private global::Sungero.Docflow.IAccountingDocumentBaseFilterState _filter
    {
      get
      {
        return (Sungero.Docflow.IAccountingDocumentBaseFilterState)this.Filter;
      }
    }

    public AccountingDocumentBaseFilteringServerHandler(global::Sungero.Docflow.IAccountingDocumentBaseFilterState filter)
    : base(filter)
    {
    }

    protected AccountingDocumentBaseFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> CounterpartyFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class AccountingDocumentBaseSearchDialogServerHandler : global::Sungero.Docflow.OfficialDocumentSearchDialogServerHandler
   {
     private global::Sungero.Docflow.Server.AccountingDocumentBaseSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Docflow.Server.AccountingDocumentBaseSearchDialogModel)this.Dialog;
       }
     }

     public AccountingDocumentBaseSearchDialogServerHandler(global::Sungero.Docflow.Server.AccountingDocumentBaseSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class AccountingDocumentBaseServerHandlers : global::Sungero.Docflow.OfficialDocumentServerHandlers
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseServerHandlers(global::Sungero.Docflow.IAccountingDocumentBase entity)
      : base(entity)
    {
    }
  }

  public partial class AccountingDocumentBaseCreatingFromServerHandler : global::Sungero.Docflow.OfficialDocumentCreatingFromServerHandler
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _source
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Source; }
    }

    private global::Sungero.Docflow.IAccountingDocumentBaseInfo _info
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)this._Info; }
    }

    public AccountingDocumentBaseCreatingFromServerHandler(global::Sungero.Docflow.IAccountingDocumentBase source, global::Sungero.Docflow.IAccountingDocumentBaseInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// AccountingDocumentBaseEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
}

// ==================================================================
// AccountingDocumentBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class AccountingDocumentBaseAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentAccessRights, Sungero.Docflow.IAccountingDocumentBaseAccessRights
  {

    public AccountingDocumentBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AccountingDocumentBaseTypeAccessRights : 
    Sungero.Docflow.Server.OfficialDocumentTypeAccessRights, Sungero.Docflow.IAccountingDocumentBaseAccessRights
  {

    public AccountingDocumentBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AccountingDocumentBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccountingDocumentBaseRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IAccountingDocumentBaseRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IAccountingDocumentBase 
    {
       public new global::Sungero.Docflow.IAccountingDocumentBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IAccountingDocumentBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IAccountingDocumentBaseInfo Info
       {
          get { return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Server.AccountingDocumentBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AccountingDocumentBasePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
    public class AccountingDocumentBaseBusinessUnitPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccountingDocumentBase
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.Docflow.IAccountingDocumentBaseFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccountingDocumentBaseFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccountingDocumentBase>(query);
      }
    }

    public class AccountingDocumentBaseDepartmentPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccountingDocumentBase
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.Docflow.IAccountingDocumentBaseFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccountingDocumentBaseFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccountingDocumentBase>(query);
      }
    }

    public class AccountingDocumentBaseCounterpartyPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Docflow.IAccountingDocumentBase
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.Docflow.IAccountingDocumentBaseFilterState)this.State;
        var handlers = new global::Sungero.Docflow.AccountingDocumentBaseFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.CounterpartyFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Docflow.IAccountingDocumentBase>(query);
      }
    }

}

// ==================================================================
// AccountingDocumentBaseServerFunctions.g.cs
// ==================================================================

namespace Sungero.Docflow.Server
{
  public partial class AccountingDocumentBaseFunctions : global::Sungero.Docflow.Server.OfficialDocumentFunctions
  {
    private global::Sungero.Docflow.IAccountingDocumentBase _obj
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBase)this.Entity; }
    }

    public AccountingDocumentBaseFunctions(global::Sungero.Docflow.IAccountingDocumentBase entity) : base(entity) { }
  }
}

// ==================================================================
// AccountingDocumentBaseFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Functions
{
  internal static class AccountingDocumentBase
  {
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Docflow.Structures.AccountingDocumentBase.AfterExportDialog PrepareExportFinancialDocumentDialogDocuments(global::System.Collections.Generic.List<global::System.Int32> objsId, global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportDialogParams parameters)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.PrepareExportFinancialDocumentDialogDocuments(objsId, parameters);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Docflow.Structures.AccountingDocumentBase.AfterExportDialog PrepareExportFinancialDocumentDialogDocuments(global::Sungero.Docflow.Structures.AccountingDocumentBase.IExportDialogSearch search, global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportDialogParams parameters)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.PrepareExportFinancialDocumentDialogDocuments(search, parameters);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> AfterExportFinancialDocumentDialog(global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> objs, global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportDialogParams parameters)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.AfterExportFinancialDocumentDialog(objs, parameters);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportResult AfterExportFinancialDocumentDialogToWeb(global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> objs, global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportDialogParams parameters, global::System.String fileName)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.AfterExportFinancialDocumentDialogToWeb(objs, parameters, fileName);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Core.IZip CreateZipFromZipModel(global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ZipModel> zipModels, global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> objs, global::System.String fileName)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.CreateZipFromZipModel(zipModels, objs, fileName);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String GenerateFinArchiveExportReport(global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> documents, global::System.String pathToRoot)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.GenerateFinArchiveExportReport(documents, pathToRoot);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IOfficialDocument> SearchByRequisites(global::Sungero.Docflow.Structures.AccountingDocumentBase.IExportDialogSearch filter)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.SearchByRequisites(filter);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.ISignatureSetting> GetSignatureSettings(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
      return functions.GetSignatureSettings();
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    internal static  global::System.DateTime BeginningOfQuarter(global::System.DateTime currentDate)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.BeginningOfQuarter(currentDate);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    internal static  global::System.DateTime EndOfQuarter(global::System.DateTime currentDate)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.EndOfQuarter(currentDate);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void GenerateSellerTitle(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::Sungero.Docflow.Structures.AccountingDocumentBase.ISellerTitle sellerTitle)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
    functions.GenerateSellerTitle(sellerTitle);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void GenerateAnswer(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::Sungero.Docflow.Structures.AccountingDocumentBase.IBuyerTitle buyerTitle, global::System.Boolean isAgent)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
    functions.GenerateAnswer(buyerTitle, isAgent);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void GenerateDefaultAnswer(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::Sungero.Company.IEmployee signatory, global::System.Boolean isAgent)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
    functions.GenerateDefaultAnswer(signatory, isAgent);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.GenerateTitleError> TitleDialogValidationErrors(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::Sungero.Company.IEmployee signatory, global::Sungero.Company.IEmployee consignee, global::Sungero.Docflow.IPowerOfAttorney signatoryPowerOfAttorney, global::Sungero.Docflow.IPowerOfAttorney consigneePowerOfAttorney, global::System.String signatoryOtherReason, global::System.String consigneeOtherReason)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
      return functions.TitleDialogValidationErrors(signatory, consignee, signatoryPowerOfAttorney, consigneePowerOfAttorney, signatoryOtherReason, consigneeOtherReason);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void GenerateDefaultSellerTitle(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::Sungero.Company.IEmployee signatory)
    {
      var functions = (global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.ServerFunctions;
    functions.GenerateDefaultSellerTitle(signatory);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Company.IEmployee> GetEmployeesByIds(global::System.Collections.Generic.List<global::System.Int32> ids)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.GetEmployeesByIds(ids);
    }
    /// <redirect project="Sungero.Docflow.Server" type="Sungero.Docflow.Server.AccountingDocumentBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String GetTaxDocumentClassifier(global::Sungero.Docflow.IAccountingDocumentBase document)
    {
      return global::Sungero.Docflow.Server.AccountingDocumentBaseFunctions.GetTaxDocumentClassifier(document);
    }

    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::Sungero.Docflow.IDocumentGroupBase GetDocumentGroup(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.GetDocumentGroup();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::System.Boolean DefaultRegistrationPaneVisibility(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.DefaultRegistrationPaneVisibility();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::System.Boolean NeedShowRegistrationPane(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::System.Boolean conditions)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.NeedShowRegistrationPane(conditions);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetCounterparties(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.GetCounterparties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::System.Boolean isEnabled, global::System.Boolean isRepeatRegister)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, isRepeatRegister);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void FillName(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::System.Boolean HasEmptyRequiredProperties(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.HasEmptyRequiredProperties();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void ChangeCounterpartyPropertyAccess(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::System.Boolean isEnabled)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeCounterpartyPropertyAccess(isEnabled);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void ChangeRegistrationPaneVisibility(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::System.Boolean needShow, global::System.Boolean repeatRegister)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeRegistrationPaneVisibility(needShow, repeatRegister);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void AddRelatedDocumentsToAttachmentGroup(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup group)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.AddRelatedDocumentsToAttachmentGroup(group);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void ChangeCounterpartyPropertyAccess(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase, global::System.Boolean isEnabled, global::System.Boolean counterpartyCodeInNumber, global::System.Boolean enabledState)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.ChangeCounterpartyPropertyAccess(isEnabled, counterpartyCodeInNumber, enabledState);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  Sungero.FinancialArchive.IFinArchiveExportReport GetFinArchiveExportReport(global::System.Collections.Generic.List<global::Sungero.Docflow.Structures.AccountingDocumentBase.ExportedDocument> objs, global::System.DateTime dateTimeNow)
    {
      return global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions.GetFinArchiveExportReport(objs, dateTimeNow);
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  global::System.Boolean CheckRegistrationNumberUnique(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
      return functions.CheckRegistrationNumberUnique();
    }
    /// <redirect project="Sungero.Docflow.Shared" type="Sungero.Docflow.Shared.AccountingDocumentBaseFunctions" />
    internal static  void EnableRegistrationNumberAndDate(global::Sungero.Docflow.IAccountingDocumentBase accountingDocumentBase)
    {
      var functions = (global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)accountingDocumentBase).FunctionsContainer.SharedFunctions;
    functions.EnableRegistrationNumberAndDate();
    }

  }
}

// ==================================================================
// AccountingDocumentBaseServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Server
{
  public class AccountingDocumentBaseServerPublicFunctions : global::Sungero.Docflow.Server.IAccountingDocumentBaseServerPublicFunctions
  {
    public global::System.DateTime BeginningOfQuarter(global::System.DateTime currentDate)
    {
      return global::Sungero.Docflow.Functions.AccountingDocumentBase.BeginningOfQuarter(currentDate);
    }
    public global::System.DateTime EndOfQuarter(global::System.DateTime currentDate)
    {
      return global::Sungero.Docflow.Functions.AccountingDocumentBase.EndOfQuarter(currentDate);
    }
  }
}

// ==================================================================
// AccountingDocumentBaseQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Queries
{
  public class AccountingDocumentBase
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Docflow.Server.AccountingDocumentBase.AccountingDocumentBaseQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// AccountingDocumentBaseServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow
{
  public partial class AccountingDocumentBaseConvertingFromServerHandler : global::Sungero.Docflow.OfficialDocumentConvertingFromServerHandler
  { 
    private global::Sungero.Docflow.IAccountingDocumentBaseInfo _info
    {
      get { return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)this._Info; }
    }

    public AccountingDocumentBaseConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Docflow.IAccountingDocumentBaseInfo info)
      : base(source, info)
    {
    }
  }
}
