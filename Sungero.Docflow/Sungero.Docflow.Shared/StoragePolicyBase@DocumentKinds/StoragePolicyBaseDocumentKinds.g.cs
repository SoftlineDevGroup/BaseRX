
// ==================================================================
// StoragePolicyBaseDocumentKindsState.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Shared
{
  public class StoragePolicyBaseDocumentKindsState : 
    global::Sungero.Domain.Shared.ChildEntityState, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsState
  {
    public StoragePolicyBaseDocumentKindsState(global::Sungero.Docflow.IStoragePolicyBaseDocumentKinds entity) : base(entity) { }

    public new global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertyStates Properties
    {
      get { return (global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertyStates)base.Properties; }
    }

    protected override global::Sungero.Domain.Shared.IEntityPropertyStates CreatePropertyStates(global::Sungero.Domain.Shared.IEntity entity)
    {
      return new global::Sungero.Docflow.Shared.StoragePolicyBaseDocumentKindsPropertyStates(entity);
    }


  }


  public class StoragePolicyBaseDocumentKindsPropertyStates : 
    global::Sungero.Domain.Shared.ChildEntityPropertyStates, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertyStates
  {
            public global::Sungero.Domain.Shared.IPropertyState<global::Sungero.Docflow.IStoragePolicyBase> StoragePolicyBase 
            {
              get { return this.InternalStoragePolicyBase; }
            }

            protected virtual global::Sungero.Domain.Shared.IPropertyState<global::Sungero.Docflow.IStoragePolicyBase> InternalStoragePolicyBase
            {
              get { return this.GetPropertyState<global::Sungero.Docflow.IStoragePolicyBase>("StoragePolicyBase"); }
            }
            public global::Sungero.Domain.Shared.IPropertyState<global::Sungero.Docflow.IDocumentKind> DocumentKind 
            {
              get { return this.InternalDocumentKind; }
            }

            protected virtual global::Sungero.Domain.Shared.IPropertyState<global::Sungero.Docflow.IDocumentKind> InternalDocumentKind
            {
              get { return this.GetPropertyState<global::Sungero.Docflow.IDocumentKind>("DocumentKind"); }
            }


    protected internal StoragePolicyBaseDocumentKindsPropertyStates(global::Sungero.Domain.Shared.IEntity entity) : base(entity) { }
  }

  public class StoragePolicyBaseDocumentKindsCollectionPropertyState<T> :
    global::Sungero.Domain.Shared.ChildEntityCollectionPropertyState<T>, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsCollectionPropertyState<T>
    where T : global::Sungero.Docflow.IStoragePolicyBaseDocumentKinds
  {
    public new global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsCollectionPropertyStates Properties
    {
      get { return (global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsCollectionPropertyStates)base.Properties; }
    }

    protected override global::Sungero.Domain.Shared.IChildEntityCollectionPropertyStates CreatePropertyStates()
    {
      return new global::Sungero.Docflow.Shared.StoragePolicyBaseDocumentKindsCollectionPropertyStates(this.ChildEntityMetadata);
    }

    protected internal StoragePolicyBaseDocumentKindsCollectionPropertyState(global::Sungero.Domain.Shared.IEntity entity, string propertyName) : base(entity, propertyName) { }
  }

  public class StoragePolicyBaseDocumentKindsCollectionPropertyStates :
    global::Sungero.Domain.Shared.ChildEntityCollectionPropertyStates, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsCollectionPropertyStates
  {
        public global::Sungero.Domain.Shared.IChildPropertySummaryState StoragePolicyBase
        {
          get { return this.GetChildPropertySummaryState("StoragePolicyBase"); }
        }
        public global::Sungero.Domain.Shared.IChildPropertySummaryState DocumentKind
        {
          get { return this.GetChildPropertySummaryState("DocumentKind"); }
        }


    protected internal StoragePolicyBaseDocumentKindsCollectionPropertyStates(global::Sungero.Metadata.EntityMetadata childEntityMetadata) : base(childEntityMetadata) { }
  }
}

// ==================================================================
// StoragePolicyBaseDocumentKindsEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Shared
{  
    public class StoragePolicyBaseDocumentKindsDocumentKindChangedEventArgs : global::Sungero.Domain.Shared.PropertyChangedEventArgs<global::Sungero.Docflow.IDocumentKind>
    {
      public StoragePolicyBaseDocumentKindsDocumentKindChangedEventArgs(global::Sungero.Domain.Shared.IPropertyState<global::Sungero.Docflow.IDocumentKind> state, global::Sungero.Docflow.IDocumentKind newValue, global::Sungero.Domain.Shared.IEntity entity): base(state, newValue, entity) { }
    }

}

// ==================================================================
// StoragePolicyBaseDocumentKindsInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Shared
{
  public class StoragePolicyBaseDocumentKindsInfo : 
    global::Sungero.Domain.Shared.ChildEntityInfo, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsInfo
  {
    public StoragePolicyBaseDocumentKindsInfo(global::System.Type entityType) : base(entityType) { }

    public new global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertiesInfo Properties
    {
      get { return (global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertiesInfo)base.Properties; }
    }

    protected override global::Sungero.Domain.Shared.IEntityPropertiesInfo CreateEntityPropertiesInfo(global::System.Type entityType)
    {
      return new global::Sungero.Docflow.Shared.StoragePolicyBaseDocumentKindsPropertiesInfo(entityType);
    }

  }

  public class StoragePolicyBaseDocumentKindsPropertiesInfo : 
    global::Sungero.Domain.Shared.ChildEntityPropertiesInfo, global::Sungero.Docflow.IStoragePolicyBaseDocumentKindsPropertiesInfo
  {
        public global::Sungero.Domain.Shared.INavigationPropertyInfo<global::Sungero.Docflow.IStoragePolicyBaseInfo, global::Sungero.Docflow.IStoragePolicyBase> StoragePolicyBase 
        {
          get
          {
             var propertyMetadata = this.GetPropertyMetadata<global::Sungero.Metadata.NavigationPropertyMetadata>("StoragePolicyBase");
             return new global::Sungero.Domain.Shared.NavigationPropertyInfo<global::Sungero.Docflow.IStoragePolicyBaseInfo, global::Sungero.Docflow.IStoragePolicyBase>(propertyMetadata);
          }
        }
        public global::Sungero.Domain.Shared.INavigationPropertyInfo<global::Sungero.Docflow.IDocumentKindInfo, global::Sungero.Docflow.IDocumentKind> DocumentKind 
        {
          get
          {
             var propertyMetadata = this.GetPropertyMetadata<global::Sungero.Metadata.NavigationPropertyMetadata>("DocumentKind");
             return new global::Sungero.Domain.Shared.NavigationPropertyInfo<global::Sungero.Docflow.IDocumentKindInfo, global::Sungero.Docflow.IDocumentKind>(propertyMetadata);
          }
        }


    protected internal StoragePolicyBaseDocumentKindsPropertiesInfo(global::System.Type entityType) : base(entityType) { }
  }

}
