
// ==================================================================
// StoragePolicy.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class StoragePolicy :
    global::Sungero.Docflow.Client.StoragePolicyBase, global::Sungero.Docflow.IStoragePolicy
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("9fed5653-77e7-4543-b071-6586033907ef");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.StoragePolicy.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IStoragePolicy, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.IStoragePolicyState State
    {
      get
      {
        return (global::Sungero.Docflow.IStoragePolicyState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.StoragePolicyState(this);
    }

    public new global::Sungero.Docflow.IStoragePolicyInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IStoragePolicyInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.IStoragePolicyAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.IStoragePolicyAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyAccessRights(this);
    }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.StoragePolicyFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.StoragePolicyFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.StoragePolicyClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.StoragePolicySharedHandlers(this);
    }

    #endregion

    #region Framework events






    #endregion

    #region Constructors



            protected override void InitDocumentKindsCollectionProperty()
            {
              this._DocumentKinds = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IStoragePolicyDocumentKinds>("DocumentKinds", this);
              this._DocumentKinds.ValueChanged += (sender, e) => { this.DocumentKindsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._DocumentKinds);
              this.SetDocumentKindsEventHandlers();
            }


    public StoragePolicy()
    {








    }

    #endregion

  }
}

// ==================================================================
// StoragePolicyPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class StoragePolicyPresenter<T> :
    global::Sungero.Docflow.Client.StoragePolicyBasePresenter<T>
    where T : class, global::Sungero.Docflow.IStoragePolicy
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");


                        this._DocumentKindsDocumentKindCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IDocumentKind>(() => this.Entity.Id, typeof(Sungero.Docflow.IStoragePolicyDocumentKinds), "DocumentKind");



    }

    public StoragePolicyPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// StoragePolicyCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class StoragePolicyCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.StoragePolicyBaseCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.IStoragePolicy
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public StoragePolicyCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public StoragePolicyCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public StoragePolicyCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public StoragePolicyCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// StoragePolicyRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class StoragePolicyRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.StoragePolicyBaseRepositoryImplementer<T>,
      global::Sungero.Docflow.IStoragePolicyRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IStoragePolicy
    {
       public new global::Sungero.Docflow.IStoragePolicyAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IStoragePolicyAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IStoragePolicyInfo Info
       {
          get { return (global::Sungero.Docflow.IStoragePolicyInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.StoragePolicyTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// StoragePolicyAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class StoragePolicyAccessRights : 
    Sungero.Docflow.Client.StoragePolicyBaseAccessRights, Sungero.Docflow.IStoragePolicyAccessRights
  {

    public StoragePolicyAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class StoragePolicyTypeAccessRights : 
    Sungero.Docflow.Client.StoragePolicyBaseTypeAccessRights, Sungero.Docflow.IStoragePolicyAccessRights
  {

    public StoragePolicyTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
