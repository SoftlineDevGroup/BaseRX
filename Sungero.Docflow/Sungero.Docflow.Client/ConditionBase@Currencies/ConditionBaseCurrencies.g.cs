
// ==================================================================
// ConditionBaseCurrencies.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ConditionBaseCurrencies :
    global::Sungero.Domain.Client.ChildEntityProxy, global::Sungero.Docflow.IConditionBaseCurrencies
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("02d2a095-58f6-4746-8a9d-35a55e2f9d64");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.ConditionBaseCurrencies.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IConditionBaseCurrencies, Sungero.Domain.Interfaces"; }
    }

    public new global::Sungero.Docflow.IConditionBaseCurrenciesState State
    {
      get
      {
        return (global::Sungero.Docflow.IConditionBaseCurrenciesState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ConditionBaseCurrenciesState(this);
    }

    public new global::Sungero.Docflow.IConditionBaseCurrenciesInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IConditionBaseCurrenciesInfo)base.Info;
      }
    }

    protected global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IConditionBase> _ConditionBase;

    public global::Sungero.Docflow.IConditionBase ConditionBase
    {
      get { return this._ConditionBase.Value; }
      set { this._ConditionBase.Value = value; }
    }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.ConditionBase; }
      set { this.ConditionBase = (global::Sungero.Docflow.IConditionBase)value; }
    }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.ICurrency> _Currency;

              public virtual global::Sungero.Commons.ICurrency Currency
              {
              get
              {
                return this._Currency.Value as global::Sungero.Commons.ICurrency;
              }

              set
              {
                (this._Currency as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ConditionBaseCurrenciesClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ConditionBaseCurrenciesSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ConditionBaseCurrenciesCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.ConditionBaseCurrenciesSharedHandlers)this.SharedHandlers).CurrenciesCurrencyChanged(args);
    }



  protected global::Sungero.Commons.ICurrency CurrencyValueInputHandler(global::Sungero.Commons.ICurrency value)
  {
    var args = new global::Sungero.Docflow.Client.ConditionBaseCurrenciesCurrencyValueInputEventArgs(this.Currency, value, this, this.Info.Properties.Currency);
    ((global::Sungero.Docflow.ConditionBaseCurrenciesClientHandlers)this.Handlers).CurrenciesCurrencyValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitCurrencyNavigationProperty()
              {
                this._Currency = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.ICurrency>("Currency", this);
                this._Currency.ValueChanged += (sender, e) => { this.CurrencyChangedHandler(); };
                this.AddProperty(this._Currency as global::Sungero.Domain.Client.IProperty);
              }




    public ConditionBaseCurrencies()
    {
      this._ConditionBase = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IConditionBase>("ConditionBase", this, true);


            this.InitCurrencyNavigationProperty();








    }

    #endregion

  }
}
