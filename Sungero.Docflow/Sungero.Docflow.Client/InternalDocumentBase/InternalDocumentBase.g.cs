
// ==================================================================
// InternalDocumentBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class InternalDocumentBase :
    global::Sungero.Docflow.Client.OfficialDocument, global::Sungero.Docflow.IInternalDocumentBase
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("ce3e34ed-7be2-4426-a951-d5a70f966650");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.InternalDocumentBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IInternalDocumentBase, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.IInternalDocumentBaseState State
    {
      get
      {
        return (global::Sungero.Docflow.IInternalDocumentBaseState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.InternalDocumentBaseState(this);
    }

    public new global::Sungero.Docflow.IInternalDocumentBaseInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IInternalDocumentBaseInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.IInternalDocumentBaseAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.IInternalDocumentBaseAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.InternalDocumentBaseAccessRights(this);
    }










    #endregion

    #region Methods


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.InternalDocumentBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.InternalDocumentBaseFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.InternalDocumentBaseClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.InternalDocumentBaseSharedHandlers(this);
    }

    #endregion

    #region Framework events







    #endregion

    #region Constructors



















            protected override void InitVersionsCollectionProperty()
            {
              this._Versions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IInternalDocumentBaseVersions>("Versions", this);
              this._Versions.ValueChanged += (sender, e) => { this.VersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Versions);
              this.SetVersionsEventHandlers();
            }

            protected override void InitTrackingCollectionProperty()
            {
              this._Tracking = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IInternalDocumentBaseTracking>("Tracking", this);
              this._Tracking.ValueChanged += (sender, e) => { this.TrackingChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Tracking);
              this.SetTrackingEventHandlers();
            }


    public InternalDocumentBase()
    {








    }

    #endregion

  }
}

// ==================================================================
// InternalDocumentBasePresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class InternalDocumentBasePresenter<T> :
    global::Sungero.Docflow.Client.OfficialDocumentPresenter<T>
    where T : class, global::Sungero.Docflow.IInternalDocumentBase
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _OpenActionItemExecutionReportCommand;

          public global::System.Windows.Input.ICommand OpenActionItemExecutionReportCommand
          {
            get
            {
              if (this._OpenActionItemExecutionReportCommand == null)
                  this._OpenActionItemExecutionReportCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItemExecutionReport", this, this.OpenActionItemExecutionReport, this.CanOpenActionItemExecutionReport) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemExecutionReportCommand;
            }
          }
          private global::System.Windows.Input.ICommand _OpenActionItemsCommand;

          public global::System.Windows.Input.ICommand OpenActionItemsCommand
          {
            get
            {
              if (this._OpenActionItemsCommand == null)
                  this._OpenActionItemsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItems", this, this.OpenActionItems, this.CanOpenActionItems) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemsCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanOpenActionItemExecutionReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).CanOpenActionItemExecutionReport(args);
              }

              private void OpenActionItemExecutionReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenActionItemExecutionReport);
                ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).OpenActionItemExecutionReport(args);
              }

              private bool CanOpenActionItems(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).CanOpenActionItems(args);
              }

              private void OpenActionItems(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenActionItems);
                ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).OpenActionItems(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._AssociatedApplicationCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(T), "AssociatedApplication");

              this._DeliveryMethodCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(T), "DeliveryMethod");

              this._CaseFileCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.ICaseFile>(() => this.Entity.Id, typeof(T), "CaseFile");

              this._DeliveredToCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "DeliveredTo");

              this._ResponsibleForReturnEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleForReturnEmployee");

              this._ProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IProjectBase>(() => this.Entity.Id, typeof(T), "Project");

              this._LeadingDocumentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IOfficialDocument>(() => this.Entity.Id, typeof(T), "LeadingDocument");

              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");

              this._PreparedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "PreparedBy");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._DocumentRegisterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentRegister>(() => this.Entity, typeof(T), "DocumentRegister");

              this._DocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentKind>(() => this.Entity, typeof(T), "DocumentKind");

              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

              this._OurSignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IEmployee>(() => this.Entity, typeof(T), "OurSignatory");

              this._DocumentGroupCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentGroupBase>(() => this.Entity, typeof(T), "DocumentGroup");

              this._AssigneeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Assignee");

              this._DepartmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IDepartment>(() => this.Entity.Id, typeof(T), "Department");


                        this._VersionsAuthorCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseVersions), "Author");

                        this._VersionsModifiedByCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseVersions), "ModifiedBy");

                        this._VersionsAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseVersions), "AssociatedApplication");

                        this._VersionsBodyAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseVersions), "BodyAssociatedApplication");


                        this._TrackingDeliveredToCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseTracking), "DeliveredTo");

                        this._TrackingReturnTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(Sungero.Docflow.IInternalDocumentBaseTracking), "ReturnTask");



    }

    public InternalDocumentBasePresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// InternalDocumentBaseCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class InternalDocumentBaseCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.OfficialDocumentCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.IInternalDocumentBase
  {
    #region Actions

          private global::System.Windows.Input.ICommand _DocumentRegisterCommand;  

          public global::System.Windows.Input.ICommand DocumentRegisterCommand 
          { 
            get
            { 
              if (this._DocumentRegisterCommand == null)
                this._DocumentRegisterCommand = new global::Sungero.Domain.Client.PresenterCommand("DocumentRegister", this, this.DocumentRegister, this.CanDocumentRegister);
              return this._DocumentRegisterCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _OpenActionItemExecutionReportCommand;  

          public global::System.Windows.Input.ICommand OpenActionItemExecutionReportCommand 
          { 
            get
            { 
              if (this._OpenActionItemExecutionReportCommand == null)
                this._OpenActionItemExecutionReportCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItemExecutionReport", this, this.OpenActionItemExecutionReport, this.CanOpenActionItemExecutionReport) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemExecutionReportCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _OpenActionItemsCommand;  

          public global::System.Windows.Input.ICommand OpenActionItemsCommand 
          { 
            get
            { 
              if (this._OpenActionItemsCommand == null)
                this._OpenActionItemsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItems", this, this.OpenActionItems, this.CanOpenActionItems) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemsCommand; 
            }
          }



    #endregion

    #region Methods

        protected virtual bool CanDocumentRegister()
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return Sungero.Docflow.Client.InternalDocumentBaseStaticActions.CanDocumentRegister(args);
        }

        protected virtual void DocumentRegister()
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          Sungero.Docflow.Client.InternalDocumentBaseStaticActions.DocumentRegister(args);
        }

        private bool CanOpenActionItemExecutionReport(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).CanOpenActionItemExecutionReport(args);
        }

        private void OpenActionItemExecutionReport(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.OpenActionItemExecutionReport);
          ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).OpenActionItemExecutionReport(args);
        }

        private bool CanOpenActionItems(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).CanOpenActionItems(args);
        }

        private void OpenActionItems(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.OpenActionItems);
          ((Sungero.Docflow.Client.InternalDocumentBaseActions)(entity as Sungero.Docflow.Client.InternalDocumentBase).ActionsHandlers).OpenActionItems(args);
        }



    #endregion

    public InternalDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public InternalDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public InternalDocumentBaseCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public InternalDocumentBaseCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// InternalDocumentBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class InternalDocumentBaseRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IInternalDocumentBaseRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IInternalDocumentBase
    {
       public new global::Sungero.Docflow.IInternalDocumentBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IInternalDocumentBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IInternalDocumentBaseInfo Info
       {
          get { return (global::Sungero.Docflow.IInternalDocumentBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.InternalDocumentBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// InternalDocumentBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class InternalDocumentBaseAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentAccessRights, Sungero.Docflow.IInternalDocumentBaseAccessRights
  {

    public InternalDocumentBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class InternalDocumentBaseTypeAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentTypeAccessRights, Sungero.Docflow.IInternalDocumentBaseAccessRights
  {

    public InternalDocumentBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
