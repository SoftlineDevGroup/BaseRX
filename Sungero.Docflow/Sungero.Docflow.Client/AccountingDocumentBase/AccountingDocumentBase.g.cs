
// ==================================================================
// AccountingDocumentBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class AccountingDocumentBase :
    global::Sungero.Docflow.Client.OfficialDocument, global::Sungero.Docflow.IAccountingDocumentBase
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("96c4f4f3-dc74-497a-b347-e8faf4afe320");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.AccountingDocumentBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IAccountingDocumentBase, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.IAccountingDocumentBaseState State
    {
      get
      {
        return (global::Sungero.Docflow.IAccountingDocumentBaseState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.AccountingDocumentBaseState(this);
    }

    public new global::Sungero.Docflow.IAccountingDocumentBaseInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.IAccountingDocumentBaseAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.IAccountingDocumentBaseAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.AccountingDocumentBaseAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Number;

        public virtual global::System.String Number
        {
          get { return this._Number.Value; }
          set { this._Number.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _Date;

        public virtual global::System.DateTime? Date
        {
          get { return this._Date.Value; }
          set { this._Date.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Double?> _TotalAmount;

        public virtual global::System.Double? TotalAmount
        {
          get { return this._TotalAmount.Value; }
          set { this._TotalAmount.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsFormalized;

        public virtual global::System.Boolean? IsFormalized
        {
          get { return this._IsFormalized.Value; }
          set { this._IsFormalized.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _SellerTitleId;

        public virtual global::System.Int32? SellerTitleId
        {
          get { return this._SellerTitleId.Value; }
          set { this._SellerTitleId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _BuyerTitleId;

        public virtual global::System.Int32? BuyerTitleId
        {
          get { return this._BuyerTitleId.Value; }
          set { this._BuyerTitleId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _SellerSignatureId;

        public virtual global::System.Int32? SellerSignatureId
        {
          get { return this._SellerSignatureId.Value; }
          set { this._SellerSignatureId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _BuyerSignatureId;

        public virtual global::System.Int32? BuyerSignatureId
        {
          get { return this._BuyerSignatureId.Value; }
          set { this._BuyerSignatureId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsAdjustment;

        public virtual global::System.Boolean? IsAdjustment
        {
          get { return this._IsAdjustment.Value; }
          set { this._IsAdjustment.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _FormalizedServiceType;

        public virtual global::Sungero.Core.Enumeration? FormalizedServiceType
        {
          get { return this._FormalizedServiceType.Value; }
          set { this._FormalizedServiceType.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _FormalizedFunction;

        public virtual global::Sungero.Core.Enumeration? FormalizedFunction
        {
          get { return this._FormalizedFunction.Value; }
          set { this._FormalizedFunction.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsRevision;

        public virtual global::System.Boolean? IsRevision
        {
          get { return this._IsRevision.Value; }
          set { this._IsRevision.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsFormalizedSignatoryEmpty;

        public virtual global::System.Boolean? IsFormalizedSignatoryEmpty
        {
          get { return this._IsFormalizedSignatoryEmpty.Value; }
          set { this._IsFormalizedSignatoryEmpty.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _FormalizedServiceTypeItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Sungero.Docflow.AccountingDocumentBase.FormalizedServiceType),
          typeof(global::Sungero.Docflow.Client.AccountingDocumentBase),
          "FormalizedServiceType");

        public static global::Sungero.Domain.Shared.EnumerationItems FormalizedServiceTypeItems
        {
          get { return global::Sungero.Docflow.Client.AccountingDocumentBase._FormalizedServiceTypeItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems FormalizedServiceTypeAllowedItems
        {
          get { return global::Sungero.Docflow.Client.AccountingDocumentBase.FormalizedServiceTypeItems; }
        }

        private static global::Sungero.Domain.Shared.EnumerationItems _FormalizedFunctionItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Sungero.Docflow.AccountingDocumentBase.FormalizedFunction),
          typeof(global::Sungero.Docflow.Client.AccountingDocumentBase),
          "FormalizedFunction");

        public static global::Sungero.Domain.Shared.EnumerationItems FormalizedFunctionItems
        {
          get { return global::Sungero.Docflow.Client.AccountingDocumentBase._FormalizedFunctionItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems FormalizedFunctionAllowedItems
        {
          get { return global::Sungero.Docflow.Client.AccountingDocumentBase.FormalizedFunctionItems; }
        }





              public new virtual global::Sungero.Docflow.IContractualDocumentBase LeadingDocument
              {
              get
              {
                return this._LeadingDocument.Value as global::Sungero.Docflow.IContractualDocumentBase;
              }

              set
              {
                (this._LeadingDocument as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.ICurrency> _Currency;

              public virtual global::Sungero.Commons.ICurrency Currency
              {
              get
              {
                return this._Currency.Value as global::Sungero.Commons.ICurrency;
              }

              set
              {
                (this._Currency as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.ICounterparty> _Counterparty;

              public virtual global::Sungero.Parties.ICounterparty Counterparty
              {
              get
              {
                return this._Counterparty.Value as global::Sungero.Parties.ICounterparty;
              }

              set
              {
                (this._Counterparty as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _ResponsibleEmployee;

              public virtual global::Sungero.Company.IEmployee ResponsibleEmployee
              {
              get
              {
                return this._ResponsibleEmployee.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._ResponsibleEmployee as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.IContact> _Contact;

              public virtual global::Sungero.Parties.IContact Contact
              {
              get
              {
                return this._Contact.Value as global::Sungero.Parties.IContact;
              }

              set
              {
                (this._Contact as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.IContact> _CounterpartySignatory;

              public virtual global::Sungero.Parties.IContact CounterpartySignatory
              {
              get
              {
                return this._CounterpartySignatory.Value as global::Sungero.Parties.IContact;
              }

              set
              {
                (this._CounterpartySignatory as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox> _BusinessUnitBox;

              public virtual global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox
              {
              get
              {
                return this._BusinessUnitBox.Value as global::Sungero.ExchangeCore.IBusinessUnitBox;
              }

              set
              {
                (this._BusinessUnitBox as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Docflow.IAccountingDocumentBase> _Corrected;

              public virtual global::Sungero.Docflow.IAccountingDocumentBase Corrected
              {
              get
              {
                return this._Corrected.Value as global::Sungero.Docflow.IAccountingDocumentBase;
              }

              set
              {
                (this._Corrected as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateVersionsActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.AccountingDocumentBaseVersionsActions();
    }

    protected override object CreateVersionsCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.AccountingDocumentBaseVersionsCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.AccountingDocumentBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.AccountingDocumentBaseFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.AccountingDocumentBaseClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NumberChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Number, this.Number, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).NumberChanged(args);
    }

    protected void DateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Date, this.Date, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).DateChanged(args);
    }

    protected void TotalAmountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.TotalAmount, this.TotalAmount, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).TotalAmountChanged(args);
    }

    protected void CurrencyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCurrencyChangedEventArgs(this.State.Properties.Currency, this.Currency, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CurrencyChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void ResponsibleEmployeeChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseResponsibleEmployeeChangedEventArgs(this.State.Properties.ResponsibleEmployee, this.ResponsibleEmployee, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).ResponsibleEmployeeChanged(args);
    }

    protected void ContactChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseContactChangedEventArgs(this.State.Properties.Contact, this.Contact, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).ContactChanged(args);
    }

    protected void IsFormalizedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsFormalized, this.IsFormalized, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsFormalizedChanged(args);
    }

    protected void SellerTitleIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SellerTitleId, this.SellerTitleId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).SellerTitleIdChanged(args);
    }

    protected void BuyerTitleIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.BuyerTitleId, this.BuyerTitleId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BuyerTitleIdChanged(args);
    }

    protected void CounterpartySignatoryChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCounterpartySignatoryChangedEventArgs(this.State.Properties.CounterpartySignatory, this.CounterpartySignatory, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CounterpartySignatoryChanged(args);
    }

    protected void SellerSignatureIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SellerSignatureId, this.SellerSignatureId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).SellerSignatureIdChanged(args);
    }

    protected void BuyerSignatureIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.BuyerSignatureId, this.BuyerSignatureId, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BuyerSignatureIdChanged(args);
    }

    protected void BusinessUnitBoxChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseBusinessUnitBoxChangedEventArgs(this.State.Properties.BusinessUnitBox, this.BusinessUnitBox, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).BusinessUnitBoxChanged(args);
    }

    protected void IsAdjustmentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsAdjustment, this.IsAdjustment, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsAdjustmentChanged(args);
    }

    protected void CorrectedChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.AccountingDocumentBaseCorrectedChangedEventArgs(this.State.Properties.Corrected, this.Corrected, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).CorrectedChanged(args);
    }

    protected void FormalizedServiceTypeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.FormalizedServiceType, this.FormalizedServiceType, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).FormalizedServiceTypeChanged(args);
    }

    protected void FormalizedFunctionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.FormalizedFunction, this.FormalizedFunction, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).FormalizedFunctionChanged(args);
    }

    protected void IsRevisionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsRevision, this.IsRevision, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsRevisionChanged(args);
    }

    protected void IsFormalizedSignatoryEmptyChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsFormalizedSignatoryEmpty, this.IsFormalizedSignatoryEmpty, this);
     ((global::Sungero.Docflow.AccountingDocumentBaseSharedHandlers)this.SharedHandlers).IsFormalizedSignatoryEmptyChanged(args);
    }



    protected override global::Sungero.Content.ElectronicDocumentVersionsSharedCollectionHandlers CreateVersionsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseVersionsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected override global::Sungero.Content.ElectronicDocumentVersionsSharedCollectionHandlers CreateVersionsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.AccountingDocumentBaseVersionsSharedCollectionHandlers(this, null, e.Value, null);
    }





  protected global::System.String NumberValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Number, value, this, this.Info.Properties.Number);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).NumberValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? DateValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.Date, value, this, this.Info.Properties.Date);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).DateValueInput(args);
    return args.NewValue;
  }

  protected global::System.Double? TotalAmountValueInputHandler(global::System.Double? value)
  {
    var args = new global::Sungero.Presentation.DoubleValueInputEventArgs(this.TotalAmount, value, this, this.Info.Properties.TotalAmount);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).TotalAmountValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.ICurrency CurrencyValueInputHandler(global::Sungero.Commons.ICurrency value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseCurrencyValueInputEventArgs(this.Currency, value, this, this.Info.Properties.Currency);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).CurrencyValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.ICounterparty CounterpartyValueInputHandler(global::Sungero.Parties.ICounterparty value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseCounterpartyValueInputEventArgs(this.Counterparty, value, this, this.Info.Properties.Counterparty);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).CounterpartyValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee ResponsibleEmployeeValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseResponsibleEmployeeValueInputEventArgs(this.ResponsibleEmployee, value, this, this.Info.Properties.ResponsibleEmployee);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).ResponsibleEmployeeValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.IContact ContactValueInputHandler(global::Sungero.Parties.IContact value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseContactValueInputEventArgs(this.Contact, value, this, this.Info.Properties.Contact);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).ContactValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsFormalizedValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsFormalized, value, this, this.Info.Properties.IsFormalized);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).IsFormalizedValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? SellerTitleIdValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.SellerTitleId, value, this, this.Info.Properties.SellerTitleId);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).SellerTitleIdValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? BuyerTitleIdValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.BuyerTitleId, value, this, this.Info.Properties.BuyerTitleId);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).BuyerTitleIdValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.IContact CounterpartySignatoryValueInputHandler(global::Sungero.Parties.IContact value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseCounterpartySignatoryValueInputEventArgs(this.CounterpartySignatory, value, this, this.Info.Properties.CounterpartySignatory);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).CounterpartySignatoryValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? SellerSignatureIdValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.SellerSignatureId, value, this, this.Info.Properties.SellerSignatureId);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).SellerSignatureIdValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? BuyerSignatureIdValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.BuyerSignatureId, value, this, this.Info.Properties.BuyerSignatureId);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).BuyerSignatureIdValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBoxValueInputHandler(global::Sungero.ExchangeCore.IBusinessUnitBox value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseBusinessUnitBoxValueInputEventArgs(this.BusinessUnitBox, value, this, this.Info.Properties.BusinessUnitBox);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).BusinessUnitBoxValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsAdjustmentValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsAdjustment, value, this, this.Info.Properties.IsAdjustment);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).IsAdjustmentValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Docflow.IAccountingDocumentBase CorrectedValueInputHandler(global::Sungero.Docflow.IAccountingDocumentBase value)
  {
    var args = new global::Sungero.Docflow.Client.AccountingDocumentBaseCorrectedValueInputEventArgs(this.Corrected, value, this, this.Info.Properties.Corrected);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).CorrectedValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? FormalizedServiceTypeValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.FormalizedServiceType, value, this, this.Info.Properties.FormalizedServiceType);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).FormalizedServiceTypeValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? FormalizedFunctionValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.FormalizedFunction, value, this, this.Info.Properties.FormalizedFunction);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).FormalizedFunctionValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsRevisionValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsRevision, value, this, this.Info.Properties.IsRevision);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).IsRevisionValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsFormalizedSignatoryEmptyValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsFormalizedSignatoryEmpty, value, this, this.Info.Properties.IsFormalizedSignatoryEmpty);
    ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).IsFormalizedSignatoryEmptyValueInput(args);
    return args.NewValue;
  }


  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> FormalizedServiceTypeFilteringHandler()
  {
    return ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).FormalizedServiceTypeFiltering(this.FormalizedServiceTypeAllowedItems);
  }

  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> FormalizedFunctionFilteringHandler()
  {
    return ((global::Sungero.Docflow.AccountingDocumentBaseClientHandlers)this.Handlers).FormalizedFunctionFiltering(this.FormalizedFunctionAllowedItems);
  }




    #endregion

    #region Constructors





              protected override void InitLeadingDocumentNavigationProperty()
              {
                this._LeadingDocument = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IContractualDocumentBase>("LeadingDocument", this);
                this._LeadingDocument.ValueChanged += (sender, e) => { this.LeadingDocumentChangedHandler(); };
                this.AddProperty(this._LeadingDocument as global::Sungero.Domain.Client.IProperty);
              }

































              protected virtual void InitCurrencyNavigationProperty()
              {
                this._Currency = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.ICurrency>("Currency", this);
                this._Currency.ValueChanged += (sender, e) => { this.CurrencyChangedHandler(); };
                this.AddProperty(this._Currency as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCounterpartyNavigationProperty()
              {
                this._Counterparty = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.ICounterparty>("Counterparty", this);
                this._Counterparty.ValueChanged += (sender, e) => { this.CounterpartyChangedHandler(); };
                this.AddProperty(this._Counterparty as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitResponsibleEmployeeNavigationProperty()
              {
                this._ResponsibleEmployee = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("ResponsibleEmployee", this);
                this._ResponsibleEmployee.ValueChanged += (sender, e) => { this.ResponsibleEmployeeChangedHandler(); };
                this.AddProperty(this._ResponsibleEmployee as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitContactNavigationProperty()
              {
                this._Contact = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.IContact>("Contact", this);
                this._Contact.ValueChanged += (sender, e) => { this.ContactChangedHandler(); };
                this.AddProperty(this._Contact as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCounterpartySignatoryNavigationProperty()
              {
                this._CounterpartySignatory = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.IContact>("CounterpartySignatory", this);
                this._CounterpartySignatory.ValueChanged += (sender, e) => { this.CounterpartySignatoryChangedHandler(); };
                this.AddProperty(this._CounterpartySignatory as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBusinessUnitBoxNavigationProperty()
              {
                this._BusinessUnitBox = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>("BusinessUnitBox", this);
                this._BusinessUnitBox.ValueChanged += (sender, e) => { this.BusinessUnitBoxChangedHandler(); };
                this.AddProperty(this._BusinessUnitBox as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCorrectedNavigationProperty()
              {
                this._Corrected = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IAccountingDocumentBase>("Corrected", this);
                this._Corrected.ValueChanged += (sender, e) => { this.CorrectedChangedHandler(); };
                this.AddProperty(this._Corrected as global::Sungero.Domain.Client.IProperty);
              }



            protected override void InitVersionsCollectionProperty()
            {
              this._Versions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IAccountingDocumentBaseVersions>("Versions", this);
              this._Versions.ValueChanged += (sender, e) => { this.VersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Versions);
              this.SetVersionsEventHandlers();
            }

            protected override void InitTrackingCollectionProperty()
            {
              this._Tracking = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IAccountingDocumentBaseTracking>("Tracking", this);
              this._Tracking.ValueChanged += (sender, e) => { this.TrackingChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Tracking);
              this.SetTrackingEventHandlers();
            }


    public AccountingDocumentBase()
    {
            this._Number = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Number", this);
            this._Number.ValueChanged += (sender, e) => { this.NumberChangedHandler(); };
            this.AddProperty(this._Number);

            this._Date = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("Date", this);
            this._Date.ValueChanged += (sender, e) => { this.DateChangedHandler(); };
            this.AddProperty(this._Date);

            this._TotalAmount = new global::Sungero.Domain.Client.SimpleProperty<global::System.Double?>("TotalAmount", this);
            this._TotalAmount.ValueChanged += (sender, e) => { this.TotalAmountChangedHandler(); };
            this.AddProperty(this._TotalAmount);

            this._IsFormalized = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsFormalized", this);
            this._IsFormalized.ValueChanged += (sender, e) => { this.IsFormalizedChangedHandler(); };
            this.AddProperty(this._IsFormalized);

            this._SellerTitleId = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("SellerTitleId", this);
            this._SellerTitleId.ValueChanged += (sender, e) => { this.SellerTitleIdChangedHandler(); };
            this.AddProperty(this._SellerTitleId);

            this._BuyerTitleId = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("BuyerTitleId", this);
            this._BuyerTitleId.ValueChanged += (sender, e) => { this.BuyerTitleIdChangedHandler(); };
            this.AddProperty(this._BuyerTitleId);

            this._SellerSignatureId = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("SellerSignatureId", this);
            this._SellerSignatureId.ValueChanged += (sender, e) => { this.SellerSignatureIdChangedHandler(); };
            this.AddProperty(this._SellerSignatureId);

            this._BuyerSignatureId = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("BuyerSignatureId", this);
            this._BuyerSignatureId.ValueChanged += (sender, e) => { this.BuyerSignatureIdChangedHandler(); };
            this.AddProperty(this._BuyerSignatureId);

            this._IsAdjustment = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsAdjustment", this);
            this._IsAdjustment.ValueChanged += (sender, e) => { this.IsAdjustmentChangedHandler(); };
            this.AddProperty(this._IsAdjustment);

            this._FormalizedServiceType = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("FormalizedServiceType", this);
            this._FormalizedServiceType.ValueChanged += (sender, e) => { this.FormalizedServiceTypeChangedHandler(); };
            this.AddProperty(this._FormalizedServiceType);

            this._FormalizedFunction = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("FormalizedFunction", this);
            this._FormalizedFunction.ValueChanged += (sender, e) => { this.FormalizedFunctionChangedHandler(); };
            this.AddProperty(this._FormalizedFunction);

            this._IsRevision = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsRevision", this);
            this._IsRevision.ValueChanged += (sender, e) => { this.IsRevisionChangedHandler(); };
            this.AddProperty(this._IsRevision);

            this._IsFormalizedSignatoryEmpty = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsFormalizedSignatoryEmpty", this);
            this._IsFormalizedSignatoryEmpty.ValueChanged += (sender, e) => { this.IsFormalizedSignatoryEmptyChangedHandler(); };
            this.AddProperty(this._IsFormalizedSignatoryEmpty);

            this.InitCurrencyNavigationProperty();

            this.InitCounterpartyNavigationProperty();

            this.InitResponsibleEmployeeNavigationProperty();

            this.InitContactNavigationProperty();

            this.InitCounterpartySignatoryNavigationProperty();

            this.InitBusinessUnitBoxNavigationProperty();

            this.InitCorrectedNavigationProperty();








    }

    #endregion

  }
}

// ==================================================================
// AccountingDocumentBasePresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class AccountingDocumentBasePresenter<T> :
    global::Sungero.Docflow.Client.OfficialDocumentPresenter<T>
    where T : class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _ExportFinancialDocumentCommand;

          public global::System.Windows.Input.ICommand ExportFinancialDocumentCommand
          {
            get
            {
              if (this._ExportFinancialDocumentCommand == null)
                  this._ExportFinancialDocumentCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ExportFinancialDocument", this, this.ExportFinancialDocument, this.CanExportFinancialDocument) { IsEmptyParameterAllowed = true };
              return this._ExportFinancialDocumentCommand;
            }
          }
          private global::System.Windows.Input.ICommand _FillBuyerInfoCommand;

          public global::System.Windows.Input.ICommand FillBuyerInfoCommand
          {
            get
            {
              if (this._FillBuyerInfoCommand == null)
                  this._FillBuyerInfoCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("FillBuyerInfo", this, this.FillBuyerInfo, this.CanFillBuyerInfo) { IsEmptyParameterAllowed = true };
              return this._FillBuyerInfoCommand;
            }
          }
          private global::System.Windows.Input.ICommand _PrintEnvelopeCommand;

          public global::System.Windows.Input.ICommand PrintEnvelopeCommand
          {
            get
            {
              if (this._PrintEnvelopeCommand == null)
                  this._PrintEnvelopeCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("PrintEnvelope", this, this.PrintEnvelope, this.CanPrintEnvelope) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCommand;
            }
          }
          private global::System.Windows.Input.ICommand _PrintEnvelopeCardCommand;

          public global::System.Windows.Input.ICommand PrintEnvelopeCardCommand
          {
            get
            {
              if (this._PrintEnvelopeCardCommand == null)
                  this._PrintEnvelopeCardCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("PrintEnvelopeCard", this, this.PrintEnvelopeCard, this.CanPrintEnvelopeCard) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCardCommand;
            }
          }
          private global::System.Windows.Input.ICommand _FillSellerInfoCommand;

          public global::System.Windows.Input.ICommand FillSellerInfoCommand
          {
            get
            {
              if (this._FillSellerInfoCommand == null)
                  this._FillSellerInfoCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("FillSellerInfo", this, this.FillSellerInfo, this.CanFillSellerInfo) { IsEmptyParameterAllowed = true };
              return this._FillSellerInfoCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanExportFinancialDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanExportFinancialDocument);
              }

              private void ExportFinancialDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ExportFinancialDocument);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.ExportFinancialDocument);
              }

              private bool CanFillBuyerInfo(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).CanFillBuyerInfo(args);
              }

              private void FillBuyerInfo(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.FillBuyerInfo);
                ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).FillBuyerInfo(args);
              }

              private bool CanPrintEnvelope(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanPrintEnvelope);
              }

              private void PrintEnvelope(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.PrintEnvelope);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.PrintEnvelope);
              }

              private bool CanPrintEnvelopeCard(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).CanPrintEnvelopeCard(args);
              }

              private void PrintEnvelopeCard(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.PrintEnvelopeCard);
                ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).PrintEnvelopeCard(args);
              }

              private bool CanFillSellerInfo(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).CanFillSellerInfo(args);
              }

              private void FillSellerInfo(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.FillSellerInfo);
                ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).FillSellerInfo(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CurrencyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CurrencyCollectionPresenter
              {
          get { return this._CurrencyCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartyCollectionPresenter
              {
          get { return this._CounterpartyCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ResponsibleEmployeeCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ResponsibleEmployeeCollectionPresenter
              {
          get { return this._ResponsibleEmployeeCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ContactCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ContactCollectionPresenter
              {
          get { return this._ContactCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartySignatoryCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartySignatoryCollectionPresenter
              {
          get { return this._CounterpartySignatoryCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BusinessUnitBoxCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BusinessUnitBoxCollectionPresenter
              {
          get { return this._BusinessUnitBoxCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CorrectedCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CorrectedCollectionPresenter
              {
          get { return this._CorrectedCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._ProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IProjectBase>(() => this.Entity.Id, typeof(T), "Project");

              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");

                  this._LeadingDocumentCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Docflow.IContractualDocumentBase>(global::System.Guid.Parse("aae1f6ae-d090-4c5a-963e-44c8b79dc92b"));
              this._LeadingDocumentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IContractualDocumentBase>(() => this.Entity, typeof(T), "LeadingDocument");

              this._AssociatedApplicationCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(T), "AssociatedApplication");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._DocumentRegisterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentRegister>(() => this.Entity, typeof(T), "DocumentRegister");

              this._DeliveryMethodCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(T), "DeliveryMethod");

              this._CaseFileCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.ICaseFile>(() => this.Entity.Id, typeof(T), "CaseFile");

              this._DeliveredToCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "DeliveredTo");

              this._ResponsibleForReturnEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleForReturnEmployee");

              this._DocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentKind>(() => this.Entity, typeof(T), "DocumentKind");

              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

              this._OurSignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IEmployee>(() => this.Entity, typeof(T), "OurSignatory");

              this._DocumentGroupCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentGroupBase>(() => this.Entity, typeof(T), "DocumentGroup");

              this._AssigneeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Assignee");

              this._DepartmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IDepartment>(() => this.Entity.Id, typeof(T), "Department");

              this._PreparedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "PreparedBy");

                  this._CurrencyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.ICurrency>(global::System.Guid.Parse("901644ff-87b0-485b-9146-13fd6ba7ede1"));
              this._CurrencyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICurrency>(() => this.Entity.Id, typeof(T), "Currency");

                  this._CounterpartyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.ICounterparty>(global::System.Guid.Parse("cc53a990-5123-4f3a-b5ac-f3899be1f40a"));
              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");

                  this._ResponsibleEmployeeCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("569866fc-cb17-4caf-bdee-6ec2ff5d5309"));
              this._ResponsibleEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleEmployee");

                  this._ContactCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.IContact>(global::System.Guid.Parse("16ad65c0-cf92-4162-8e3e-242501eef95e"));
              this._ContactCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Parties.IContact>(() => this.Entity, typeof(T), "Contact");

                  this._CounterpartySignatoryCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.IContact>(global::System.Guid.Parse("394a1dbe-6e80-4739-ad9f-bcf36863714d"));
              this._CounterpartySignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Parties.IContact>(() => this.Entity, typeof(T), "CounterpartySignatory");

                  this._BusinessUnitBoxCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>(global::System.Guid.Parse("6463757a-1d75-4b49-851a-0a5a1cc0d865"));
              this._BusinessUnitBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "BusinessUnitBox");

                  this._CorrectedCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Docflow.IAccountingDocumentBase>(global::System.Guid.Parse("c0aa900b-eb79-4558-8080-2b5ce3d9cf06"));
              this._CorrectedCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IAccountingDocumentBase>(() => this.Entity, typeof(T), "Corrected");


                        this._VersionsAuthorCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseVersions), "Author");

                        this._VersionsModifiedByCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseVersions), "ModifiedBy");

                        this._VersionsAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseVersions), "AssociatedApplication");

                        this._VersionsBodyAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseVersions), "BodyAssociatedApplication");


                        this._TrackingDeliveredToCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseTracking), "DeliveredTo");

                        this._TrackingReturnTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(Sungero.Docflow.IAccountingDocumentBaseTracking), "ReturnTask");



    }

    public AccountingDocumentBasePresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// AccountingDocumentBaseCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class AccountingDocumentBaseCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.OfficialDocumentCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.IAccountingDocumentBase
  {
    #region Actions

          private global::System.Windows.Input.ICommand _ExportFinancialDocumentCommand;  

          public global::System.Windows.Input.ICommand ExportFinancialDocumentCommand 
          { 
            get
            { 
              if (this._ExportFinancialDocumentCommand == null)
                this._ExportFinancialDocumentCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("ExportFinancialDocument", this, this.ExportFinancialDocument, this.CanExportFinancialDocument) { IsEmptyParameterAllowed = true };
              return this._ExportFinancialDocumentCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _FillBuyerInfoCommand;  

          public global::System.Windows.Input.ICommand FillBuyerInfoCommand 
          { 
            get
            { 
              if (this._FillBuyerInfoCommand == null)
                this._FillBuyerInfoCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("FillBuyerInfo", this, this.FillBuyerInfo, this.CanFillBuyerInfo) { IsEmptyParameterAllowed = true };
              return this._FillBuyerInfoCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _PrintEnvelopeCommand;  

          public global::System.Windows.Input.ICommand PrintEnvelopeCommand 
          { 
            get
            { 
              if (this._PrintEnvelopeCommand == null)
                this._PrintEnvelopeCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("PrintEnvelope", this, this.PrintEnvelope, this.CanPrintEnvelope) { IsEmptyParameterAllowed = true };
              return this._PrintEnvelopeCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanExportFinancialDocument(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanExportFinancialDocument);
        }

        private void ExportFinancialDocument(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.ExportFinancialDocument);
        }

        private bool CanFillBuyerInfo(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).CanFillBuyerInfo(args);
        }

        private void FillBuyerInfo(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.FillBuyerInfo);
          ((Sungero.Docflow.Client.AccountingDocumentBaseActions)(entity as Sungero.Docflow.Client.AccountingDocumentBase).ActionsHandlers).FillBuyerInfo(args);
        }

        private bool CanPrintEnvelope(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanPrintEnvelope);
        }

        private void PrintEnvelope(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.Docflow.Client.AccountingDocumentBaseCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.PrintEnvelope);
        }



    #endregion

    public AccountingDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public AccountingDocumentBaseCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public AccountingDocumentBaseCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public AccountingDocumentBaseCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// AccountingDocumentBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class AccountingDocumentBaseRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.OfficialDocumentRepositoryImplementer<T>,
      global::Sungero.Docflow.IAccountingDocumentBaseRepositoryImplementer<T>
      where T : global::Sungero.Docflow.IAccountingDocumentBase
    {
       public new global::Sungero.Docflow.IAccountingDocumentBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IAccountingDocumentBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IAccountingDocumentBaseInfo Info
       {
          get { return (global::Sungero.Docflow.IAccountingDocumentBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.AccountingDocumentBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AccountingDocumentBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class AccountingDocumentBaseAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentAccessRights, Sungero.Docflow.IAccountingDocumentBaseAccessRights
  {

    public AccountingDocumentBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AccountingDocumentBaseTypeAccessRights : 
    Sungero.Docflow.Client.OfficialDocumentTypeAccessRights, Sungero.Docflow.IAccountingDocumentBaseAccessRights
  {

    public AccountingDocumentBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
