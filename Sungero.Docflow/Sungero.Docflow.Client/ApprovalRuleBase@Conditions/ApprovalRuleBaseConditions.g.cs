
// ==================================================================
// ApprovalRuleBaseConditions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ApprovalRuleBaseConditions :
    global::Sungero.Domain.Client.ChildEntityProxy, global::Sungero.Docflow.IApprovalRuleBaseConditions
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("924782de-a0ae-4b4c-aabe-2447acc39598");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.ApprovalRuleBaseConditions.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.IApprovalRuleBaseConditions, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Condition == null ? string.Empty : this.Condition.ToString(); }
        set { throw new global::System.NotSupportedException(global::CommonLibrary.Properties.Resources.SpecifiedPropertyIsNotSupportedFormat("DisplayValue")); }
      }

      public override string DisplayPropertyName
      {
        get { return "Condition"; }
      }


    public new global::Sungero.Docflow.IApprovalRuleBaseConditionsState State
    {
      get
      {
        return (global::Sungero.Docflow.IApprovalRuleBaseConditionsState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ApprovalRuleBaseConditionsState(this);
    }

    public new global::Sungero.Docflow.IApprovalRuleBaseConditionsInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IApprovalRuleBaseConditionsInfo)base.Info;
      }
    }

    protected global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IApprovalRuleBase> _ApprovalRuleBase;

    public global::Sungero.Docflow.IApprovalRuleBase ApprovalRuleBase
    {
      get { return this._ApprovalRuleBase.Value; }
      set { this._ApprovalRuleBase.Value = value; }
    }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.ApprovalRuleBase; }
      set { this.ApprovalRuleBase = (global::Sungero.Docflow.IApprovalRuleBase)value; }
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _Number;

        public virtual global::System.Int32? Number
        {
          get { return this._Number.Value; }
          set { this._Number.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Docflow.IConditionBase> _Condition;

              public virtual global::Sungero.Docflow.IConditionBase Condition
              {
              get
              {
                return this._Condition.Value as global::Sungero.Docflow.IConditionBase;
              }

              set
              {
                (this._Condition as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ApprovalRuleBaseConditionsClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ApprovalRuleBaseConditionsSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NumberChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.Number, this.Number, this);
     ((global::Sungero.Docflow.ApprovalRuleBaseConditionsSharedHandlers)this.SharedHandlers).ConditionsNumberChanged(args);
    }

    protected void ConditionChangedHandler()
    {
      var args = new global::Sungero.Docflow.Shared.ApprovalRuleBaseConditionsConditionChangedEventArgs(this.State.Properties.Condition, this.Condition, this);
     ((global::Sungero.Docflow.ApprovalRuleBaseConditionsSharedHandlers)this.SharedHandlers).ConditionsConditionChanged(args);
    }



  protected global::System.Int32? NumberValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.Number, value, this, this.Info.Properties.Number);
    ((global::Sungero.Docflow.ApprovalRuleBaseConditionsClientHandlers)this.Handlers).ConditionsNumberValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Docflow.IConditionBase ConditionValueInputHandler(global::Sungero.Docflow.IConditionBase value)
  {
    var args = new global::Sungero.Docflow.Client.ApprovalRuleBaseConditionsConditionValueInputEventArgs(this.Condition, value, this, this.Info.Properties.Condition);
    ((global::Sungero.Docflow.ApprovalRuleBaseConditionsClientHandlers)this.Handlers).ConditionsConditionValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitConditionNavigationProperty()
              {
                this._Condition = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IConditionBase>("Condition", this);
                this._Condition.ValueChanged += (sender, e) => { this.ConditionChangedHandler(); };
                this.AddProperty(this._Condition as global::Sungero.Domain.Client.IProperty);
              }




    public ApprovalRuleBaseConditions()
    {
      this._ApprovalRuleBase = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IApprovalRuleBase>("ApprovalRuleBase", this, true);

            this._Number = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("Number", this);
            this._Number.ValueChanged += (sender, e) => { this.NumberChangedHandler(); };
            this.AddProperty(this._Number);

            this.InitConditionNavigationProperty();








    }

    #endregion

  }
}
