
// ==================================================================
// Condition.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class Condition :
    global::Sungero.Docflow.Client.ConditionBase, global::Sungero.Docflow.ICondition
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("3f6f31c3-16e2-457e-9f88-48b254a500d2");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Docflow.Client.Condition.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Docflow.ICondition, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Docflow.IConditionState State
    {
      get
      {
        return (global::Sungero.Docflow.IConditionState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Docflow.Shared.ConditionState(this);
    }

    public new global::Sungero.Docflow.IConditionInfo Info
    {
      get
      {
        return (global::Sungero.Docflow.IConditionInfo)base.Info;
      }
    }

    public new global::Sungero.Docflow.IConditionAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Docflow.IConditionAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Docflow.Client.ConditionAccessRights(this);
    }


        private static global::Sungero.Domain.Shared.EnumerationItems _ConditionTypeItems = new global::Sungero.Domain.Shared.EnumerationItems(
          global::Sungero.Docflow.Client.ConditionBase.ConditionTypeItems,
          typeof(global::Sungero.Docflow.Condition.ConditionType),
          typeof(global::Sungero.Docflow.Client.Condition),
          "ConditionType");

        public static new global::Sungero.Domain.Shared.EnumerationItems ConditionTypeItems
        {
          get { return global::Sungero.Docflow.Client.Condition._ConditionTypeItems; }
        }

        public override global::Sungero.Domain.Shared.EnumerationItems ConditionTypeAllowedItems
        {
          get { return global::Sungero.Docflow.Client.Condition.ConditionTypeItems; }
        }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.Docflow.IConditionAddressees> _Addressees;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IConditionAddressees> Addressees
          {
            get { return this._Addressees.Value; }
          }






    private object _AddresseesActionsHandlers;

    public object AddresseesActionsHandlers
    {
      get
      {
        if (this._AddresseesActionsHandlers == null)
          this._AddresseesActionsHandlers = this.CreateAddresseesActionsHandlers();
        return this._AddresseesActionsHandlers;
      }
    }

    private object _AddresseesCollectionActionsHandlers;

    public object AddresseesCollectionActionsHandlers
    {
      get
      {
        if (this._AddresseesCollectionActionsHandlers == null)
          this._AddresseesCollectionActionsHandlers = this.CreateAddresseesCollectionActionsHandlers();
        return this._AddresseesCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.ConditionActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.ConditionCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.ConditionAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Docflow.Client.ConditionAnyChildEntityCollectionActions();
    }

    protected object CreateAddresseesActionsHandlers()
    {
      return null;
    }

    protected object CreateAddresseesCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Docflow.Client.ConditionFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Docflow.Shared.ConditionFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Docflow.ConditionClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Docflow.ConditionSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void AddresseesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Docflow.ConditionSharedHandlers)this.SharedHandlers).AddresseesChanged(args);
    }







    protected virtual global::Sungero.Docflow.ConditionAddresseesSharedCollectionHandlers CreateAddresseesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.ConditionAddresseesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Docflow.ConditionAddresseesSharedCollectionHandlers CreateAddresseesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Docflow.ConditionAddresseesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void AddresseesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAddresseesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.AddresseesAdded(args);
      }
    }

    protected virtual void AddresseesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAddresseesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.AddresseesDeleted(args);
      }
    }












    #endregion

    #region Constructors






            protected virtual void InitAddresseesCollectionProperty()
            {
              this._Addressees = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IConditionAddressees>("Addressees", this);
              this._Addressees.ValueChanged += (sender, e) => { this.AddresseesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Addressees);
              this.SetAddresseesEventHandlers();
            }

            protected void SetAddresseesEventHandlers()
            {
              this._Addressees.ChildEntityAdded += this.AddresseesAddedHandler;
              this._Addressees.ChildEntityDeleted += this.AddresseesDeletedHandler;
            }

            protected override void InitCurrenciesCollectionProperty()
            {
              this._Currencies = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IConditionCurrencies>("Currencies", this);
              this._Currencies.ValueChanged += (sender, e) => { this.CurrenciesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Currencies);
              this.SetCurrenciesEventHandlers();
            }

            protected override void InitDocumentKindsCollectionProperty()
            {
              this._DocumentKinds = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IConditionDocumentKinds>("DocumentKinds", this);
              this._DocumentKinds.ValueChanged += (sender, e) => { this.DocumentKindsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._DocumentKinds);
              this.SetDocumentKindsEventHandlers();
            }

            protected override void InitConditionDocumentKindsCollectionProperty()
            {
              this._ConditionDocumentKinds = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IConditionConditionDocumentKinds>("ConditionDocumentKinds", this);
              this._ConditionDocumentKinds.ValueChanged += (sender, e) => { this.ConditionDocumentKindsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._ConditionDocumentKinds);
              this.SetConditionDocumentKindsEventHandlers();
            }

            protected override void InitDeliveryMethodsCollectionProperty()
            {
              this._DeliveryMethods = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Docflow.IConditionDeliveryMethods>("DeliveryMethods", this);
              this._DeliveryMethods.ValueChanged += (sender, e) => { this.DeliveryMethodsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._DeliveryMethods);
              this.SetDeliveryMethodsEventHandlers();
            }


    public Condition()
    {


            this.InitAddresseesCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// ConditionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ConditionPresenter<T> :
    global::Sungero.Docflow.Client.ConditionBasePresenter<T>
    where T : class, global::Sungero.Docflow.ICondition
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _AddresseesAddresseeCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter AddresseesAddresseeCollectionPresenter
                          {
                  get { return this._AddresseesAddresseeCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
              this._ApprovalRoleCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IApprovalRoleBase>(() => this.Entity, typeof(T), "ApprovalRole");

              this._ApprovalRoleForComparisonCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IApprovalRoleBase>(() => this.Entity, typeof(T), "ApprovalRoleForComparison");

              this._RecipientForComparisonCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(T), "RecipientForComparison");

              this._AddendaDocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IDocumentKind>(() => this.Entity.Id, typeof(T), "AddendaDocumentKind");


                          this._AddresseesAddresseeCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("fda120bf-0710-4967-a38d-e28036f97287"));
                        this._AddresseesAddresseeCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Docflow.IConditionAddressees), "Addressee");

                        this._CurrenciesCurrencyCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICurrency>(() => this.Entity.Id, typeof(Sungero.Docflow.IConditionCurrencies), "Currency");


                        this._DocumentKindsDocumentKindCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IDocumentKind>(() => this.Entity.Id, typeof(Sungero.Docflow.IConditionDocumentKinds), "DocumentKind");


                        this._ConditionDocumentKindsDocumentKindCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForChildNavigationProperty<global::Sungero.Docflow.IDocumentKind>(
                          () => this.ChildEntityCollectionPresenters.GetPresenter<global::Sungero.Docflow.IConditionConditionDocumentKinds>().FocusedEntity,
                          typeof(Sungero.Docflow.IConditionConditionDocumentKinds),
                          () => this.Entity,
                          "DocumentKind");


                        this._DeliveryMethodsDeliveryMethodCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(Sungero.Docflow.IConditionDeliveryMethods), "DeliveryMethod");



    }

    public ConditionPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ConditionCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ConditionCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.ConditionBaseCollectionPresenter<T>
    where T: class, global::Sungero.Docflow.ICondition
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public ConditionCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ConditionCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ConditionCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ConditionCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ConditionRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{ 
  public class ConditionRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.ConditionBaseRepositoryImplementer<T>,
      global::Sungero.Docflow.IConditionRepositoryImplementer<T>
      where T : global::Sungero.Docflow.ICondition
    {
       public new global::Sungero.Docflow.IConditionAccessRights AccessRights
       {
          get { return (global::Sungero.Docflow.IConditionAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Docflow.IConditionInfo Info
       {
          get { return (global::Sungero.Docflow.IConditionInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Docflow.Client.ConditionTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ConditionAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Docflow.Client
{
  public class ConditionAccessRights : 
    Sungero.Docflow.Client.ConditionBaseAccessRights, Sungero.Docflow.IConditionAccessRights
  {

    public ConditionAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ConditionTypeAccessRights : 
    Sungero.Docflow.Client.ConditionBaseTypeAccessRights, Sungero.Docflow.IConditionAccessRights
  {

    public ConditionTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
