
// ==================================================================
// ExchangeDocumentProcessingAssignment.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class ExchangeDocumentProcessingAssignment :
    global::Sungero.Workflow.Client.Assignment, global::Sungero.Exchange.IExchangeDocumentProcessingAssignment
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("0917ca0b-898f-429d-be37-c12da50c5a95");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Exchange.IExchangeDocumentProcessingAssignment, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Subject; }
        set { this.Subject = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Subject"; }
      }


    public new global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentState State
    {
      get
      {
        return (global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentState(this);
    }

    public new global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentInfo Info
    {
      get
      {
        return (global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentInfo)base.Info;
      }
    }

    public new global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _NewDeadline;

        public virtual global::System.DateTime? NewDeadline
        {
          get { return this._NewDeadline.Value; }
          set { this._NewDeadline.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _ResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
          global::Sungero.Workflow.Client.Assignment.ResultItems,
          typeof(global::Sungero.Exchange.ExchangeDocumentProcessingAssignment.Result),
          typeof(global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment),
          "Result");

        public static new global::Sungero.Domain.Shared.EnumerationItems ResultItems
        {
          get { return global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment._ResultItems; }
        }

        public override global::Sungero.Domain.Shared.EnumerationItems ResultAllowedItems
        {
          get { return global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment.ResultItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.ICounterparty> _Counterparty;

              public virtual global::Sungero.Parties.ICounterparty Counterparty
              {
              get
              {
                return this._Counterparty.Value as global::Sungero.Parties.ICounterparty;
              }

              set
              {
                (this._Counterparty as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IBoxBase> _Box;

              public virtual global::Sungero.ExchangeCore.IBoxBase Box
              {
              get
              {
                return this._Box.Value as global::Sungero.ExchangeCore.IBoxBase;
              }

              set
              {
                (this._Box as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IExchangeService> _ExchangeService;

              public virtual global::Sungero.ExchangeCore.IExchangeService ExchangeService
              {
              get
              {
                return this._ExchangeService.Value as global::Sungero.ExchangeCore.IExchangeService;
              }

              set
              {
                (this._ExchangeService as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _Addressee;

              public virtual global::Sungero.Company.IEmployee Addressee
              {
              get
              {
                return this._Addressee.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._Addressee as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox> _BusinessUnitBox;

              public virtual global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox
              {
              get
              {
                return this._BusinessUnitBox.Value as global::Sungero.ExchangeCore.IBusinessUnitBox;
              }

              set
              {
                (this._BusinessUnitBox as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void BoxChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentBoxChangedEventArgs(this.State.Properties.Box, this.Box, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).BoxChanged(args);
    }

    protected void ExchangeServiceChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentExchangeServiceChangedEventArgs(this.State.Properties.ExchangeService, this.ExchangeService, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).ExchangeServiceChanged(args);
    }

    protected void AddresseeChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentAddresseeChangedEventArgs(this.State.Properties.Addressee, this.Addressee, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).AddresseeChanged(args);
    }

    protected void NewDeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.NewDeadline, this.NewDeadline, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).NewDeadlineChanged(args);
    }

    protected void BusinessUnitBoxChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentBusinessUnitBoxChangedEventArgs(this.State.Properties.BusinessUnitBox, this.BusinessUnitBox, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).BusinessUnitBoxChanged(args);
    }



  protected global::Sungero.Parties.ICounterparty CounterpartyValueInputHandler(global::Sungero.Parties.ICounterparty value)
  {
    var args = new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentCounterpartyValueInputEventArgs(this.Counterparty, value, this, this.Info.Properties.Counterparty);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).CounterpartyValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IBoxBase BoxValueInputHandler(global::Sungero.ExchangeCore.IBoxBase value)
  {
    var args = new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentBoxValueInputEventArgs(this.Box, value, this, this.Info.Properties.Box);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).BoxValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IExchangeService ExchangeServiceValueInputHandler(global::Sungero.ExchangeCore.IExchangeService value)
  {
    var args = new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentExchangeServiceValueInputEventArgs(this.ExchangeService, value, this, this.Info.Properties.ExchangeService);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).ExchangeServiceValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee AddresseeValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentAddresseeValueInputEventArgs(this.Addressee, value, this, this.Info.Properties.Addressee);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).AddresseeValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? NewDeadlineValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.NewDeadline, value, this, this.Info.Properties.NewDeadline);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).NewDeadlineValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBoxValueInputHandler(global::Sungero.ExchangeCore.IBusinessUnitBox value)
  {
    var args = new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentBusinessUnitBoxValueInputEventArgs(this.BusinessUnitBox, value, this, this.Info.Properties.BusinessUnitBox);
    ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentClientHandlers)this.Handlers).BusinessUnitBoxValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors








              protected virtual void InitCounterpartyNavigationProperty()
              {
                this._Counterparty = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.ICounterparty>("Counterparty", this);
                this._Counterparty.ValueChanged += (sender, e) => { this.CounterpartyChangedHandler(); };
                this.AddProperty(this._Counterparty as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBoxNavigationProperty()
              {
                this._Box = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IBoxBase>("Box", this);
                this._Box.ValueChanged += (sender, e) => { this.BoxChangedHandler(); };
                this.AddProperty(this._Box as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitExchangeServiceNavigationProperty()
              {
                this._ExchangeService = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IExchangeService>("ExchangeService", this);
                this._ExchangeService.ValueChanged += (sender, e) => { this.ExchangeServiceChangedHandler(); };
                this.AddProperty(this._ExchangeService as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitAddresseeNavigationProperty()
              {
                this._Addressee = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("Addressee", this);
                this._Addressee.ValueChanged += (sender, e) => { this.AddresseeChangedHandler(); };
                this.AddProperty(this._Addressee as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBusinessUnitBoxNavigationProperty()
              {
                this._BusinessUnitBox = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>("BusinessUnitBox", this);
                this._BusinessUnitBox.ValueChanged += (sender, e) => { this.BusinessUnitBoxChangedHandler(); };
                this.AddProperty(this._BusinessUnitBox as global::Sungero.Domain.Client.IProperty);
              }




    public ExchangeDocumentProcessingAssignment()
    {
            this._NewDeadline = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("NewDeadline", this);
            this._NewDeadline.ValueChanged += (sender, e) => { this.NewDeadlineChangedHandler(); };
            this.AddProperty(this._NewDeadline);

            this.InitCounterpartyNavigationProperty();

            this.InitBoxNavigationProperty();

            this.InitExchangeServiceNavigationProperty();

            this.InitAddresseeNavigationProperty();

            this.InitBusinessUnitBoxNavigationProperty();








      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #endregion

    #region Workflow attachments
    public virtual global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentNeedSigningAttachments NeedSigning
    {
      get
      {
        return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentNeedSigningAttachments(this);
      }
    }
    public virtual global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentDontNeedSigningAttachments DontNeedSigning
    {
      get
      {
        return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingAssignmentDontNeedSigningAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).NeedSigningCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).DontNeedSigningCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).NeedSigningAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).DontNeedSigningAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).NeedSigningDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingAssignmentSharedHandlers)this.SharedHandlers).DontNeedSigningDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// ExchangeDocumentProcessingAssignmentPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class ExchangeDocumentProcessingAssignmentPresenter<T> :
    global::Sungero.Workflow.Client.AssignmentPresenter<T>
    where T : class, global::Sungero.Exchange.IExchangeDocumentProcessingAssignment
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _CompleteCommand;

          public global::System.Windows.Input.ICommand CompleteCommand
          {
            get
            {
              if (this._CompleteCommand == null)
                  this._CompleteCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("Complete", this, this.Complete, this.CanComplete) { IsEmptyParameterAllowed = true };
              return this._CompleteCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ReAddressCommand;

          public global::System.Windows.Input.ICommand ReAddressCommand
          {
            get
            {
              if (this._ReAddressCommand == null)
                  this._ReAddressCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("ReAddress", this, this.ReAddress, this.CanReAddress) { IsEmptyParameterAllowed = true };
              return this._ReAddressCommand;
            }
          }
          private global::System.Windows.Input.ICommand _AbortCommand;

          public global::System.Windows.Input.ICommand AbortCommand
          {
            get
            {
              if (this._AbortCommand == null)
                  this._AbortCommand = new global::Sungero.Workflow.Client.SingleAssignmentCommand<T>("Abort", this, this.Abort, this.CanAbort) { IsEmptyParameterAllowed = true };
              return this._AbortCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SendForApprovalCommand;

          public global::System.Windows.Input.ICommand SendForApprovalCommand
          {
            get
            {
              if (this._SendForApprovalCommand == null)
                  this._SendForApprovalCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SendForApproval", this, this.SendForApproval, this.CanSendForApproval) { IsEmptyParameterAllowed = true };
              return this._SendForApprovalCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SendForFreeApprovalCommand;

          public global::System.Windows.Input.ICommand SendForFreeApprovalCommand
          {
            get
            {
              if (this._SendForFreeApprovalCommand == null)
                  this._SendForFreeApprovalCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SendForFreeApproval", this, this.SendForFreeApproval, this.CanSendForFreeApproval) { IsEmptyParameterAllowed = true };
              return this._SendForFreeApprovalCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SendForReviewCommand;

          public global::System.Windows.Input.ICommand SendForReviewCommand
          {
            get
            {
              if (this._SendForReviewCommand == null)
                  this._SendForReviewCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SendForReview", this, this.SendForReview, this.CanSendForReview) { IsEmptyParameterAllowed = true };
              return this._SendForReviewCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SendForExecutionCommand;

          public global::System.Windows.Input.ICommand SendForExecutionCommand
          {
            get
            {
              if (this._SendForExecutionCommand == null)
                  this._SendForExecutionCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SendForExecution", this, this.SendForExecution, this.CanSendForExecution) { IsEmptyParameterAllowed = true };
              return this._SendForExecutionCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanComplete(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanComplete(args);
              }

              private void Complete(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.Complete);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).Complete(args);
              }

              private bool CanReAddress(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanReAddress(args);
              }

              private void ReAddress(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.ReAddress);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).ReAddress(args);
              }

              private bool CanAbort(T entity)
              {
                var args = new global::Sungero.Workflow.Client.CanExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanAbort(args);
              }

              private void Abort(T entity)
              {
                var args = new global::Sungero.Workflow.Client.ExecuteResultActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, entity.Info.Actions.Abort);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).Abort(args);
              }

              private bool CanSendForApproval(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanSendForApproval(args);
              }

              private void SendForApproval(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SendForApproval);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).SendForApproval(args);
              }

              private bool CanSendForFreeApproval(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanSendForFreeApproval(args);
              }

              private void SendForFreeApproval(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SendForFreeApproval);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).SendForFreeApproval(args);
              }

              private bool CanSendForReview(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanSendForReview(args);
              }

              private void SendForReview(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SendForReview);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).SendForReview(args);
              }

              private bool CanSendForExecution(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).CanSendForExecution(args);
              }

              private void SendForExecution(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SendForExecution);
                ((Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentActions)(entity as Sungero.Exchange.Client.ExchangeDocumentProcessingAssignment).ActionsHandlers).SendForExecution(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartyCollectionPresenter
              {
          get { return this._CounterpartyCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BoxCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BoxCollectionPresenter
              {
          get { return this._BoxCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ExchangeServiceCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ExchangeServiceCollectionPresenter
              {
          get { return this._ExchangeServiceCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _AddresseeCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter AddresseeCollectionPresenter
              {
          get { return this._AddresseeCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BusinessUnitBoxCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BusinessUnitBoxCollectionPresenter
              {
          get { return this._BusinessUnitBoxCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._PerformerCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Performer");

              this._TaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "Task");

              this._MainTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "MainTask");

              this._CompletedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "CompletedBy");

                  this._CounterpartyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.ICounterparty>(global::System.Guid.Parse("238a29b1-d147-4401-af5c-b4070ffaf49f"));
              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");

                  this._BoxCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IBoxBase>(global::System.Guid.Parse("ea6148b2-999a-473f-8002-6018b185e04a"));
              this._BoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBoxBase>(() => this.Entity.Id, typeof(T), "Box");

                  this._ExchangeServiceCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IExchangeService>(global::System.Guid.Parse("7990adc9-fefa-4a16-9136-995495fdafe7"));
              this._ExchangeServiceCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IExchangeService>(() => this.Entity.Id, typeof(T), "ExchangeService");

                  this._AddresseeCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("0dbae705-1434-47a5-a526-f18bd8ddc956"));
              this._AddresseeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Addressee");

                  this._BusinessUnitBoxCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>(global::System.Guid.Parse("79300ff7-c7de-4092-b1eb-e233e07e1424"));
              this._BusinessUnitBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "BusinessUnitBox");


    }

    public ExchangeDocumentProcessingAssignmentPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ExchangeDocumentProcessingAssignmentCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class ExchangeDocumentProcessingAssignmentCollectionPresenter<T> : 
    global::Sungero.Workflow.Client.AssignmentCollectionPresenter<T>
    where T: class, global::Sungero.Exchange.IExchangeDocumentProcessingAssignment
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public ExchangeDocumentProcessingAssignmentCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ExchangeDocumentProcessingAssignmentCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ExchangeDocumentProcessingAssignmentCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ExchangeDocumentProcessingAssignmentCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ExchangeDocumentProcessingAssignmentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{ 
  public class ExchangeDocumentProcessingAssignmentRepositoryImplementer<T> : 
      global::Sungero.Workflow.Client.AssignmentRepositoryImplementer<T>,
      global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentRepositoryImplementer<T>
      where T : global::Sungero.Exchange.IExchangeDocumentProcessingAssignment
    {
       public new global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights AccessRights
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentInfo Info
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentProcessingAssignmentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Exchange.Client.ExchangeDocumentProcessingAssignmentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ExchangeDocumentProcessingAssignmentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Client
{
  public class ExchangeDocumentProcessingAssignmentAccessRights : 
    Sungero.Workflow.Client.AssignmentAccessRights, Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights
  {

    public ExchangeDocumentProcessingAssignmentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ExchangeDocumentProcessingAssignmentTypeAccessRights : 
    Sungero.Workflow.Client.AssignmentTypeAccessRights, Sungero.Exchange.IExchangeDocumentProcessingAssignmentAccessRights
  {

    public ExchangeDocumentProcessingAssignmentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
