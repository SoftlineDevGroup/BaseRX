
// ==================================================================
// ExchangeDocumentInfo.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
    public class ExchangeDocumentInfoFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Exchange.IExchangeDocumentInfo
    {
      protected new global::Sungero.Exchange.IExchangeDocumentInfoFilterState Filter { get; private set; }

      private global::Sungero.Exchange.IExchangeDocumentInfoFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ExchangeDocumentInfoFilter(global::Sungero.Exchange.IExchangeDocumentInfoFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected ExchangeDocumentInfoFilter()
      {
      }
    }
      public class ExchangeDocumentInfoUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Exchange.IExchangeDocumentInfo
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class ExchangeDocumentInfoSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }
                  public virtual global::System.String ServiceDocumentId { get; protected set; }
                  public virtual global::System.Int32? VersionId { get; protected set; }
                  public virtual global::System.String ServiceMessageId { get; protected set; }
                  public virtual global::System.Boolean? NeedSign { get; protected set; }
                  public virtual global::System.String ServiceCounterpartyId { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IOfficialDocument> Document { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBoxBase> Box { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> MessageType { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MessageDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> RevocationStatus { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> OutgoingStatus { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> InvoiceState { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBusinessUnitBox> RootBox { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> DeliveryConfirmationStatus { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ExchangeDocumentInfoServiceDocumentsModel ServiceDocuments { get; protected set; }

        }


      public class ExchangeDocumentInfoServiceDocumentsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class ExchangeDocumentInfoFilterForDocument<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IOfficialDocument
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoDocumentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).DocumentFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoFilterForDocument(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoSearchFilterForDocument<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IOfficialDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoDocumentSearchPropertyFilteringServerHandler<TQueryEntity>().DocumentSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoSearchFilterForDocument(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoFilterForBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoSearchFilterForBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoBoxSearchPropertyFilteringServerHandler<TQueryEntity>().BoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoSearchFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoFilterForRevocationTask<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Workflow.ITask
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoRevocationTaskPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RevocationTaskFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoFilterForRevocationTask(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoSearchFilterForRevocationTask<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Workflow.ITask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoRevocationTaskSearchPropertyFilteringServerHandler<TQueryEntity>().RevocationTaskSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoSearchFilterForRevocationTask(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoFilterForRootBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoRootBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RootBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentInfoSearchFilterForRootBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentInfoRootBoxSearchPropertyFilteringServerHandler<TQueryEntity>().RootBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentInfoSearchFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilter<global::Sungero.Exchange.IExchangeDocumentInfo>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoUiFilter<global::Sungero.Exchange.IExchangeDocumentInfo>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilterForDocument<global::Sungero.Docflow.IOfficialDocument, global::Sungero.Exchange.IExchangeDocumentInfo>), "Document")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchFilterForDocument<global::Sungero.Docflow.IOfficialDocument>), "Document")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilterForBox<global::Sungero.ExchangeCore.IBoxBase, global::Sungero.Exchange.IExchangeDocumentInfo>), "Box")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchFilterForBox<global::Sungero.ExchangeCore.IBoxBase>), "Box")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.Exchange.IExchangeDocumentInfo>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilterForRevocationTask<global::Sungero.Workflow.ITask, global::Sungero.Exchange.IExchangeDocumentInfo>), "RevocationTask")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchFilterForRevocationTask<global::Sungero.Workflow.ITask>), "RevocationTask")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox, global::Sungero.Exchange.IExchangeDocumentInfo>), "RootBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox>), "RootBox")]


  public class ExchangeDocumentInfo :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("ee04eb99-cc71-4a97-b532-fd05b31cf7b2");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Exchange.IExchangeDocumentInfo, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentInfoState State
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfoState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentInfoState(this);
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentInfoInfo Info
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfoInfo)base.Info; }
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentInfoAccessRights AccessRights
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfoAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Exchange.Server.ExchangeDocumentInfoAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentInfoFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentInfoServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.String _ServiceDocumentId;
    public virtual global::System.String ServiceDocumentId
    {
      get
      {
        return this._ServiceDocumentId;
      }

      set
      {
        this.SetPropertyValue("ServiceDocumentId", this._ServiceDocumentId, value, (propertyValue) => { this._ServiceDocumentId = propertyValue; }, this.ServiceDocumentIdChangedHandler);
      }
    }
    private global::System.Int32? _VersionId;
    public virtual global::System.Int32? VersionId
    {
      get
      {
        return this._VersionId;
      }

      set
      {
        this.SetPropertyValue("VersionId", this._VersionId, value, (propertyValue) => { this._VersionId = propertyValue; }, this.VersionIdChangedHandler);
      }
    }
    private global::System.String _ServiceMessageId;
    public virtual global::System.String ServiceMessageId
    {
      get
      {
        return this._ServiceMessageId;
      }

      set
      {
        this.SetPropertyValue("ServiceMessageId", this._ServiceMessageId, value, (propertyValue) => { this._ServiceMessageId = propertyValue; }, this.ServiceMessageIdChangedHandler);
      }
    }
    private global::System.Boolean? _NeedSign;
    public virtual global::System.Boolean? NeedSign
    {
      get
      {
        return this._NeedSign;
      }

      set
      {
        this.SetPropertyValue("NeedSign", this._NeedSign, value, (propertyValue) => { this._NeedSign = propertyValue; }, this.NeedSignChangedHandler);
      }
    }
    private global::System.DateTime? _MessageDate;
    public virtual global::System.DateTime? MessageDate
    {
      get
      {
        return this._MessageDate;
      }

      set
      {
        this.SetPropertyValue("MessageDate", this._MessageDate, value, (propertyValue) => { this._MessageDate = propertyValue; }, this.MessageDateChangedHandler);
      }
    }
    private global::System.String _ServiceCounterpartyId;
    public virtual global::System.String ServiceCounterpartyId
    {
      get
      {
        return this._ServiceCounterpartyId;
      }

      set
      {
        this.SetPropertyValue("ServiceCounterpartyId", this._ServiceCounterpartyId, value, (propertyValue) => { this._ServiceCounterpartyId = propertyValue; }, this.ServiceCounterpartyIdChangedHandler);
      }
    }
    private global::System.Int32? _ReceiverSignId;
    public virtual global::System.Int32? ReceiverSignId
    {
      get
      {
        return this._ReceiverSignId;
      }

      set
      {
        this.SetPropertyValue("ReceiverSignId", this._ReceiverSignId, value, (propertyValue) => { this._ReceiverSignId = propertyValue; }, this.ReceiverSignIdChangedHandler);
      }
    }
    private global::System.Int32? _SenderSignId;
    public virtual global::System.Int32? SenderSignId
    {
      get
      {
        return this._SenderSignId;
      }

      set
      {
        this.SetPropertyValue("SenderSignId", this._SenderSignId, value, (propertyValue) => { this._SenderSignId = propertyValue; }, this.SenderSignIdChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _MessageTypeItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.MessageType),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "MessageType");

    public static global::Sungero.Domain.Shared.EnumerationItems MessageTypeItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._MessageTypeItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems MessageTypeAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.MessageTypeItems; }
    }

    private global::Sungero.Core.Enumeration? _MessageType;

    public virtual global::Sungero.Core.Enumeration? MessageType
    {
      get { return this._MessageType; }
      set { this.SetEnumPropertyValue("MessageType", this._MessageType, value, (propertyValue) => { this._MessageType = propertyValue; }, this.MessageTypeChangedHandler, this.MessageTypeAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _RevocationStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.RevocationStatus),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "RevocationStatus");

    public static global::Sungero.Domain.Shared.EnumerationItems RevocationStatusItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._RevocationStatusItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems RevocationStatusAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.RevocationStatusItems; }
    }

    private global::Sungero.Core.Enumeration? _RevocationStatus;

    public virtual global::Sungero.Core.Enumeration? RevocationStatus
    {
      get { return this._RevocationStatus; }
      set { this.SetEnumPropertyValue("RevocationStatus", this._RevocationStatus, value, (propertyValue) => { this._RevocationStatus = propertyValue; }, this.RevocationStatusChangedHandler, this.RevocationStatusAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _OutgoingStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.OutgoingStatus),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "OutgoingStatus");

    public static global::Sungero.Domain.Shared.EnumerationItems OutgoingStatusItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._OutgoingStatusItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems OutgoingStatusAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.OutgoingStatusItems; }
    }

    private global::Sungero.Core.Enumeration? _OutgoingStatus;

    public virtual global::Sungero.Core.Enumeration? OutgoingStatus
    {
      get { return this._OutgoingStatus; }
      set { this.SetEnumPropertyValue("OutgoingStatus", this._OutgoingStatus, value, (propertyValue) => { this._OutgoingStatus = propertyValue; }, this.OutgoingStatusChangedHandler, this.OutgoingStatusAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _ExchangeStateItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.ExchangeState),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "ExchangeState");

    public static global::Sungero.Domain.Shared.EnumerationItems ExchangeStateItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._ExchangeStateItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems ExchangeStateAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.ExchangeStateItems; }
    }

    private global::Sungero.Core.Enumeration? _ExchangeState;

    public virtual global::Sungero.Core.Enumeration? ExchangeState
    {
      get { return this._ExchangeState; }
      set { this.SetEnumPropertyValue("ExchangeState", this._ExchangeState, value, (propertyValue) => { this._ExchangeState = propertyValue; }, this.ExchangeStateChangedHandler, this.ExchangeStateAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _InvoiceStateItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.InvoiceState),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "InvoiceState");

    public static global::Sungero.Domain.Shared.EnumerationItems InvoiceStateItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._InvoiceStateItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems InvoiceStateAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.InvoiceStateItems; }
    }

    private global::Sungero.Core.Enumeration? _InvoiceState;

    public virtual global::Sungero.Core.Enumeration? InvoiceState
    {
      get { return this._InvoiceState; }
      set { this.SetEnumPropertyValue("InvoiceState", this._InvoiceState, value, (propertyValue) => { this._InvoiceState = propertyValue; }, this.InvoiceStateChangedHandler, this.InvoiceStateAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _DeliveryConfirmationStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Exchange.ExchangeDocumentInfo.DeliveryConfirmationStatus),
      typeof(global::Sungero.Exchange.Server.ExchangeDocumentInfo),
      "DeliveryConfirmationStatus");

    public static global::Sungero.Domain.Shared.EnumerationItems DeliveryConfirmationStatusItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo._DeliveryConfirmationStatusItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems DeliveryConfirmationStatusAllowedItems
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentInfo.DeliveryConfirmationStatusItems; }
    }

    private global::Sungero.Core.Enumeration? _DeliveryConfirmationStatus;

    public virtual global::Sungero.Core.Enumeration? DeliveryConfirmationStatus
    {
      get { return this._DeliveryConfirmationStatus; }
      set { this.SetEnumPropertyValue("DeliveryConfirmationStatus", this._DeliveryConfirmationStatus, value, (propertyValue) => { this._DeliveryConfirmationStatus = propertyValue; }, this.DeliveryConfirmationStatusChangedHandler, this.DeliveryConfirmationStatusAllowedItems); }
    }


    private global::Sungero.Docflow.IOfficialDocument _Document;
    public virtual global::Sungero.Docflow.IOfficialDocument Document
    {
      get
      {
        return this._Document;
      }

      set
      {
        this.SetPropertyValue("Document", this._Document, value, (propertyValue) => { this._Document = propertyValue; }, this.DocumentChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBoxBase _Box;
    public virtual global::Sungero.ExchangeCore.IBoxBase Box
    {
      get
      {
        return this._Box;
      }

      set
      {
        this.SetPropertyValue("Box", this._Box, value, (propertyValue) => { this._Box = propertyValue; }, this.BoxChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }
    private global::Sungero.Workflow.ITask _RevocationTask;
    public virtual global::Sungero.Workflow.ITask RevocationTask
    {
      get
      {
        return this._RevocationTask;
      }

      set
      {
        this.SetPropertyValue("RevocationTask", this._RevocationTask, value, (propertyValue) => { this._RevocationTask = propertyValue; }, this.RevocationTaskChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBusinessUnitBox _RootBox;
    public virtual global::Sungero.ExchangeCore.IBusinessUnitBox RootBox
    {
      get
      {
        return this._RootBox;
      }

      set
      {
        this.SetPropertyValue("RootBox", this._RootBox, value, (propertyValue) => { this._RootBox = propertyValue; }, this.RootBoxChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Exchange.IExchangeDocumentInfoServiceDocuments> _ServiceDocuments;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Exchange.IExchangeDocumentInfoServiceDocuments> ServiceDocuments
    {
      get
      {
        if (this._ServiceDocuments == null)
        {
          this._ServiceDocuments = this.CreateServiceDocumentsCollection();
          this.SetServiceDocumentsEventHandlers();
        }
        return this._ServiceDocuments;
      }

      set
      {
        if (this._ServiceDocuments != null)
          this.UnsetChildCollectionEventHandlers(this._ServiceDocuments);

        this._ServiceDocuments = value;
        this.SetServiceDocumentsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Exchange.IExchangeDocumentInfoServiceDocuments> CreateServiceDocumentsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Exchange.IExchangeDocumentInfoServiceDocuments>() { RootEntity = this };
    }

    private void SetServiceDocumentsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ServiceDocuments, "ServiceDocuments");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ServiceDocuments;
      changeNotifier.Added += this.ServiceDocumentsAddedHandler;
      changeNotifier.Deleted += this.ServiceDocumentsDeletedHandler;
      changeNotifier.Added += this.ServiceDocumentsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ServiceDocumentsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ServiceDocumentsCollectionUpdateEventHandler;
    }

    private void ServiceDocumentsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ServiceDocumentsChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Exchange.ExchangeDocumentInfoCreatingFromServerHandler((global::Sungero.Exchange.IExchangeDocumentInfo)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DocumentChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentInfoDocumentChangedEventArgs(this.State.Properties.Document, this.Document, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).DocumentChanged(args);
    }

    protected void BoxChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentInfoBoxChangedEventArgs(this.State.Properties.Box, this.Box, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).BoxChanged(args);
    }

    protected void ServiceDocumentIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceDocumentId, this.ServiceDocumentId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ServiceDocumentIdChanged(args);
    }

    protected void VersionIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.VersionId, this.VersionId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).VersionIdChanged(args);
    }

    protected void ServiceMessageIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceMessageId, this.ServiceMessageId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ServiceMessageIdChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentInfoCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void NeedSignChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.NeedSign, this.NeedSign, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).NeedSignChanged(args);
    }

    protected void MessageTypeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.MessageType, this.MessageType, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).MessageTypeChanged(args);
    }

    protected void MessageDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.MessageDate, this.MessageDate, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).MessageDateChanged(args);
    }

    protected void RevocationStatusChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.RevocationStatus, this.RevocationStatus, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).RevocationStatusChanged(args);
    }

    protected void OutgoingStatusChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.OutgoingStatus, this.OutgoingStatus, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).OutgoingStatusChanged(args);
    }

    protected void ExchangeStateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ExchangeState, this.ExchangeState, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ExchangeStateChanged(args);
    }

    protected void RevocationTaskChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentInfoRevocationTaskChangedEventArgs(this.State.Properties.RevocationTask, this.RevocationTask, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).RevocationTaskChanged(args);
    }

    protected void InvoiceStateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.InvoiceState, this.InvoiceState, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).InvoiceStateChanged(args);
    }

    protected void RootBoxChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentInfoRootBoxChangedEventArgs(this.State.Properties.RootBox, this.RootBox, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).RootBoxChanged(args);
    }

    protected void DeliveryConfirmationStatusChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.DeliveryConfirmationStatus, this.DeliveryConfirmationStatus, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).DeliveryConfirmationStatusChanged(args);
    }

    protected void ServiceCounterpartyIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceCounterpartyId, this.ServiceCounterpartyId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ServiceCounterpartyIdChanged(args);
    }

    protected void ServiceDocumentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ServiceDocumentsChanged(args);
    }

    protected void ReceiverSignIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.ReceiverSignId, this.ReceiverSignId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).ReceiverSignIdChanged(args);
    }

    protected void SenderSignIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SenderSignId, this.SenderSignId, this);
     ((global::Sungero.Exchange.ExchangeDocumentInfoSharedHandlers)this.SharedHandlers).SenderSignIdChanged(args);
    }



    protected virtual global::Sungero.Exchange.ExchangeDocumentInfoServiceDocumentsSharedCollectionHandlers CreateServiceDocumentsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Exchange.ExchangeDocumentInfoServiceDocumentsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Exchange.ExchangeDocumentInfoServiceDocumentsSharedCollectionHandlers CreateServiceDocumentsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Exchange.ExchangeDocumentInfoServiceDocumentsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ServiceDocumentsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateServiceDocumentsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ServiceDocumentsAdded(args);
      }
    }

    protected virtual void ServiceDocumentsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateServiceDocumentsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ServiceDocumentsDeleted(args);
      }
    }


    #endregion


    public ExchangeDocumentInfo()
    {
    }

  }
}

// ==================================================================
// ExchangeDocumentInfoHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange
{
  public partial class ExchangeDocumentInfoDocumentPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IOfficialDocument
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> DocumentFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoDocumentPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoDocumentSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IOfficialDocument
  {

    public virtual global::System.Linq.IQueryable<T> DocumentSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoDocumentSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentInfoBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoBoxPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {

    public virtual global::System.Linq.IQueryable<T> BoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentInfoCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoCounterpartyPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentInfoRevocationTaskPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Workflow.ITask
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RevocationTaskFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoRevocationTaskPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoRevocationTaskSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Workflow.ITask
  {

    public virtual global::System.Linq.IQueryable<T> RevocationTaskSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoRevocationTaskSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentInfoRootBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RootBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoRootBoxPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoRootBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {

    public virtual global::System.Linq.IQueryable<T> RootBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentInfoRootBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ExchangeDocumentInfoFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Exchange.IExchangeDocumentInfoFilterState Filter { get; private set; }

    private global::Sungero.Exchange.IExchangeDocumentInfoFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public ExchangeDocumentInfoFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentInfoFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected ExchangeDocumentInfoFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class ExchangeDocumentInfoUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Exchange.IExchangeDocumentInfo
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class ExchangeDocumentInfoSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchDialogModel)this.Dialog;
       }
     }

     public ExchangeDocumentInfoSearchDialogServerHandler(global::Sungero.Exchange.Server.ExchangeDocumentInfoSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ExchangeDocumentInfoServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public ExchangeDocumentInfoServerHandlers(global::Sungero.Exchange.IExchangeDocumentInfo entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentInfoCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _source
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Source; }
    }

    private global::Sungero.Exchange.IExchangeDocumentInfoInfo _info
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfoInfo)this._Info; }
    }

    public ExchangeDocumentInfoCreatingFromServerHandler(global::Sungero.Exchange.IExchangeDocumentInfo source, global::Sungero.Exchange.IExchangeDocumentInfoInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ExchangeDocumentInfoEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
}

// ==================================================================
// ExchangeDocumentInfoAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public class ExchangeDocumentInfoAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Exchange.IExchangeDocumentInfoAccessRights
  {

    public ExchangeDocumentInfoAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ExchangeDocumentInfoTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Exchange.IExchangeDocumentInfoAccessRights
  {

    public ExchangeDocumentInfoTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ExchangeDocumentInfoRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
    public class ExchangeDocumentInfoRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Exchange.IExchangeDocumentInfoRepositoryImplementer<T>
      where T : global::Sungero.Exchange.IExchangeDocumentInfo 
    {
       public new global::Sungero.Exchange.IExchangeDocumentInfoAccessRights AccessRights
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentInfoAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Exchange.IExchangeDocumentInfoInfo Info
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentInfoInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Exchange.Server.ExchangeDocumentInfoTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ExchangeDocumentInfoPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
}

// ==================================================================
// ExchangeDocumentInfoServerFunctions.g.cs
// ==================================================================

namespace Sungero.Exchange.Server
{
  public partial class ExchangeDocumentInfoFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Exchange.IExchangeDocumentInfo _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentInfo)this.Entity; }
    }

    public ExchangeDocumentInfoFunctions(global::Sungero.Exchange.IExchangeDocumentInfo entity) : base(entity) { }
  }
}

// ==================================================================
// ExchangeDocumentInfoFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Functions
{
  internal static class ExchangeDocumentInfo
  {
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    internal static  global::System.Linq.IQueryable<global::Sungero.Exchange.IExchangeDocumentInfo> GetAllExDocumentInfos(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetAllExDocumentInfos(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Exchange.IExchangeDocumentInfo GetExDocumentInfoFromVersion(global::Sungero.Docflow.IOfficialDocument document, global::System.Int32 versionId)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetExDocumentInfoFromVersion(document, versionId);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean LastVersionSended(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.LastVersionSended(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean LastVersionSended(global::Sungero.Docflow.IOfficialDocument document, global::Sungero.ExchangeCore.IBusinessUnitBox box, global::Sungero.Parties.ICounterparty counterparty)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.LastVersionSended(document, box, counterparty);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Exchange.IExchangeDocumentInfo GetIncomingExDocumentInfo(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetIncomingExDocumentInfo(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    internal static  global::Sungero.Exchange.IExchangeDocumentInfo GetExDocumentInfoByExternalId(global::Sungero.ExchangeCore.IBoxBase box, global::System.String serviceId)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetExDocumentInfoByExternalId(box, serviceId);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Exchange.IExchangeDocumentInfo GetLastDocumentInfo(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetLastDocumentInfo(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDocumentCounterparties(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions.GetDocumentCounterparties(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentInfoFunctions" />
    internal static  global::System.Boolean NeedReceiveTask(global::Sungero.Exchange.IExchangeDocumentInfo exchangeDocumentInfo)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentInfoFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentInfo).FunctionsContainer.ServerFunctions;
      return functions.NeedReceiveTask();
    }

  }
}

// ==================================================================
// ExchangeDocumentInfoServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public class ExchangeDocumentInfoServerPublicFunctions : global::Sungero.Exchange.Server.IExchangeDocumentInfoServerPublicFunctions
  {
    public global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDocumentCounterparties(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.Exchange.Functions.ExchangeDocumentInfo.GetDocumentCounterparties(document);
    }
    public global::Sungero.Exchange.IExchangeDocumentInfo GetExDocumentInfoByExternalId(global::Sungero.ExchangeCore.IBoxBase box, global::System.String serviceId)
    {
      return global::Sungero.Exchange.Functions.ExchangeDocumentInfo.GetExDocumentInfoByExternalId(box, serviceId);
    }
    public global::System.Boolean NeedReceiveTask(global::Sungero.Exchange.IExchangeDocumentInfo exchangeDocumentInfo)
    {
      return global::Sungero.Exchange.Functions.ExchangeDocumentInfo.NeedReceiveTask(exchangeDocumentInfo);
    }
  }
}

// ==================================================================
// ExchangeDocumentInfoQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Queries
{
  public class ExchangeDocumentInfo
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Exchange.Server.ExchangeDocumentInfo.ExchangeDocumentInfoQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
