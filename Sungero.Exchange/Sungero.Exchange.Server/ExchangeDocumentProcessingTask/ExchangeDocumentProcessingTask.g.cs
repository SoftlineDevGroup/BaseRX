
// ==================================================================
// ExchangeDocumentProcessingTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
    public class ExchangeDocumentProcessingTaskFilter<T> :
      global::Sungero.Workflow.Server.TaskFilter<T>
      where T : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
    {
      protected new global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState Filter { get; private set; }

      private global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ExchangeDocumentProcessingTaskFilter(global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected ExchangeDocumentProcessingTaskFilter()
      {
      }
    }
    public class ExchangeDocumentProcessingTaskSearchDialogModel : global::Sungero.Workflow.Server.TaskSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Started { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MaxDeadline { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBoxBase> Box { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IExchangeService> ExchangeService { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Assignee { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> IncomeDate { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new ExchangeDocumentProcessingTaskObserversModel Observers { get { return (ExchangeDocumentProcessingTaskObserversModel)base.Observers; } protected set { base.Observers = value; } }

        }

      public class ExchangeDocumentProcessingTaskObserversModel : global::Sungero.Workflow.Server.TaskObserversModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class ExchangeDocumentProcessingTaskFilterForBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskSearchFilterForBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskBoxSearchPropertyFilteringServerHandler<TQueryEntity>().BoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskSearchFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskFilterForExchangeService<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IExchangeService
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskExchangeServicePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ExchangeServiceFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskFilterForExchangeService(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskSearchFilterForExchangeService<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IExchangeService
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskExchangeServiceSearchPropertyFilteringServerHandler<TQueryEntity>().ExchangeServiceSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskSearchFilterForExchangeService(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskFilterForAssignee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskAssigneePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AssigneeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskFilterForAssignee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskSearchFilterForAssignee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskAssigneeSearchPropertyFilteringServerHandler<TQueryEntity>().AssigneeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskSearchFilterForAssignee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskFilterForAddressee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskAddresseePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AddresseeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskSearchFilterForAddressee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Exchange.ExchangeDocumentProcessingTaskAddresseeSearchPropertyFilteringServerHandler<TQueryEntity>().AddresseeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ExchangeDocumentProcessingTaskSearchFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilter<global::Sungero.Exchange.IExchangeDocumentProcessingTask>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilterForBox<global::Sungero.ExchangeCore.IBoxBase, global::Sungero.Exchange.IExchangeDocumentProcessingTask>), "Box")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchFilterForBox<global::Sungero.ExchangeCore.IBoxBase>), "Box")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.Exchange.IExchangeDocumentProcessingTask>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilterForExchangeService<global::Sungero.ExchangeCore.IExchangeService, global::Sungero.Exchange.IExchangeDocumentProcessingTask>), "ExchangeService")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchFilterForExchangeService<global::Sungero.ExchangeCore.IExchangeService>), "ExchangeService")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilterForAssignee<global::Sungero.Company.IEmployee, global::Sungero.Exchange.IExchangeDocumentProcessingTask>), "Assignee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchFilterForAssignee<global::Sungero.CoreEntities.IRecipient>), "Assignee")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFilterForAddressee<global::Sungero.Company.IEmployee, global::Sungero.Exchange.IExchangeDocumentProcessingTask>), "Addressee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchFilterForAddressee<global::Sungero.CoreEntities.IRecipient>), "Addressee")]


  public class ExchangeDocumentProcessingTask :
    global::Sungero.Workflow.Server.Task, global::Sungero.Exchange.IExchangeDocumentProcessingTask, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("ae03c598-ab50-4781-b1b2-968510b338b9");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Exchange.Server.ExchangeDocumentProcessingTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Exchange.IExchangeDocumentProcessingTask, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentProcessingTaskState State
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskState(this);
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo Info
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo)base.Info; }
    }

    public new virtual global::Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights AccessRights
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentProcessingTaskServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers(this);
    }

    private global::System.DateTime? _Deadline;
    public virtual global::System.DateTime? Deadline
    {
      get
      {
        return this._Deadline;
      }

      set
      {
        this.SetPropertyValue("Deadline", this._Deadline, value, (propertyValue) => { this._Deadline = propertyValue; }, this.DeadlineChangedHandler);
      }
    }
    private global::System.DateTime? _IncomeDate;
    public virtual global::System.DateTime? IncomeDate
    {
      get
      {
        return this._IncomeDate;
      }

      set
      {
        this.SetPropertyValue("IncomeDate", this._IncomeDate, value, (propertyValue) => { this._IncomeDate = propertyValue; }, this.IncomeDateChangedHandler);
      }
    }
    private global::System.Boolean? _IsReadressed;
    public virtual global::System.Boolean? IsReadressed
    {
      get
      {
        return this._IsReadressed;
      }

      set
      {
        this.SetPropertyValue("IsReadressed", this._IsReadressed, value, (propertyValue) => { this._IsReadressed = propertyValue; }, this.IsReadressedChangedHandler);
      }
    }
    private global::System.Boolean? _IsIncoming;
    public virtual global::System.Boolean? IsIncoming
    {
      get
      {
        return this._IsIncoming;
      }

      set
      {
        this.SetPropertyValue("IsIncoming", this._IsIncoming, value, (propertyValue) => { this._IsIncoming = propertyValue; }, this.IsIncomingChangedHandler);
      }
    }







    private global::Sungero.ExchangeCore.IBoxBase _Box;
    public virtual global::Sungero.ExchangeCore.IBoxBase Box
    {
      get
      {
        return this._Box;
      }

      set
      {
        this.SetPropertyValue("Box", this._Box, value, (propertyValue) => { this._Box = propertyValue; }, this.BoxChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IExchangeService _ExchangeService;
    public virtual global::Sungero.ExchangeCore.IExchangeService ExchangeService
    {
      get
      {
        return this._ExchangeService;
      }

      set
      {
        this.SetPropertyValue("ExchangeService", this._ExchangeService, value, (propertyValue) => { this._ExchangeService = propertyValue; }, this.ExchangeServiceChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Assignee;
    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get
      {
        return this._Assignee;
      }

      set
      {
        this.SetPropertyValue("Assignee", this._Assignee, value, (propertyValue) => { this._Assignee = propertyValue; }, this.AssigneeChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Addressee;
    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get
      {
        return this._Addressee;
      }

      set
      {
        this.SetPropertyValue("Addressee", this._Addressee, value, (propertyValue) => { this._Addressee = propertyValue; }, this.AddresseeChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Workflow.ITaskObservers> CreateObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Exchange.IExchangeDocumentProcessingTaskObservers>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Exchange.ExchangeDocumentProcessingTaskCreatingFromServerHandler((global::Sungero.Exchange.IExchangeDocumentProcessingTask)entitySource, this.Info);
    }

    #region Framework events

    protected void BoxChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskBoxChangedEventArgs(this.State.Properties.Box, this.Box, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).BoxChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }

    protected void ExchangeServiceChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskExchangeServiceChangedEventArgs(this.State.Properties.ExchangeService, this.ExchangeService, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).ExchangeServiceChanged(args);
    }

    protected void AssigneeChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskAssigneeChangedEventArgs(this.State.Properties.Assignee, this.Assignee, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).AssigneeChanged(args);
    }

    protected void DeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Deadline, this.Deadline, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).DeadlineChanged(args);
    }

    protected void AddresseeChangedHandler()
    {
      var args = new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskAddresseeChangedEventArgs(this.State.Properties.Addressee, this.Addressee, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).AddresseeChanged(args);
    }

    protected void IncomeDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.IncomeDate, this.IncomeDate, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).IncomeDateChanged(args);
    }

    protected void IsReadressedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsReadressed, this.IsReadressed, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).IsReadressedChanged(args);
    }

    protected void IsIncomingChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsIncoming, this.IsIncoming, this);
     ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).IsIncomingChanged(args);
    }





    #endregion


    public ExchangeDocumentProcessingTask()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.Exchange.IExchangeDocumentProcessingTaskNeedSigningAttachments NeedSigning
    {
      get
      {
        return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskNeedSigningAttachments(this);
      }
    }
    public virtual global::Sungero.Exchange.IExchangeDocumentProcessingTaskDontNeedSigningAttachments DontNeedSigning
    {
      get
      {
        return new global::Sungero.Exchange.Shared.ExchangeDocumentProcessingTaskDontNeedSigningAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).NeedSigningCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).DontNeedSigningCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).NeedSigningAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).DontNeedSigningAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "NeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).NeedSigningDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DontNeedSigning")
      {
        ((global::Sungero.Exchange.ExchangeDocumentProcessingTaskSharedHandlers)this.SharedHandlers).DontNeedSigningDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange
{
  public partial class ExchangeDocumentProcessingTaskBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskBoxPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {

    public virtual global::System.Linq.IQueryable<T> BoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskCounterpartyPropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskExchangeServicePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IExchangeService
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ExchangeServiceFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskExchangeServicePropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskExchangeServiceSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IExchangeService
  {

    public virtual global::System.Linq.IQueryable<T> ExchangeServiceSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskExchangeServiceSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskAssigneePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AssigneeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskAssigneePropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskAssigneeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AssigneeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskAssigneeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskAddresseePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AddresseeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskAddresseePropertyFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskAddresseeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AddresseeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ExchangeDocumentProcessingTaskAddresseeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ExchangeDocumentProcessingTaskFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Exchange.IExchangeDocumentProcessingTask
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState Filter { get; private set; }

    private global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public ExchangeDocumentProcessingTaskFilteringServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTaskFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected ExchangeDocumentProcessingTaskFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class ExchangeDocumentProcessingTaskSearchDialogServerHandler : global::Sungero.Workflow.TaskSearchDialogServerHandler
   {
     private global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchDialogModel)this.Dialog;
       }
     }

     public ExchangeDocumentProcessingTaskSearchDialogServerHandler(global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ExchangeDocumentProcessingTaskServerHandlers : global::Sungero.Workflow.TaskServerHandlers
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public ExchangeDocumentProcessingTaskServerHandlers(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity)
      : base(entity)
    {
    }
  }

  public partial class ExchangeDocumentProcessingTaskCreatingFromServerHandler : global::Sungero.Workflow.TaskCreatingFromServerHandler
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _source
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Source; }
    }

    private global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo _info
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo)this._Info; }
    }

    public ExchangeDocumentProcessingTaskCreatingFromServerHandler(global::Sungero.Exchange.IExchangeDocumentProcessingTask source, global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ExchangeDocumentProcessingTaskEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
}

// ==================================================================
// ExchangeDocumentProcessingTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public class ExchangeDocumentProcessingTaskAccessRights : 
    Sungero.Workflow.Server.TaskAccessRights, Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights
  {

    public ExchangeDocumentProcessingTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ExchangeDocumentProcessingTaskTypeAccessRights : 
    Sungero.Workflow.Server.TaskTypeAccessRights, Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights
  {

    public ExchangeDocumentProcessingTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
    public class ExchangeDocumentProcessingTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.TaskRepositoryImplementer<T>,
      global::Sungero.Exchange.IExchangeDocumentProcessingTaskRepositoryImplementer<T>
      where T : global::Sungero.Exchange.IExchangeDocumentProcessingTask 
    {
       public new global::Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights AccessRights
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo Info
       {
          get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ExchangeDocumentProcessingTaskPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
}

// ==================================================================
// ExchangeDocumentProcessingTaskServerFunctions.g.cs
// ==================================================================

namespace Sungero.Exchange.Server
{
  public partial class ExchangeDocumentProcessingTaskFunctions : global::Sungero.Workflow.Server.TaskFunctions
  {
    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Entity; }
    }

    public ExchangeDocumentProcessingTaskFunctions(global::Sungero.Exchange.IExchangeDocumentProcessingTask entity) : base(entity) { }
  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Functions
{
  internal static class ExchangeDocumentProcessingTask
  {
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask, global::Sungero.Docflow.IOfficialDocument document)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView(document);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    internal static  void AddInformationBlock(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask, System.Object stateView, global::System.String text, global::System.DateTime date)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
    functions.AddInformationBlock(stateView, text, date);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    internal static  Sungero.Core.StateBlock AddTaskBlock(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask, global::Sungero.Core.StateView stateView)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
      return functions.AddTaskBlock(stateView);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    internal static  Sungero.Core.StateBlock GetAssignmentBlock(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask, global::Sungero.Workflow.IAssignment assignment)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
      return functions.GetAssignmentBlock(assignment);
    }
    /// <redirect project="Sungero.Exchange.Server" type="Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Boolean AreAllDocumentsSendToWork(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask)
    {
      var functions = (global::Sungero.Exchange.Server.ExchangeDocumentProcessingTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)exchangeDocumentProcessingTask).FunctionsContainer.ServerFunctions;
      return functions.AreAllDocumentsSendToWork();
    }

  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public class ExchangeDocumentProcessingTaskServerPublicFunctions : global::Sungero.Exchange.Server.IExchangeDocumentProcessingTaskServerPublicFunctions
  {
    public void AddInformationBlock(global::Sungero.Exchange.IExchangeDocumentProcessingTask exchangeDocumentProcessingTask, System.Object stateView, global::System.String text, global::System.DateTime date)
    {
global::Sungero.Exchange.Functions.ExchangeDocumentProcessingTask.AddInformationBlock(exchangeDocumentProcessingTask, stateView, text, date);
    }
  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Queries
{
  public class ExchangeDocumentProcessingTask
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Exchange.Server.ExchangeDocumentProcessingTask.ExchangeDocumentProcessingTaskQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public class ExchangeDocumentProcessingTaskArguments: global::Sungero.Workflow.Server.Route.TaskStartEventArguments<ExchangeDocumentProcessingTaskBlock, global::Sungero.Workflow.TaskBlock>
  {
    public ExchangeDocumentProcessingTaskArguments(ExchangeDocumentProcessingTaskBlock block) : base(block) { }
  }

  public class ExchangeDocumentProcessingTaskEndBlockEventArguments: global::Sungero.Workflow.Server.Route.TaskEndBlockEventArguments<ExchangeDocumentProcessingTaskBlock, global::Sungero.Workflow.TaskBlock, Sungero.Exchange.IExchangeDocumentProcessingTask> 
  {
    public ExchangeDocumentProcessingTaskEndBlockEventArguments(ExchangeDocumentProcessingTaskBlock block) : base(block) { }
  }

  public partial class ExchangeDocumentProcessingTaskBlock : global::Sungero.Workflow.Blocks.TaskBlockWrapper<global::Sungero.Workflow.TaskBlock>    
  {
    public virtual global::System.DateTime? Deadline
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("Deadline"); }
      set { this.SetCustomProperty("Deadline", value); }
    }
    public virtual global::System.DateTime? IncomeDate
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("IncomeDate"); }
      set { this.SetCustomProperty("IncomeDate", value); }
    }
    public virtual global::System.Boolean? IsReadressed
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsReadressed"); }
      set { this.SetCustomProperty("IsReadressed", value); }
    }
    public virtual global::System.Boolean? IsIncoming
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsIncoming"); }
      set { this.SetCustomProperty("IsIncoming", value); }
    }

    public virtual global::Sungero.ExchangeCore.IBoxBase Box
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.ExchangeCore.IBoxBase>("Box"); }
      set { this.SetCustomNavigationProperty("Box", value); }
    }
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Parties.ICounterparty>("Counterparty"); }
      set { this.SetCustomNavigationProperty("Counterparty", value); }
    }
    public virtual global::Sungero.ExchangeCore.IExchangeService ExchangeService
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.ExchangeCore.IExchangeService>("ExchangeService"); }
      set { this.SetCustomNavigationProperty("ExchangeService", value); }
    }
    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Assignee"); }
      set { this.SetCustomNavigationProperty("Assignee", value); }
    }
    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Addressee"); }
      set { this.SetCustomNavigationProperty("Addressee", value); }
    }




    public ExchangeDocumentProcessingTaskBlock(global::Sungero.Workflow.TaskBlock block) : base(block) { }
  }
}

// ==================================================================
// ExchangeDocumentProcessingTaskChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
}

// ==================================================================
// ExchangeDocumentProcessingTaskRouteHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Exchange.Server
{
  public partial class ExchangeDocumentProcessingTaskRouteHandlers{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::Sungero.Exchange.IExchangeDocumentProcessingTask _obj
    {
      get { return (global::Sungero.Exchange.IExchangeDocumentProcessingTask)this.Task; }
    }


    protected readonly int _schemeVersion;

    public ExchangeDocumentProcessingTaskRouteHandlers(global::Sungero.Exchange.IExchangeDocumentProcessingTask task, int schemeVersion) 
    {
      this.Task = task;
      this._schemeVersion = schemeVersion;
    }


    [global::System.ObsoleteAttribute("Используйте ExtendedSchemeVersions")]
    private static class SchemeVersions
    {
      public static readonly int V1 = 1;
}

    }
}
