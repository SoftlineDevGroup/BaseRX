
// ==================================================================
// VisibilityRule.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
    public class VisibilityRuleFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Company.IVisibilityRule
    {
      protected new global::Sungero.Company.IVisibilityRuleFilterState Filter { get; private set; }

      private global::Sungero.Company.IVisibilityRuleFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Company.VisibilityRuleFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public VisibilityRuleFilter(global::Sungero.Company.IVisibilityRuleFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected VisibilityRuleFilter()
      {
      }
    }
      public class VisibilityRuleUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Company.IVisibilityRule
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class VisibilityRuleSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }



                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public VisibilityRuleRecipientsModel Recipients { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public VisibilityRuleVisibleMembersModel VisibleMembers { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public VisibilityRuleExcludedMembersModel ExcludedMembers { get; protected set; }

        }


      public class VisibilityRuleRecipientsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class VisibilityRuleVisibleMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class VisibilityRuleExcludedMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }




  [global::Sungero.Domain.Filter(typeof(global::Sungero.Company.Server.VisibilityRuleFilter<global::Sungero.Company.IVisibilityRule>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Company.Server.VisibilityRuleUiFilter<global::Sungero.Company.IVisibilityRule>))]

  public class VisibilityRule :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Company.IVisibilityRule, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("023eab79-c456-46bb-97b5-fbc764be9308");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Company.Server.VisibilityRule.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Company.IVisibilityRule, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Company.IVisibilityRuleState State
    {
      get { return (global::Sungero.Company.IVisibilityRuleState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Company.Shared.VisibilityRuleState(this);
    }

    public new virtual global::Sungero.Company.IVisibilityRuleInfo Info
    {
      get { return (global::Sungero.Company.IVisibilityRuleInfo)base.Info; }
    }

    public new virtual global::Sungero.Company.IVisibilityRuleAccessRights AccessRights
    {
      get { return (global::Sungero.Company.IVisibilityRuleAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Company.Server.VisibilityRuleAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Company.Server.VisibilityRuleFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Company.Shared.VisibilityRuleFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Company.VisibilityRuleServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Company.VisibilityRuleSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }








    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleRecipients> _Recipients;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleRecipients> Recipients
    {
      get
      {
        if (this._Recipients == null)
        {
          this._Recipients = this.CreateRecipientsCollection();
          this.SetRecipientsEventHandlers();
        }
        return this._Recipients;
      }

      set
      {
        if (this._Recipients != null)
          this.UnsetChildCollectionEventHandlers(this._Recipients);

        this._Recipients = value;
        this.SetRecipientsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleRecipients> CreateRecipientsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Company.IVisibilityRuleRecipients>() { RootEntity = this };
    }

    private void SetRecipientsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Recipients, "Recipients");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Recipients;
      changeNotifier.Added += this.RecipientsAddedHandler;
      changeNotifier.Deleted += this.RecipientsDeletedHandler;
      changeNotifier.Added += this.RecipientsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.RecipientsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.RecipientsCollectionUpdateEventHandler;
    }

    private void RecipientsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.RecipientsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleVisibleMembers> _VisibleMembers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleVisibleMembers> VisibleMembers
    {
      get
      {
        if (this._VisibleMembers == null)
        {
          this._VisibleMembers = this.CreateVisibleMembersCollection();
          this.SetVisibleMembersEventHandlers();
        }
        return this._VisibleMembers;
      }

      set
      {
        if (this._VisibleMembers != null)
          this.UnsetChildCollectionEventHandlers(this._VisibleMembers);

        this._VisibleMembers = value;
        this.SetVisibleMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleVisibleMembers> CreateVisibleMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Company.IVisibilityRuleVisibleMembers>() { RootEntity = this };
    }

    private void SetVisibleMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._VisibleMembers, "VisibleMembers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._VisibleMembers;
      changeNotifier.Added += this.VisibleMembersAddedHandler;
      changeNotifier.Deleted += this.VisibleMembersDeletedHandler;
      changeNotifier.Added += this.VisibleMembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.VisibleMembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.VisibleMembersCollectionUpdateEventHandler;
    }

    private void VisibleMembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.VisibleMembersChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleExcludedMembers> _ExcludedMembers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleExcludedMembers> ExcludedMembers
    {
      get
      {
        if (this._ExcludedMembers == null)
        {
          this._ExcludedMembers = this.CreateExcludedMembersCollection();
          this.SetExcludedMembersEventHandlers();
        }
        return this._ExcludedMembers;
      }

      set
      {
        if (this._ExcludedMembers != null)
          this.UnsetChildCollectionEventHandlers(this._ExcludedMembers);

        this._ExcludedMembers = value;
        this.SetExcludedMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Company.IVisibilityRuleExcludedMembers> CreateExcludedMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Company.IVisibilityRuleExcludedMembers>() { RootEntity = this };
    }

    private void SetExcludedMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ExcludedMembers, "ExcludedMembers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ExcludedMembers;
      changeNotifier.Added += this.ExcludedMembersAddedHandler;
      changeNotifier.Deleted += this.ExcludedMembersDeletedHandler;
      changeNotifier.Added += this.ExcludedMembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ExcludedMembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ExcludedMembersCollectionUpdateEventHandler;
    }

    private void ExcludedMembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ExcludedMembersChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Company.VisibilityRuleCreatingFromServerHandler((global::Sungero.Company.IVisibilityRule)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Company.VisibilityRuleSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void RecipientsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Company.VisibilityRuleSharedHandlers)this.SharedHandlers).RecipientsChanged(args);
    }

    protected void VisibleMembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Company.VisibilityRuleSharedHandlers)this.SharedHandlers).VisibleMembersChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Company.VisibilityRuleSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void ExcludedMembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Company.VisibilityRuleSharedHandlers)this.SharedHandlers).ExcludedMembersChanged(args);
    }



    protected virtual global::Sungero.Company.VisibilityRuleRecipientsSharedCollectionHandlers CreateRecipientsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleRecipientsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Company.VisibilityRuleRecipientsSharedCollectionHandlers CreateRecipientsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleRecipientsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void RecipientsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateRecipientsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.RecipientsAdded(args);
      }
    }

    protected virtual void RecipientsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateRecipientsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.RecipientsDeleted(args);
      }
    }


    protected virtual global::Sungero.Company.VisibilityRuleVisibleMembersSharedCollectionHandlers CreateVisibleMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleVisibleMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Company.VisibilityRuleVisibleMembersSharedCollectionHandlers CreateVisibleMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleVisibleMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void VisibleMembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateVisibleMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.VisibleMembersAdded(args);
      }
    }

    protected virtual void VisibleMembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateVisibleMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.VisibleMembersDeleted(args);
      }
    }


    protected virtual global::Sungero.Company.VisibilityRuleExcludedMembersSharedCollectionHandlers CreateExcludedMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleExcludedMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Company.VisibilityRuleExcludedMembersSharedCollectionHandlers CreateExcludedMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Company.VisibilityRuleExcludedMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExcludedMembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExcludedMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ExcludedMembersAdded(args);
      }
    }

    protected virtual void ExcludedMembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExcludedMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ExcludedMembersDeleted(args);
      }
    }


    #endregion


    public VisibilityRule()
    {
    }

  }
}

// ==================================================================
// VisibilityRuleHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company
{

  public partial class VisibilityRuleFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Company.IVisibilityRule
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Company.IVisibilityRuleFilterState Filter { get; private set; }

    private global::Sungero.Company.IVisibilityRuleFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public VisibilityRuleFilteringServerHandler(global::Sungero.Company.IVisibilityRuleFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected VisibilityRuleFilteringServerHandler()
    {
    }


  }

  public partial class VisibilityRuleUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Company.IVisibilityRule
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class VisibilityRuleSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Company.Server.VisibilityRuleSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Company.Server.VisibilityRuleSearchDialogModel)this.Dialog;
       }
     }

     public VisibilityRuleSearchDialogServerHandler(global::Sungero.Company.Server.VisibilityRuleSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class VisibilityRuleServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Company.IVisibilityRule _obj
    {
      get { return (global::Sungero.Company.IVisibilityRule)this.Entity; }
    }

    public VisibilityRuleServerHandlers(global::Sungero.Company.IVisibilityRule entity)
      : base(entity)
    {
    }
  }

  public partial class VisibilityRuleCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Company.IVisibilityRule _source
    {
      get { return (global::Sungero.Company.IVisibilityRule)this.Source; }
    }

    private global::Sungero.Company.IVisibilityRuleInfo _info
    {
      get { return (global::Sungero.Company.IVisibilityRuleInfo)this._Info; }
    }

    public VisibilityRuleCreatingFromServerHandler(global::Sungero.Company.IVisibilityRule source, global::Sungero.Company.IVisibilityRuleInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// VisibilityRuleEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
}

// ==================================================================
// VisibilityRuleAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
  public class VisibilityRuleAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Company.IVisibilityRuleAccessRights
  {

    public VisibilityRuleAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class VisibilityRuleTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Company.IVisibilityRuleAccessRights
  {

    public VisibilityRuleTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// VisibilityRuleRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
    public class VisibilityRuleRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Company.IVisibilityRuleRepositoryImplementer<T>
      where T : global::Sungero.Company.IVisibilityRule 
    {
       public new global::Sungero.Company.IVisibilityRuleAccessRights AccessRights
       {
          get { return (global::Sungero.Company.IVisibilityRuleAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Company.IVisibilityRuleInfo Info
       {
          get { return (global::Sungero.Company.IVisibilityRuleInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Company.Server.VisibilityRuleTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// VisibilityRulePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
    public class VisibilityRuleRecipientPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Company.IVisibilityRule
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.CoreEntities.IRecipient>)query;
        var typedState = (global::Sungero.Company.IVisibilityRuleFilterState)this.State;
        var handlers = new global::Sungero.Company.VisibilityRuleFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.RecipientFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.CoreEntities.IRecipient>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Company.IVisibilityRule>(query);
      }
    }

    public class VisibilityRuleVisibleMemberPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Company.IVisibilityRule
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.CoreEntities.IRecipient>)query;
        var typedState = (global::Sungero.Company.IVisibilityRuleFilterState)this.State;
        var handlers = new global::Sungero.Company.VisibilityRuleFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.VisibleMemberFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.CoreEntities.IRecipient>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Company.IVisibilityRule>(query);
      }
    }

}

// ==================================================================
// VisibilityRuleServerFunctions.g.cs
// ==================================================================

namespace Sungero.Company.Server
{
  public partial class VisibilityRuleFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Company.IVisibilityRule _obj
    {
      get { return (global::Sungero.Company.IVisibilityRule)this.Entity; }
    }

    public VisibilityRuleFunctions(global::Sungero.Company.IVisibilityRule entity) : base(entity) { }
  }
}

// ==================================================================
// VisibilityRuleFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Functions
{
  internal static class VisibilityRule
  {
  }
}

// ==================================================================
// VisibilityRuleServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Server
{
  public class VisibilityRuleServerPublicFunctions : global::Sungero.Company.Server.IVisibilityRuleServerPublicFunctions
  {
  }
}

// ==================================================================
// VisibilityRuleQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Company.Queries
{
  public class VisibilityRule
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Company.Server.VisibilityRule.VisibilityRuleQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
