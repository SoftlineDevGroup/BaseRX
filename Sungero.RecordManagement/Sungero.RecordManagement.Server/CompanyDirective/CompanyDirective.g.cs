
// ==================================================================
// CompanyDirective.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class CompanyDirectiveFilter<T> :
      global::Sungero.RecordManagement.Server.OrderBaseFilter<T>
      where T : class, global::Sungero.RecordManagement.ICompanyDirective
    {
      private global::Sungero.RecordManagement.ICompanyDirectiveFilterState filter
      {
        get
        {
          return (Sungero.RecordManagement.ICompanyDirectiveFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public CompanyDirectiveFilter(global::Sungero.RecordManagement.ICompanyDirectiveFilterState filter)
      : base(filter)
      {
      }

      protected CompanyDirectiveFilter()
      {
      }
    }
    public class CompanyDirectiveSearchDialogModel : global::Sungero.RecordManagement.Server.OrderBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> PreparedBy { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }




                   public new CompanyDirectiveVersionsModel Versions { get { return (CompanyDirectiveVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new CompanyDirectiveTrackingModel Tracking { get { return (CompanyDirectiveTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class CompanyDirectiveVersionsModel : global::Sungero.RecordManagement.Server.OrderBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class CompanyDirectiveTrackingModel : global::Sungero.RecordManagement.Server.OrderBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.CompanyDirectiveFilter<global::Sungero.RecordManagement.ICompanyDirective>))]

  public class CompanyDirective :
    global::Sungero.RecordManagement.Server.OrderBase, global::Sungero.RecordManagement.ICompanyDirective, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("264ada4e-b272-4ecc-a115-1246c9556bfa");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.CompanyDirective.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.ICompanyDirective, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.RecordManagement.ICompanyDirectiveState State
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirectiveState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.CompanyDirectiveState(this);
    }

    public new virtual global::Sungero.RecordManagement.ICompanyDirectiveInfo Info
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirectiveInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.ICompanyDirectiveAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirectiveAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.CompanyDirectiveAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.CompanyDirectiveFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.CompanyDirectiveFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.CompanyDirectiveServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.CompanyDirectiveSharedHandlers(this);
    }









    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.ICompanyDirectiveVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.ICompanyDirectiveTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.CompanyDirectiveCreatingFromServerHandler((global::Sungero.RecordManagement.ICompanyDirective)entitySource, this.Info);
    }

    #region Framework events





    #endregion


    public CompanyDirective()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.CompanyDirectiveConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// CompanyDirectiveHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class CompanyDirectiveFilteringServerHandler<T>
    : global::Sungero.RecordManagement.OrderBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.ICompanyDirective
  {
    private global::Sungero.RecordManagement.ICompanyDirectiveFilterState _filter
    {
      get
      {
        return (Sungero.RecordManagement.ICompanyDirectiveFilterState)this.Filter;
      }
    }

    public CompanyDirectiveFilteringServerHandler(global::Sungero.RecordManagement.ICompanyDirectiveFilterState filter)
    : base(filter)
    {
    }

    protected CompanyDirectiveFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> DocumentRegisterFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentRegisterFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentKindFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.BusinessUnitFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }


  }

  public partial class CompanyDirectiveSearchDialogServerHandler : global::Sungero.RecordManagement.OrderBaseSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.CompanyDirectiveSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.CompanyDirectiveSearchDialogModel)this.Dialog;
       }
     }

     public CompanyDirectiveSearchDialogServerHandler(global::Sungero.RecordManagement.Server.CompanyDirectiveSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class CompanyDirectiveServerHandlers : global::Sungero.RecordManagement.OrderBaseServerHandlers
  {
    private global::Sungero.RecordManagement.ICompanyDirective _obj
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirective)this.Entity; }
    }

    public CompanyDirectiveServerHandlers(global::Sungero.RecordManagement.ICompanyDirective entity)
      : base(entity)
    {
    }
  }

  public partial class CompanyDirectiveCreatingFromServerHandler : global::Sungero.RecordManagement.OrderBaseCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.ICompanyDirective _source
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirective)this.Source; }
    }

    private global::Sungero.RecordManagement.ICompanyDirectiveInfo _info
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirectiveInfo)this._Info; }
    }

    public CompanyDirectiveCreatingFromServerHandler(global::Sungero.RecordManagement.ICompanyDirective source, global::Sungero.RecordManagement.ICompanyDirectiveInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// CompanyDirectiveEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// CompanyDirectiveAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class CompanyDirectiveAccessRights : 
    Sungero.RecordManagement.Server.OrderBaseAccessRights, Sungero.RecordManagement.ICompanyDirectiveAccessRights
  {

    public CompanyDirectiveAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CompanyDirectiveTypeAccessRights : 
    Sungero.RecordManagement.Server.OrderBaseTypeAccessRights, Sungero.RecordManagement.ICompanyDirectiveAccessRights
  {

    public CompanyDirectiveTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// CompanyDirectiveRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class CompanyDirectiveRepositoryImplementer<T> : 
      global::Sungero.RecordManagement.Server.OrderBaseRepositoryImplementer<T>,
      global::Sungero.RecordManagement.ICompanyDirectiveRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.ICompanyDirective 
    {
       public new global::Sungero.RecordManagement.ICompanyDirectiveAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.ICompanyDirectiveAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.ICompanyDirectiveInfo Info
       {
          get { return (global::Sungero.RecordManagement.ICompanyDirectiveInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.CompanyDirectiveTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CompanyDirectivePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class CompanyDirectiveDocumentRegisterPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDocumentRegisterPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.ICompanyDirective
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentRegister>)query;
        var typedState = (global::Sungero.RecordManagement.ICompanyDirectiveFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.CompanyDirectiveFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentRegisterFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentRegister>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.ICompanyDirective>(query);
      }
    }

    public class CompanyDirectiveDocumentKindPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDocumentKindPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.ICompanyDirective
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.RecordManagement.ICompanyDirectiveFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.CompanyDirectiveFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.ICompanyDirective>(query);
      }
    }

    public class CompanyDirectiveBusinessUnitPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseBusinessUnitPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.ICompanyDirective
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.RecordManagement.ICompanyDirectiveFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.CompanyDirectiveFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.ICompanyDirective>(query);
      }
    }

    public class CompanyDirectiveDepartmentPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.ICompanyDirective
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.RecordManagement.ICompanyDirectiveFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.CompanyDirectiveFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.ICompanyDirective>(query);
      }
    }

}

// ==================================================================
// CompanyDirectiveServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class CompanyDirectiveFunctions : global::Sungero.RecordManagement.Server.OrderBaseFunctions
  {
    private global::Sungero.RecordManagement.ICompanyDirective _obj
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirective)this.Entity; }
    }

    public CompanyDirectiveFunctions(global::Sungero.RecordManagement.ICompanyDirective entity) : base(entity) { }
  }
}

// ==================================================================
// CompanyDirectiveFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class CompanyDirective
  {
  }
}

// ==================================================================
// CompanyDirectiveServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class CompanyDirectiveServerPublicFunctions : global::Sungero.RecordManagement.Server.ICompanyDirectiveServerPublicFunctions
  {
  }
}

// ==================================================================
// CompanyDirectiveQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class CompanyDirective
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.CompanyDirective.CompanyDirectiveQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// CompanyDirectiveServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class CompanyDirectiveConvertingFromServerHandler : global::Sungero.RecordManagement.OrderBaseConvertingFromServerHandler
  { 
    private global::Sungero.RecordManagement.ICompanyDirectiveInfo _info
    {
      get { return (global::Sungero.RecordManagement.ICompanyDirectiveInfo)this._Info; }
    }

    public CompanyDirectiveConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.RecordManagement.ICompanyDirectiveInfo info)
      : base(source, info)
    {
    }
  }
}
