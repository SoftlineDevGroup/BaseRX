
// ==================================================================
// AcquaintanceTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class AcquaintanceTaskFilter<T> :
      global::Sungero.Workflow.Server.TaskFilter<T>
      where T : class, global::Sungero.RecordManagement.IAcquaintanceTask
    {
      protected new global::Sungero.RecordManagement.IAcquaintanceTaskFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IAcquaintanceTaskFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public AcquaintanceTaskFilter(global::Sungero.RecordManagement.IAcquaintanceTaskFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected AcquaintanceTaskFilter()
      {
      }
    }
    public class AcquaintanceTaskSearchDialogModel : global::Sungero.Workflow.Server.TaskSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Started { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MaxDeadline { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new AcquaintanceTaskObserversModel Observers { get { return (AcquaintanceTaskObserversModel)base.Observers; } protected set { base.Observers = value; } }
                   public AcquaintanceTaskPerformersModel Performers { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AcquaintanceTaskAcquaintanceVersionsModel AcquaintanceVersions { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AcquaintanceTaskAcquaintersModel Acquainters { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public AcquaintanceTaskExcludedPerformersModel ExcludedPerformers { get; protected set; }

        }

      public class AcquaintanceTaskObserversModel : global::Sungero.Workflow.Server.TaskObserversModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }


      public class AcquaintanceTaskPerformersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


                      public virtual global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> Performer { get; protected set; }

         }
      public class AcquaintanceTaskAcquaintanceVersionsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AcquaintanceTaskAcquaintersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class AcquaintanceTaskExcludedPerformersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }




  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.AcquaintanceTaskFilter<global::Sungero.RecordManagement.IAcquaintanceTask>))]

  public class AcquaintanceTask :
    global::Sungero.Workflow.Server.Task, global::Sungero.RecordManagement.IAcquaintanceTask, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("2d53959b-2cee-41f7-83c2-98ae1dbbd538");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.AcquaintanceTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IAcquaintanceTask, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceTaskState State
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskState(this);
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceTaskInfo Info
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.AcquaintanceTaskAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceTaskServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers(this);
    }

    private global::System.Boolean? _IsElectronicAcquaintance;
    public virtual global::System.Boolean? IsElectronicAcquaintance
    {
      get
      {
        return this._IsElectronicAcquaintance;
      }

      set
      {
        this.SetPropertyValue("IsElectronicAcquaintance", this._IsElectronicAcquaintance, value, (propertyValue) => { this._IsElectronicAcquaintance = propertyValue; }, this.IsElectronicAcquaintanceChangedHandler);
      }
    }
    private global::System.DateTime? _Deadline;
    public virtual global::System.DateTime? Deadline
    {
      get
      {
        return this._Deadline;
      }

      set
      {
        this.SetPropertyValue("Deadline", this._Deadline, value, (propertyValue) => { this._Deadline = propertyValue; }, this.DeadlineChangedHandler);
      }
    }








    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers> _Performers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers> Performers
    {
      get
      {
        if (this._Performers == null)
        {
          this._Performers = this.CreatePerformersCollection();
          this.SetPerformersEventHandlers();
        }
        return this._Performers;
      }

      set
      {
        if (this._Performers != null)
          this.UnsetChildCollectionEventHandlers(this._Performers);

        this._Performers = value;
        this.SetPerformersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers> CreatePerformersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskPerformers>() { RootEntity = this };
    }

    private void SetPerformersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Performers, "Performers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Performers;
      changeNotifier.Added += this.PerformersAddedHandler;
      changeNotifier.Deleted += this.PerformersDeletedHandler;
      changeNotifier.Added += this.PerformersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.PerformersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.PerformersCollectionUpdateEventHandler;
    }

    private void PerformersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.PerformersChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions> _AcquaintanceVersions;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions> AcquaintanceVersions
    {
      get
      {
        if (this._AcquaintanceVersions == null)
        {
          this._AcquaintanceVersions = this.CreateAcquaintanceVersionsCollection();
          this.SetAcquaintanceVersionsEventHandlers();
        }
        return this._AcquaintanceVersions;
      }

      set
      {
        if (this._AcquaintanceVersions != null)
          this.UnsetChildCollectionEventHandlers(this._AcquaintanceVersions);

        this._AcquaintanceVersions = value;
        this.SetAcquaintanceVersionsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions> CreateAcquaintanceVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquaintanceVersions>() { RootEntity = this };
    }

    private void SetAcquaintanceVersionsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._AcquaintanceVersions, "AcquaintanceVersions");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._AcquaintanceVersions;
      changeNotifier.Added += this.AcquaintanceVersionsAddedHandler;
      changeNotifier.Deleted += this.AcquaintanceVersionsDeletedHandler;
      changeNotifier.Added += this.AcquaintanceVersionsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.AcquaintanceVersionsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.AcquaintanceVersionsCollectionUpdateEventHandler;
    }

    private void AcquaintanceVersionsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.AcquaintanceVersionsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquainters> _Acquainters;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquainters> Acquainters
    {
      get
      {
        if (this._Acquainters == null)
        {
          this._Acquainters = this.CreateAcquaintersCollection();
          this.SetAcquaintersEventHandlers();
        }
        return this._Acquainters;
      }

      set
      {
        if (this._Acquainters != null)
          this.UnsetChildCollectionEventHandlers(this._Acquainters);

        this._Acquainters = value;
        this.SetAcquaintersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquainters> CreateAcquaintersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskAcquainters>() { RootEntity = this };
    }

    private void SetAcquaintersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Acquainters, "Acquainters");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Acquainters;
      changeNotifier.Added += this.AcquaintersAddedHandler;
      changeNotifier.Deleted += this.AcquaintersDeletedHandler;
      changeNotifier.Added += this.AcquaintersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.AcquaintersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.AcquaintersCollectionUpdateEventHandler;
    }

    private void AcquaintersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.AcquaintersChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers> _ExcludedPerformers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers> ExcludedPerformers
    {
      get
      {
        if (this._ExcludedPerformers == null)
        {
          this._ExcludedPerformers = this.CreateExcludedPerformersCollection();
          this.SetExcludedPerformersEventHandlers();
        }
        return this._ExcludedPerformers;
      }

      set
      {
        if (this._ExcludedPerformers != null)
          this.UnsetChildCollectionEventHandlers(this._ExcludedPerformers);

        this._ExcludedPerformers = value;
        this.SetExcludedPerformersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers> CreateExcludedPerformersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskExcludedPerformers>() { RootEntity = this };
    }

    private void SetExcludedPerformersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ExcludedPerformers, "ExcludedPerformers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ExcludedPerformers;
      changeNotifier.Added += this.ExcludedPerformersAddedHandler;
      changeNotifier.Deleted += this.ExcludedPerformersDeletedHandler;
      changeNotifier.Added += this.ExcludedPerformersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ExcludedPerformersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ExcludedPerformersCollectionUpdateEventHandler;
    }

    private void ExcludedPerformersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ExcludedPerformersChangedHandler();
    }


    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Workflow.ITaskObservers> CreateObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IAcquaintanceTaskObservers>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskCreatingFromServerHandler((global::Sungero.RecordManagement.IAcquaintanceTask)entitySource, this.Info);
    }

    #region Framework events

    protected void IsElectronicAcquaintanceChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsElectronicAcquaintance, this.IsElectronicAcquaintance, this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).IsElectronicAcquaintanceChanged(args);
    }

    protected void DeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Deadline, this.Deadline, this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).DeadlineChanged(args);
    }

    protected void PerformersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).PerformersChanged(args);
    }

    protected void AcquaintanceVersionsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).AcquaintanceVersionsChanged(args);
    }

    protected void AcquaintersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).AcquaintersChanged(args);
    }

    protected void ExcludedPerformersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).ExcludedPerformersChanged(args);
    }




    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers CreatePerformersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers CreatePerformersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskPerformersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void PerformersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreatePerformersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.PerformersAdded(args);
      }
    }

    protected virtual void PerformersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreatePerformersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.PerformersDeleted(args);
      }
    }


    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers CreateAcquaintanceVersionsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers CreateAcquaintanceVersionsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintanceVersionsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void AcquaintanceVersionsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAcquaintanceVersionsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.AcquaintanceVersionsAdded(args);
      }
    }

    protected virtual void AcquaintanceVersionsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAcquaintanceVersionsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.AcquaintanceVersionsDeleted(args);
      }
    }


    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintersSharedCollectionHandlers CreateAcquaintersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskAcquaintersSharedCollectionHandlers CreateAcquaintersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskAcquaintersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void AcquaintersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAcquaintersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.AcquaintersAdded(args);
      }
    }

    protected virtual void AcquaintersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateAcquaintersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.AcquaintersDeleted(args);
      }
    }


    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers CreateExcludedPerformersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers CreateExcludedPerformersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.AcquaintanceTaskExcludedPerformersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExcludedPerformersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExcludedPerformersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ExcludedPerformersAdded(args);
      }
    }

    protected virtual void ExcludedPerformersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExcludedPerformersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ExcludedPerformersDeleted(args);
      }
    }


    #endregion


    public AcquaintanceTask()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskDocumentGroupAttachments DocumentGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskDocumentGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IAcquaintanceTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).DocumentGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.AcquaintanceTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// AcquaintanceTaskHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class AcquaintanceTaskFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IAcquaintanceTask
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IAcquaintanceTaskFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IAcquaintanceTaskFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public AcquaintanceTaskFilteringServerHandler(global::Sungero.RecordManagement.IAcquaintanceTaskFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected AcquaintanceTaskFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class AcquaintanceTaskSearchDialogServerHandler : global::Sungero.Workflow.TaskSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.AcquaintanceTaskSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.AcquaintanceTaskSearchDialogModel)this.Dialog;
       }
     }

     public AcquaintanceTaskSearchDialogServerHandler(global::Sungero.RecordManagement.Server.AcquaintanceTaskSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class AcquaintanceTaskServerHandlers : global::Sungero.Workflow.TaskServerHandlers
  {
    private global::Sungero.RecordManagement.IAcquaintanceTask _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTask)this.Entity; }
    }

    public AcquaintanceTaskServerHandlers(global::Sungero.RecordManagement.IAcquaintanceTask entity)
      : base(entity)
    {
    }
  }

  public partial class AcquaintanceTaskCreatingFromServerHandler : global::Sungero.Workflow.TaskCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IAcquaintanceTask _source
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTask)this.Source; }
    }

    private global::Sungero.RecordManagement.IAcquaintanceTaskInfo _info
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskInfo)this._Info; }
    }

    public AcquaintanceTaskCreatingFromServerHandler(global::Sungero.RecordManagement.IAcquaintanceTask source, global::Sungero.RecordManagement.IAcquaintanceTaskInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// AcquaintanceTaskEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// AcquaintanceTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceTaskAccessRights : 
    Sungero.Workflow.Server.TaskAccessRights, Sungero.RecordManagement.IAcquaintanceTaskAccessRights
  {

    public AcquaintanceTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AcquaintanceTaskTypeAccessRights : 
    Sungero.Workflow.Server.TaskTypeAccessRights, Sungero.RecordManagement.IAcquaintanceTaskAccessRights
  {

    public AcquaintanceTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AcquaintanceTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class AcquaintanceTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.TaskRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IAcquaintanceTaskRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IAcquaintanceTask 
    {
       public new global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceTaskAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IAcquaintanceTaskInfo Info
       {
          get { return (global::Sungero.RecordManagement.IAcquaintanceTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.AcquaintanceTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AcquaintanceTaskPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// AcquaintanceTaskServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class AcquaintanceTaskFunctions : global::Sungero.Workflow.Server.TaskFunctions
  {
    private global::Sungero.RecordManagement.IAcquaintanceTask _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTask)this.Entity; }
    }

    public AcquaintanceTaskFunctions(global::Sungero.RecordManagement.IAcquaintanceTask entity) : base(entity) { }
  }
}

// ==================================================================
// AcquaintanceTaskFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class AcquaintanceTask
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, global::Sungero.Content.IElectronicDocument document)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView(document);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  Sungero.Core.StateBlock AddTaskBlock(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, global::Sungero.Core.StateView stateView)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.AddTaskBlock(stateView);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  void AddSelfCompletedAssignmentsBlocks(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, Sungero.Core.StateBlock taskBlock, global::System.Collections.Generic.List<global::Sungero.RecordManagement.IAcquaintanceAssignment> assignments, global::System.Boolean isElectronicAcquaintance)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
    functions.AddSelfCompletedAssignmentsBlocks(taskBlock, assignments, isElectronicAcquaintance);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  void AddAssignmentBlock(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, Sungero.Core.StateBlock parentBlock, global::Sungero.Workflow.IAssignment assignment, global::System.Boolean isElectronicAcquaintance, Sungero.Core.StateBlockIconSize iconSize, global::System.String header)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
    functions.AddAssignmentBlock(parentBlock, assignment, isElectronicAcquaintance, iconSize, header);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  void AddInProcessAssignmentsBlock(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, Sungero.Core.StateBlock taskBlock, global::System.Collections.Generic.List<global::Sungero.RecordManagement.IAcquaintanceAssignment> assignments)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
    functions.AddInProcessAssignmentsBlock(taskBlock, assignments);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::Sungero.RecordManagement.Structures.AcquaintanceTask.StartValidationMessage> GetStartValidationMessage(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetStartValidationMessage();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.Company.IEmployee> GetNotAutomatedParticipants(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetNotAutomatedParticipants();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::Sungero.Company.IEmployee> GetParticipants(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetParticipants();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Company.IEmployee> GetParticipants(global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> recipients, global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> excludedRecipients)
    {
      return global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions.GetParticipants(recipients, excludedRecipients);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Company.IEmployee> GetNonSystemActivePerformers(global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> recipients)
    {
      return global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions.GetNonSystemActivePerformers(recipients);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean IsDocumentVersionReaded(global::Sungero.Docflow.IOfficialDocument document, global::System.Int32 version)
    {
      return global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions.IsDocumentVersionReaded(document, version);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean IsDocumentVersionSignatureValid(global::Sungero.Docflow.IOfficialDocument document, global::System.Int32 version)
    {
      return global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions.IsDocumentVersionSignatureValid(document, version);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  global::System.Int32 GetDocumentVersion(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
      return functions.GetDocumentVersion();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.AcquaintanceTaskFunctions" />
    internal static  void StoreAcquainters(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.ServerFunctions;
    functions.StoreAcquainters();
    }

    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions" />
    internal static  global::System.Boolean ValidateAcquaintanceTaskStart(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, Sungero.Core.IValidationArgs e)
    {
      var functions = (global::Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.SharedFunctions;
      return functions.ValidateAcquaintanceTaskStart(e);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions" />
    internal static  void StoreAcquaintanceVersion(global::Sungero.RecordManagement.IAcquaintanceTask acquaintanceTask, global::Sungero.Content.IElectronicDocument document, global::System.Boolean isMainDocument)
    {
      var functions = (global::Sungero.RecordManagement.Shared.AcquaintanceTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)acquaintanceTask).FunctionsContainer.SharedFunctions;
    functions.StoreAcquaintanceVersion(document, isMainDocument);
    }

  }
}

// ==================================================================
// AcquaintanceTaskServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceTaskServerPublicFunctions : global::Sungero.RecordManagement.Server.IAcquaintanceTaskServerPublicFunctions
  {
  }
}

// ==================================================================
// AcquaintanceTaskQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class AcquaintanceTask
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.AcquaintanceTask.AcquaintanceTaskQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// AcquaintanceTaskBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceTaskArguments: global::Sungero.Workflow.Server.Route.TaskStartEventArguments<AcquaintanceTaskBlock, global::Sungero.Workflow.TaskBlock>
  {
    public AcquaintanceTaskArguments(AcquaintanceTaskBlock block) : base(block) { }
  }

  public class AcquaintanceTaskEndBlockEventArguments: global::Sungero.Workflow.Server.Route.TaskEndBlockEventArguments<AcquaintanceTaskBlock, global::Sungero.Workflow.TaskBlock, Sungero.RecordManagement.IAcquaintanceTask> 
  {
    public AcquaintanceTaskEndBlockEventArguments(AcquaintanceTaskBlock block) : base(block) { }
  }

  public partial class AcquaintanceTaskBlock : global::Sungero.Workflow.Blocks.TaskBlockWrapper<global::Sungero.Workflow.TaskBlock>    
  {
    public virtual global::System.Boolean? IsElectronicAcquaintance
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsElectronicAcquaintance"); }
      set { this.SetCustomProperty("IsElectronicAcquaintance", value); }
    }
    public virtual global::System.DateTime? Deadline
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("Deadline"); }
      set { this.SetCustomProperty("Deadline", value); }
    }


    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskPerformersWrapper> _Performers;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskPerformersWrapper> GetAcquaintanceTaskPerformersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.AcquaintanceTaskPerformersCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskPerformersWrapper> Performers
    {
      get 
      {
        if(this._Performers == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("Performers"); 
          this._Performers = this.GetAcquaintanceTaskPerformersCollectionWrapper(items);
        }

        return this._Performers;
      }
    }
    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintanceVersionsWrapper> _AcquaintanceVersions;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintanceVersionsWrapper> GetAcquaintanceTaskAcquaintanceVersionsCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintanceVersionsCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintanceVersionsWrapper> AcquaintanceVersions
    {
      get 
      {
        if(this._AcquaintanceVersions == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("AcquaintanceVersions"); 
          this._AcquaintanceVersions = this.GetAcquaintanceTaskAcquaintanceVersionsCollectionWrapper(items);
        }

        return this._AcquaintanceVersions;
      }
    }
    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintersWrapper> _Acquainters;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintersWrapper> GetAcquaintanceTaskAcquaintersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintersCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskAcquaintersWrapper> Acquainters
    {
      get 
      {
        if(this._Acquainters == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("Acquainters"); 
          this._Acquainters = this.GetAcquaintanceTaskAcquaintersCollectionWrapper(items);
        }

        return this._Acquainters;
      }
    }
    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskExcludedPerformersWrapper> _ExcludedPerformers;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskExcludedPerformersWrapper> GetAcquaintanceTaskExcludedPerformersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.AcquaintanceTaskExcludedPerformersCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.AcquaintanceTaskExcludedPerformersWrapper> ExcludedPerformers
    {
      get 
      {
        if(this._ExcludedPerformers == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("ExcludedPerformers"); 
          this._ExcludedPerformers = this.GetAcquaintanceTaskExcludedPerformersCollectionWrapper(items);
        }

        return this._ExcludedPerformers;
      }
    }



    public AcquaintanceTaskBlock(global::Sungero.Workflow.TaskBlock block) : base(block) { }
  }
}

// ==================================================================
// AcquaintanceTaskChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceTaskPerformersCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<AcquaintanceTaskPerformersWrapper>
  {
    protected override AcquaintanceTaskPerformersWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new AcquaintanceTaskPerformersWrapper(value);
    }

    public AcquaintanceTaskPerformersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class AcquaintanceTaskPerformersWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

    public virtual global::Sungero.CoreEntities.IRecipient Performer
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.CoreEntities.IRecipient>("Performer"); }
      set { this.SetCustomNavigationProperty("Performer", value); }
    }

    public AcquaintanceTaskPerformersWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }
  public class AcquaintanceTaskAcquaintanceVersionsCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<AcquaintanceTaskAcquaintanceVersionsWrapper>
  {
    protected override AcquaintanceTaskAcquaintanceVersionsWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new AcquaintanceTaskAcquaintanceVersionsWrapper(value);
    }

    public AcquaintanceTaskAcquaintanceVersionsCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class AcquaintanceTaskAcquaintanceVersionsWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

        public virtual global::System.Int32? Number
        {
          get { return this.GetCustomProperty<global::System.Int32?>("Number"); }
          set { this.SetCustomProperty("Number", value); }
        }

        public virtual global::System.Boolean? IsMainDocument
        {
          get { return this.GetCustomProperty<global::System.Boolean?>("IsMainDocument"); }
          set { this.SetCustomProperty("IsMainDocument", value); }
        }

        public virtual global::System.Int32? DocumentId
        {
          get { return this.GetCustomProperty<global::System.Int32?>("DocumentId"); }
          set { this.SetCustomProperty("DocumentId", value); }
        }


    public AcquaintanceTaskAcquaintanceVersionsWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }
  public class AcquaintanceTaskAcquaintersCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<AcquaintanceTaskAcquaintersWrapper>
  {
    protected override AcquaintanceTaskAcquaintersWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new AcquaintanceTaskAcquaintersWrapper(value);
    }

    public AcquaintanceTaskAcquaintersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class AcquaintanceTaskAcquaintersWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

    public virtual global::Sungero.Company.IEmployee Acquainter
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Acquainter"); }
      set { this.SetCustomNavigationProperty("Acquainter", value); }
    }

    public AcquaintanceTaskAcquaintersWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }
  public class AcquaintanceTaskExcludedPerformersCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<AcquaintanceTaskExcludedPerformersWrapper>
  {
    protected override AcquaintanceTaskExcludedPerformersWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new AcquaintanceTaskExcludedPerformersWrapper(value);
    }

    public AcquaintanceTaskExcludedPerformersCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class AcquaintanceTaskExcludedPerformersWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

    public virtual global::Sungero.CoreEntities.IRecipient ExcludedPerformer
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.CoreEntities.IRecipient>("ExcludedPerformer"); }
      set { this.SetCustomNavigationProperty("ExcludedPerformer", value); }
    }

    public AcquaintanceTaskExcludedPerformersWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }

}

// ==================================================================
// AcquaintanceTaskRouteHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public partial class AcquaintanceTaskRouteHandlers{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::Sungero.RecordManagement.IAcquaintanceTask _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTask)this.Task; }
    }


              public virtual void StartReviewAssignment2(Sungero.Workflow.IReviewAssignment reviewAssignment)
              {
                
              }

              public virtual void EndBlock3(Sungero.RecordManagement.Server.AcquaintanceAssignmentEndBlockEventArguments e)
              {
                
              }

              public virtual void CompleteAssignment4(Sungero.RecordManagement.IAcquaintanceFinishAssignment assignment, Sungero.RecordManagement.Server.AcquaintanceFinishAssignmentArguments e)
              {
                
              }

              public virtual void EndBlock4(Sungero.RecordManagement.Server.AcquaintanceFinishAssignmentEndBlockEventArguments e)
              {
                
              }


    protected readonly int _schemeVersion;

    public AcquaintanceTaskRouteHandlers(global::Sungero.RecordManagement.IAcquaintanceTask task, int schemeVersion) 
    {
      this.Task = task;
      this._schemeVersion = schemeVersion;
    }


    [global::System.ObsoleteAttribute("Используйте ExtendedSchemeVersions")]
    private static class SchemeVersions
    {
      public static readonly int V1 = 1;
}

    }
}
