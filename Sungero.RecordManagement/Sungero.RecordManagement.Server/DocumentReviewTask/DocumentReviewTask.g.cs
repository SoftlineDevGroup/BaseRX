
// ==================================================================
// DocumentReviewTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class DocumentReviewTaskFilter<T> :
      global::Sungero.Workflow.Server.TaskFilter<T>
      where T : class, global::Sungero.RecordManagement.IDocumentReviewTask
    {
      protected new global::Sungero.RecordManagement.IDocumentReviewTaskFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IDocumentReviewTaskFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public DocumentReviewTaskFilter(global::Sungero.RecordManagement.IDocumentReviewTaskFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected DocumentReviewTaskFilter()
      {
      }
    }
    public class DocumentReviewTaskSearchDialogModel : global::Sungero.Workflow.Server.TaskSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Started { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MaxDeadline { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Addressee { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new DocumentReviewTaskObserversModel Observers { get { return (DocumentReviewTaskObserversModel)base.Observers; } protected set { base.Observers = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public DocumentReviewTaskResolutionObserversModel ResolutionObservers { get; protected set; }

        }

      public class DocumentReviewTaskObserversModel : global::Sungero.Workflow.Server.TaskObserversModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }


      public class DocumentReviewTaskResolutionObserversModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class DocumentReviewTaskFilterForAddressee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IDocumentReviewTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.DocumentReviewTaskAddresseePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AddresseeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentReviewTaskFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DocumentReviewTaskSearchFilterForAddressee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.DocumentReviewTaskAddresseeSearchPropertyFilteringServerHandler<TQueryEntity>().AddresseeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DocumentReviewTaskSearchFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.DocumentReviewTaskFilter<global::Sungero.RecordManagement.IDocumentReviewTask>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.DocumentReviewTaskFilterForAddressee<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IDocumentReviewTask>), "Addressee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.DocumentReviewTaskSearchFilterForAddressee<global::Sungero.CoreEntities.IRecipient>), "Addressee")]


  public class DocumentReviewTask :
    global::Sungero.Workflow.Server.Task, global::Sungero.RecordManagement.IDocumentReviewTask, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4ef03457-8b42-4239-a3c5-d4d05e61f0b6");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.DocumentReviewTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IDocumentReviewTask, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IDocumentReviewTaskState State
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTaskState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskState(this);
    }

    public new virtual global::Sungero.RecordManagement.IDocumentReviewTaskInfo Info
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTaskInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IDocumentReviewTaskAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTaskAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.DocumentReviewTaskAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.DocumentReviewTaskServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers(this);
    }

    private global::System.DateTime? _Deadline;
    public virtual global::System.DateTime? Deadline
    {
      get
      {
        return this._Deadline;
      }

      set
      {
        this.SetPropertyValue("Deadline", this._Deadline, value, (propertyValue) => { this._Deadline = propertyValue; }, this.DeadlineChangedHandler);
      }
    }
    private global::System.Boolean? _NeedDeleteActionItems;
    public virtual global::System.Boolean? NeedDeleteActionItems
    {
      get
      {
        return this._NeedDeleteActionItems;
      }

      set
      {
        this.SetPropertyValue("NeedDeleteActionItems", this._NeedDeleteActionItems, value, (propertyValue) => { this._NeedDeleteActionItems = propertyValue; }, this.NeedDeleteActionItemsChangedHandler);
      }
    }



    private global::System.String _ResolutionText;
    [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
    public virtual global::System.String ResolutionText
    {
      get
      {
        return this._ResolutionText;
      }

      set
      {
        this.SetPropertyValue("ResolutionText", this._ResolutionText, value, (propertyValue) => { this._ResolutionText = propertyValue; }, this.ResolutionTextChangedHandler);
      }
    }





    private global::Sungero.Company.IEmployee _Addressee;
    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get
      {
        return this._Addressee;
      }

      set
      {
        this.SetPropertyValue("Addressee", this._Addressee, value, (propertyValue) => { this._Addressee = propertyValue; }, this.AddresseeChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IDocumentReviewTaskResolutionObservers> _ResolutionObservers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IDocumentReviewTaskResolutionObservers> ResolutionObservers
    {
      get
      {
        if (this._ResolutionObservers == null)
        {
          this._ResolutionObservers = this.CreateResolutionObserversCollection();
          this.SetResolutionObserversEventHandlers();
        }
        return this._ResolutionObservers;
      }

      set
      {
        if (this._ResolutionObservers != null)
          this.UnsetChildCollectionEventHandlers(this._ResolutionObservers);

        this._ResolutionObservers = value;
        this.SetResolutionObserversEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IDocumentReviewTaskResolutionObservers> CreateResolutionObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IDocumentReviewTaskResolutionObservers>() { RootEntity = this };
    }

    private void SetResolutionObserversEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ResolutionObservers, "ResolutionObservers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ResolutionObservers;
      changeNotifier.Added += this.ResolutionObserversAddedHandler;
      changeNotifier.Deleted += this.ResolutionObserversDeletedHandler;
      changeNotifier.Added += this.ResolutionObserversCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ResolutionObserversCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ResolutionObserversCollectionUpdateEventHandler;
    }

    private void ResolutionObserversCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ResolutionObserversChangedHandler();
    }


    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Workflow.ITaskObservers> CreateObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IDocumentReviewTaskObservers>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.DocumentReviewTaskCreatingFromServerHandler((global::Sungero.RecordManagement.IDocumentReviewTask)entitySource, this.Info);
    }

    #region Framework events

    protected void AddresseeChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.DocumentReviewTaskAddresseeChangedEventArgs(this.State.Properties.Addressee, this.Addressee, this);
     ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).AddresseeChanged(args);
    }

    protected void DeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Deadline, this.Deadline, this);
     ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).DeadlineChanged(args);
    }

    protected void ResolutionTextChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.ResolutionText, this.ResolutionText, this);
     ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).ResolutionTextChanged(args);
    }

    protected void ResolutionObserversChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).ResolutionObserversChanged(args);
    }

    protected void NeedDeleteActionItemsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.NeedDeleteActionItems, this.NeedDeleteActionItems, this);
     ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).NeedDeleteActionItemsChanged(args);
    }




    protected virtual global::Sungero.RecordManagement.DocumentReviewTaskResolutionObserversSharedCollectionHandlers CreateResolutionObserversAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.DocumentReviewTaskResolutionObserversSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.DocumentReviewTaskResolutionObserversSharedCollectionHandlers CreateResolutionObserversDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.DocumentReviewTaskResolutionObserversSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ResolutionObserversAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateResolutionObserversAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ResolutionObserversAdded(args);
      }
    }

    protected virtual void ResolutionObserversDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateResolutionObserversDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ResolutionObserversDeleted(args);
      }
    }


    #endregion


    public DocumentReviewTask()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IDocumentReviewTaskDocumentForReviewGroupAttachments DocumentForReviewGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskDocumentForReviewGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IDocumentReviewTaskAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IDocumentReviewTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskOtherGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IDocumentReviewTaskResolutionGroupAttachments ResolutionGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.DocumentReviewTaskResolutionGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).DocumentForReviewGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).ResolutionGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).DocumentForReviewGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).ResolutionGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).DocumentForReviewGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.DocumentReviewTaskSharedHandlers)this.SharedHandlers).ResolutionGroupDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// DocumentReviewTaskHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class DocumentReviewTaskAddresseePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IDocumentReviewTask _obj
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AddresseeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DocumentReviewTaskAddresseePropertyFilteringServerHandler(global::Sungero.RecordManagement.IDocumentReviewTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentReviewTaskAddresseeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AddresseeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DocumentReviewTaskAddresseeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class DocumentReviewTaskFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IDocumentReviewTask
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IDocumentReviewTaskFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IDocumentReviewTaskFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public DocumentReviewTaskFilteringServerHandler(global::Sungero.RecordManagement.IDocumentReviewTaskFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected DocumentReviewTaskFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class DocumentReviewTaskSearchDialogServerHandler : global::Sungero.Workflow.TaskSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.DocumentReviewTaskSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.DocumentReviewTaskSearchDialogModel)this.Dialog;
       }
     }

     public DocumentReviewTaskSearchDialogServerHandler(global::Sungero.RecordManagement.Server.DocumentReviewTaskSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class DocumentReviewTaskServerHandlers : global::Sungero.Workflow.TaskServerHandlers
  {
    private global::Sungero.RecordManagement.IDocumentReviewTask _obj
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTask)this.Entity; }
    }

    public DocumentReviewTaskServerHandlers(global::Sungero.RecordManagement.IDocumentReviewTask entity)
      : base(entity)
    {
    }
  }

  public partial class DocumentReviewTaskCreatingFromServerHandler : global::Sungero.Workflow.TaskCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IDocumentReviewTask _source
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTask)this.Source; }
    }

    private global::Sungero.RecordManagement.IDocumentReviewTaskInfo _info
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTaskInfo)this._Info; }
    }

    public DocumentReviewTaskCreatingFromServerHandler(global::Sungero.RecordManagement.IDocumentReviewTask source, global::Sungero.RecordManagement.IDocumentReviewTaskInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// DocumentReviewTaskEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// DocumentReviewTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class DocumentReviewTaskAccessRights : 
    Sungero.Workflow.Server.TaskAccessRights, Sungero.RecordManagement.IDocumentReviewTaskAccessRights
  {

    public DocumentReviewTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class DocumentReviewTaskTypeAccessRights : 
    Sungero.Workflow.Server.TaskTypeAccessRights, Sungero.RecordManagement.IDocumentReviewTaskAccessRights
  {

    public DocumentReviewTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// DocumentReviewTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class DocumentReviewTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.TaskRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IDocumentReviewTaskRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IDocumentReviewTask 
    {
       public new global::Sungero.RecordManagement.IDocumentReviewTaskAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IDocumentReviewTaskAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IDocumentReviewTaskInfo Info
       {
          get { return (global::Sungero.RecordManagement.IDocumentReviewTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.DocumentReviewTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// DocumentReviewTaskPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// DocumentReviewTaskServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class DocumentReviewTaskFunctions : global::Sungero.Workflow.Server.TaskFunctions
  {
    private global::Sungero.RecordManagement.IDocumentReviewTask _obj
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTask)this.Entity; }
    }

    public DocumentReviewTaskFunctions(global::Sungero.RecordManagement.IDocumentReviewTask entity) : base(entity) { }
  }
}

// ==================================================================
// DocumentReviewTaskFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class DocumentReviewTask
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.String GetStateViewXml(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateViewXml();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask, global::Sungero.Docflow.IOfficialDocument document)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView(document);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  global::System.Nullable<global::Sungero.Core.Enumeration> GetLastAssignmentResult(global::Sungero.RecordManagement.IDocumentReviewTask task)
    {
      return global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions.GetLastAssignmentResult(task);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  void GrantRightForAttachmentsToAssignees(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask, global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> assignees)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
    functions.GrantRightForAttachmentsToAssignees(assignees);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> GetTaskAdditionalAssignees(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
      return functions.GetTaskAdditionalAssignees();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  void UpdateReviewTaskAfterForward(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask, global::Sungero.Company.IEmployee newAddressee)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
    functions.UpdateReviewTaskAfterForward(newAddressee);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    internal static  global::Sungero.CoreEntities.IUser GetClerkToSendActionItem(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
      return functions.GetClerkToSendActionItem();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.DocumentReviewTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void StartActionItemsForDraftResolution(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask, global::Sungero.Workflow.IAssignment parentAssignment)
    {
      var functions = (global::Sungero.RecordManagement.Server.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.ServerFunctions;
    functions.StartActionItemsForDraftResolution(parentAssignment);
    }

    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.RecordManagement.Structures.DocumentReviewTask.StartValidationMessage> GetStartValidationMessages(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.SharedFunctions;
      return functions.GetStartValidationMessages();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions" />
    internal static  global::System.Boolean ValidateDocumentReviewTaskStart(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask, Sungero.Core.IValidationArgs e)
    {
      var functions = (global::Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.SharedFunctions;
      return functions.ValidateDocumentReviewTaskStart(e);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions" />
    internal static  global::System.Boolean IncomingDocumentRegistered(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions.IncomingDocumentRegistered(document);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.RecordManagement.IActionItemExecutionTask> GetDraftOverdueActionItemExecutionTasks(global::Sungero.RecordManagement.IDocumentReviewTask documentReviewTask)
    {
      var functions = (global::Sungero.RecordManagement.Shared.DocumentReviewTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)documentReviewTask).FunctionsContainer.SharedFunctions;
      return functions.GetDraftOverdueActionItemExecutionTasks();
    }

  }
}

// ==================================================================
// DocumentReviewTaskServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class DocumentReviewTaskServerPublicFunctions : global::Sungero.RecordManagement.Server.IDocumentReviewTaskServerPublicFunctions
  {
  }
}

// ==================================================================
// DocumentReviewTaskQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class DocumentReviewTask
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.DocumentReviewTask.DocumentReviewTaskQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// DocumentReviewTaskBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class DocumentReviewTaskArguments: global::Sungero.Workflow.Server.Route.TaskStartEventArguments<DocumentReviewTaskBlock, global::Sungero.Workflow.TaskBlock>
  {
    public DocumentReviewTaskArguments(DocumentReviewTaskBlock block) : base(block) { }
  }

  public class DocumentReviewTaskEndBlockEventArguments: global::Sungero.Workflow.Server.Route.TaskEndBlockEventArguments<DocumentReviewTaskBlock, global::Sungero.Workflow.TaskBlock, Sungero.RecordManagement.IDocumentReviewTask> 
  {
    public DocumentReviewTaskEndBlockEventArguments(DocumentReviewTaskBlock block) : base(block) { }
  }

  public partial class DocumentReviewTaskBlock : global::Sungero.Workflow.Blocks.TaskBlockWrapper<global::Sungero.Workflow.TaskBlock>    
  {
    public virtual global::System.DateTime? Deadline
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("Deadline"); }
      set { this.SetCustomProperty("Deadline", value); }
    }
    public virtual global::System.Boolean? NeedDeleteActionItems
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("NeedDeleteActionItems"); }
      set { this.SetCustomProperty("NeedDeleteActionItems", value); }
    }

    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Addressee"); }
      set { this.SetCustomNavigationProperty("Addressee", value); }
    }


    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.DocumentReviewTaskResolutionObserversWrapper> _ResolutionObservers;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.DocumentReviewTaskResolutionObserversWrapper> GetDocumentReviewTaskResolutionObserversCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.DocumentReviewTaskResolutionObserversCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.DocumentReviewTaskResolutionObserversWrapper> ResolutionObservers
    {
      get 
      {
        if(this._ResolutionObservers == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("ResolutionObservers"); 
          this._ResolutionObservers = this.GetDocumentReviewTaskResolutionObserversCollectionWrapper(items);
        }

        return this._ResolutionObservers;
      }
    }



    public DocumentReviewTaskBlock(global::Sungero.Workflow.TaskBlock block) : base(block) { }
  }
}

// ==================================================================
// DocumentReviewTaskChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class DocumentReviewTaskResolutionObserversCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<DocumentReviewTaskResolutionObserversWrapper>
  {
    protected override DocumentReviewTaskResolutionObserversWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new DocumentReviewTaskResolutionObserversWrapper(value);
    }

    public DocumentReviewTaskResolutionObserversCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class DocumentReviewTaskResolutionObserversWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

    public virtual global::Sungero.CoreEntities.IRecipient Observer
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.CoreEntities.IRecipient>("Observer"); }
      set { this.SetCustomNavigationProperty("Observer", value); }
    }

    public DocumentReviewTaskResolutionObserversWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }

}

// ==================================================================
// DocumentReviewTaskRouteHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public partial class DocumentReviewTaskRouteHandlers{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::Sungero.RecordManagement.IDocumentReviewTask _obj
    {
      get { return (global::Sungero.RecordManagement.IDocumentReviewTask)this.Task; }
    }


    protected readonly int _schemeVersion;

    public DocumentReviewTaskRouteHandlers(global::Sungero.RecordManagement.IDocumentReviewTask task, int schemeVersion) 
    {
      this.Task = task;
      this._schemeVersion = schemeVersion;
    }


    [global::System.ObsoleteAttribute("Используйте ExtendedSchemeVersions")]
    private static class SchemeVersions
    {
      public static readonly int V1 = 1;
      public static readonly int V3 = 3;
}

    }
}
