
// ==================================================================
// ActionItemObserversNotification.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class ActionItemObserversNotificationFilter<T> :
      global::Sungero.Workflow.Server.NoticeFilter<T>
      where T : class, global::Sungero.RecordManagement.IActionItemObserversNotification
    {
      protected new global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ActionItemObserversNotificationFilter(global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected ActionItemObserversNotificationFilter()
      {
      }
    }
    public class ActionItemObserversNotificationSearchDialogModel : global::Sungero.Workflow.Server.NoticeSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Performer { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }




        }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.ActionItemObserversNotificationFilter<global::Sungero.RecordManagement.IActionItemObserversNotification>))]

  public class ActionItemObserversNotification :
    global::Sungero.Workflow.Server.Notice, global::Sungero.RecordManagement.IActionItemObserversNotification, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("ab194340-550c-41c7-badd-adc2ee208741");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemObserversNotification.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IActionItemObserversNotification, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IActionItemObserversNotificationState State
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationState(this);
    }

    public new virtual global::Sungero.RecordManagement.IActionItemObserversNotificationInfo Info
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IActionItemObserversNotificationAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.ActionItemObserversNotificationAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.ActionItemObserversNotificationFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.ActionItemObserversNotificationServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers(this);
    }










    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.ActionItemObserversNotificationCreatingFromServerHandler((global::Sungero.RecordManagement.IActionItemObserversNotification)entitySource, this.Info);
    }

    #region Framework events



    #endregion


    public ActionItemObserversNotification()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IActionItemObserversNotificationAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemObserversNotificationDocumentsGroupAttachments DocumentsGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationDocumentsGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemObserversNotificationOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationOtherGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemObserversNotificationResultGroupAttachments ResultGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemObserversNotificationResultGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).DocumentsGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).ResultGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).DocumentsGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).ResultGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).DocumentsGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemObserversNotificationSharedHandlers)this.SharedHandlers).ResultGroupDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// ActionItemObserversNotificationHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class ActionItemObserversNotificationFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IActionItemObserversNotification
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public ActionItemObserversNotificationFilteringServerHandler(global::Sungero.RecordManagement.IActionItemObserversNotificationFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected ActionItemObserversNotificationFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class ActionItemObserversNotificationSearchDialogServerHandler : global::Sungero.Workflow.NoticeSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.ActionItemObserversNotificationSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.ActionItemObserversNotificationSearchDialogModel)this.Dialog;
       }
     }

     public ActionItemObserversNotificationSearchDialogServerHandler(global::Sungero.RecordManagement.Server.ActionItemObserversNotificationSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ActionItemObserversNotificationServerHandlers : global::Sungero.Workflow.NoticeServerHandlers
  {
    private global::Sungero.RecordManagement.IActionItemObserversNotification _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotification)this.Entity; }
    }

    public ActionItemObserversNotificationServerHandlers(global::Sungero.RecordManagement.IActionItemObserversNotification entity)
      : base(entity)
    {
    }
  }

  public partial class ActionItemObserversNotificationCreatingFromServerHandler : global::Sungero.Workflow.NoticeCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IActionItemObserversNotification _source
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotification)this.Source; }
    }

    private global::Sungero.RecordManagement.IActionItemObserversNotificationInfo _info
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationInfo)this._Info; }
    }

    public ActionItemObserversNotificationCreatingFromServerHandler(global::Sungero.RecordManagement.IActionItemObserversNotification source, global::Sungero.RecordManagement.IActionItemObserversNotificationInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ActionItemObserversNotificationEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// ActionItemObserversNotificationAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemObserversNotificationAccessRights : 
    Sungero.Workflow.Server.NoticeAccessRights, Sungero.RecordManagement.IActionItemObserversNotificationAccessRights
  {

    public ActionItemObserversNotificationAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ActionItemObserversNotificationTypeAccessRights : 
    Sungero.Workflow.Server.NoticeTypeAccessRights, Sungero.RecordManagement.IActionItemObserversNotificationAccessRights
  {

    public ActionItemObserversNotificationTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ActionItemObserversNotificationRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class ActionItemObserversNotificationRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.NoticeRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IActionItemObserversNotificationRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IActionItemObserversNotification 
    {
       public new global::Sungero.RecordManagement.IActionItemObserversNotificationAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IActionItemObserversNotificationInfo Info
       {
          get { return (global::Sungero.RecordManagement.IActionItemObserversNotificationInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.ActionItemObserversNotificationTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ActionItemObserversNotificationPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// ActionItemObserversNotificationServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class ActionItemObserversNotificationFunctions : global::Sungero.Workflow.Server.NoticeFunctions
  {
    private global::Sungero.RecordManagement.IActionItemObserversNotification _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemObserversNotification)this.Entity; }
    }

    public ActionItemObserversNotificationFunctions(global::Sungero.RecordManagement.IActionItemObserversNotification entity) : base(entity) { }
  }
}

// ==================================================================
// ActionItemObserversNotificationFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class ActionItemObserversNotification
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemObserversNotificationFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IActionItemObserversNotification actionItemObserversNotification)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemObserversNotificationFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemObserversNotification).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }

  }
}

// ==================================================================
// ActionItemObserversNotificationServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemObserversNotificationServerPublicFunctions : global::Sungero.RecordManagement.Server.IActionItemObserversNotificationServerPublicFunctions
  {
  }
}

// ==================================================================
// ActionItemObserversNotificationQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class ActionItemObserversNotification
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.ActionItemObserversNotification.ActionItemObserversNotificationQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ActionItemObserversNotificationBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemObserversNotificationArguments: global::Sungero.Workflow.Server.Route.NoticeStartEventArguments<ActionItemObserversNotificationBlock, global::Sungero.Workflow.NoticeBlock>
  {
    public ActionItemObserversNotificationArguments(ActionItemObserversNotificationBlock block) : base(block) { }
  }

  public class ActionItemObserversNotificationEndBlockEventArguments: global::Sungero.Workflow.Server.Route.NoticeEndBlockEventArguments<ActionItemObserversNotificationBlock, global::Sungero.Workflow.NoticeBlock, Sungero.RecordManagement.IActionItemObserversNotification> 
  {
    public ActionItemObserversNotificationEndBlockEventArguments(ActionItemObserversNotificationBlock block) : base(block) { }
  }

  public partial class ActionItemObserversNotificationBlock : global::Sungero.Workflow.Blocks.NoticeBlockWrapper<global::Sungero.Workflow.NoticeBlock>    
  {



    public ActionItemObserversNotificationBlock(global::Sungero.Workflow.NoticeBlock block) : base(block) { }
  }
}

// ==================================================================
// ActionItemObserversNotificationChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}
