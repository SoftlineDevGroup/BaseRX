
// ==================================================================
// OutgoingLetter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OutgoingLetterFilter<T> :
      global::Sungero.Docflow.Server.OutgoingDocumentBaseFilter<T>
      where T : class, global::Sungero.RecordManagement.IOutgoingLetter
    {
      private global::Sungero.RecordManagement.IOutgoingLetterFilterState filter
      {
        get
        {
          return (Sungero.RecordManagement.IOutgoingLetterFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public OutgoingLetterFilter(global::Sungero.RecordManagement.IOutgoingLetterFilterState filter)
      : base(filter)
      {
      }

      protected OutgoingLetterFilter()
      {
      }
    }
    public class OutgoingLetterSearchDialogModel : global::Sungero.Docflow.Server.OutgoingDocumentBaseSearchDialogModel
        {
                  public override global::System.Boolean? IsManyAddressees { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> PreparedBy { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Assignee { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IIncomingDocumentBase> InResponseTo { get; protected set; }




                   public new OutgoingLetterVersionsModel Versions { get { return (OutgoingLetterVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new OutgoingLetterTrackingModel Tracking { get { return (OutgoingLetterTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }
                   public new OutgoingLetterAddresseesModel Addressees { get { return (OutgoingLetterAddresseesModel)base.Addressees; } protected set { base.Addressees = value; } }

        }

      public class OutgoingLetterVersionsModel : global::Sungero.Docflow.Server.OutgoingDocumentBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class OutgoingLetterTrackingModel : global::Sungero.Docflow.Server.OutgoingDocumentBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }
      public class OutgoingLetterAddresseesModel : global::Sungero.Docflow.Server.OutgoingDocumentBaseAddresseesModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }


                      public override global::System.Collections.Generic.IEnumerable<global::Sungero.Parties.ICounterparty> Correspondent { get; protected set; }
                      public override global::System.Collections.Generic.IEnumerable<global::Sungero.Parties.IContact> Addressee { get; protected set; }



         }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.OutgoingLetterFilter<global::Sungero.RecordManagement.IOutgoingLetter>))]

  public class OutgoingLetter :
    global::Sungero.Docflow.Server.OutgoingDocumentBase, global::Sungero.RecordManagement.IOutgoingLetter, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("d1d2a452-7732-4ba8-b199-0a4dc78898ac");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.OutgoingLetter.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IOutgoingLetter, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.RecordManagement.IOutgoingLetterState State
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetterState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.OutgoingLetterState(this);
    }

    public new virtual global::Sungero.RecordManagement.IOutgoingLetterInfo Info
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetterInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IOutgoingLetterAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetterAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.OutgoingLetterAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.OutgoingLetterFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.OutgoingLetterFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.OutgoingLetterServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.OutgoingLetterSharedHandlers(this);
    }









    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IOutgoingLetterVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IOutgoingLetterTracking>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOutgoingDocumentBaseAddressees> CreateAddresseesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IOutgoingLetterAddressees>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.OutgoingLetterCreatingFromServerHandler((global::Sungero.RecordManagement.IOutgoingLetter)entitySource, this.Info);
    }

    #region Framework events






    #endregion


    public OutgoingLetter()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.OutgoingLetterConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// OutgoingLetterHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class OutgoingLetterFilteringServerHandler<T>
    : global::Sungero.Docflow.OutgoingDocumentBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IOutgoingLetter
  {
    private global::Sungero.RecordManagement.IOutgoingLetterFilterState _filter
    {
      get
      {
        return (Sungero.RecordManagement.IOutgoingLetterFilterState)this.Filter;
      }
    }

    public OutgoingLetterFilteringServerHandler(global::Sungero.RecordManagement.IOutgoingLetterFilterState filter)
    : base(filter)
    {
    }

    protected OutgoingLetterFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> DocumentRegisterFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentRegisterFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentKindFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> CounterpartyFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.CounterpartyFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }


  }

  public partial class OutgoingLetterSearchDialogServerHandler : global::Sungero.Docflow.OutgoingDocumentBaseSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.OutgoingLetterSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.OutgoingLetterSearchDialogModel)this.Dialog;
       }
     }

     public OutgoingLetterSearchDialogServerHandler(global::Sungero.RecordManagement.Server.OutgoingLetterSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class OutgoingLetterServerHandlers : global::Sungero.Docflow.OutgoingDocumentBaseServerHandlers
  {
    private global::Sungero.RecordManagement.IOutgoingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetter)this.Entity; }
    }

    public OutgoingLetterServerHandlers(global::Sungero.RecordManagement.IOutgoingLetter entity)
      : base(entity)
    {
    }
  }

  public partial class OutgoingLetterCreatingFromServerHandler : global::Sungero.Docflow.OutgoingDocumentBaseCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IOutgoingLetter _source
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetter)this.Source; }
    }

    private global::Sungero.RecordManagement.IOutgoingLetterInfo _info
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetterInfo)this._Info; }
    }

    public OutgoingLetterCreatingFromServerHandler(global::Sungero.RecordManagement.IOutgoingLetter source, global::Sungero.RecordManagement.IOutgoingLetterInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// OutgoingLetterEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// OutgoingLetterAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class OutgoingLetterAccessRights : 
    Sungero.Docflow.Server.OutgoingDocumentBaseAccessRights, Sungero.RecordManagement.IOutgoingLetterAccessRights
  {

    public OutgoingLetterAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class OutgoingLetterTypeAccessRights : 
    Sungero.Docflow.Server.OutgoingDocumentBaseTypeAccessRights, Sungero.RecordManagement.IOutgoingLetterAccessRights
  {

    public OutgoingLetterTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// OutgoingLetterRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OutgoingLetterRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.OutgoingDocumentBaseRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IOutgoingLetterRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IOutgoingLetter 
    {
       public new global::Sungero.RecordManagement.IOutgoingLetterAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IOutgoingLetterAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IOutgoingLetterInfo Info
       {
          get { return (global::Sungero.RecordManagement.IOutgoingLetterInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.OutgoingLetterTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// OutgoingLetterPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OutgoingLetterDocumentRegisterPanelNavigationFilter : global::Sungero.Docflow.Server.OutgoingDocumentBaseDocumentRegisterPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOutgoingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentRegister>)query;
        var typedState = (global::Sungero.RecordManagement.IOutgoingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OutgoingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentRegisterFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentRegister>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOutgoingLetter>(query);
      }
    }

    public class OutgoingLetterDocumentKindPanelNavigationFilter : global::Sungero.Docflow.Server.OutgoingDocumentBaseDocumentKindPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOutgoingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.RecordManagement.IOutgoingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OutgoingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOutgoingLetter>(query);
      }
    }

    public class OutgoingLetterCounterpartyPanelNavigationFilter : global::Sungero.Docflow.Server.OutgoingDocumentBaseCounterpartyPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOutgoingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.RecordManagement.IOutgoingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OutgoingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.CounterpartyFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOutgoingLetter>(query);
      }
    }

    public class OutgoingLetterDepartmentPanelNavigationFilter : global::Sungero.Docflow.Server.OutgoingDocumentBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOutgoingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.RecordManagement.IOutgoingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OutgoingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOutgoingLetter>(query);
      }
    }

}

// ==================================================================
// OutgoingLetterServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class OutgoingLetterFunctions : global::Sungero.Docflow.Server.OutgoingDocumentBaseFunctions
  {
    private global::Sungero.RecordManagement.IOutgoingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetter)this.Entity; }
    }

    public OutgoingLetterFunctions(global::Sungero.RecordManagement.IOutgoingLetter entity) : base(entity) { }
  }
}

// ==================================================================
// OutgoingLetterFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class OutgoingLetter
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.OutgoingLetterFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.RecordManagement.IOutgoingLetter CreateCoverLetter(global::Sungero.Docflow.IOfficialDocument document)
    {
      return global::Sungero.RecordManagement.Server.OutgoingLetterFunctions.CreateCoverLetter(document);
    }

    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.OutgoingLetterFunctions" />
    internal static  void FillName(global::Sungero.RecordManagement.IOutgoingLetter outgoingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Shared.OutgoingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)outgoingLetter).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.OutgoingLetterFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.RecordManagement.IOutgoingLetter outgoingLetter, global::System.Boolean isEnabled, global::System.Boolean isRepeatRegister)
    {
      var functions = (global::Sungero.RecordManagement.Shared.OutgoingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)outgoingLetter).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, isRepeatRegister);
    }

  }
}

// ==================================================================
// OutgoingLetterServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class OutgoingLetterServerPublicFunctions : global::Sungero.RecordManagement.Server.IOutgoingLetterServerPublicFunctions
  {
  }
}

// ==================================================================
// OutgoingLetterQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class OutgoingLetter
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.OutgoingLetter.OutgoingLetterQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// OutgoingLetterServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class OutgoingLetterConvertingFromServerHandler : global::Sungero.Docflow.OutgoingDocumentBaseConvertingFromServerHandler
  { 
    private global::Sungero.RecordManagement.IOutgoingLetterInfo _info
    {
      get { return (global::Sungero.RecordManagement.IOutgoingLetterInfo)this._Info; }
    }

    public OutgoingLetterConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.RecordManagement.IOutgoingLetterInfo info)
      : base(source, info)
    {
    }
  }
}
