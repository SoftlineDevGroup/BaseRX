
// ==================================================================
// ActionItemExecutionTask.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class ActionItemExecutionTaskFilter<T> :
      global::Sungero.Workflow.Server.TaskFilter<T>
      where T : class, global::Sungero.RecordManagement.IActionItemExecutionTask
    {
      protected new global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public ActionItemExecutionTaskFilter(global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected ActionItemExecutionTaskFilter()
      {
      }
    }
    public class ActionItemExecutionTaskSearchDialogModel : global::Sungero.Workflow.Server.TaskSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Started { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> MaxDeadline { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Assignee { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> FinalDeadline { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new ActionItemExecutionTaskObserversModel Observers { get { return (ActionItemExecutionTaskObserversModel)base.Observers; } protected set { base.Observers = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ActionItemExecutionTaskCoAssigneesModel CoAssignees { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ActionItemExecutionTaskActionItemPartsModel ActionItemParts { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ActionItemExecutionTaskActionItemObserversModel ActionItemObservers { get; protected set; }

        }

      public class ActionItemExecutionTaskObserversModel : global::Sungero.Workflow.Server.TaskObserversModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }


      public class ActionItemExecutionTaskCoAssigneesModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class ActionItemExecutionTaskActionItemPartsModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class ActionItemExecutionTaskActionItemObserversModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class ActionItemExecutionTaskFilterForSupervisor<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IActionItemExecutionTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskSupervisorPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).SupervisorFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskFilterForSupervisor(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ActionItemExecutionTaskSearchFilterForSupervisor<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskSupervisorSearchPropertyFilteringServerHandler<TQueryEntity>().SupervisorSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskSearchFilterForSupervisor(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ActionItemExecutionTaskFilterForAssignedBy<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IActionItemExecutionTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskAssignedByPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AssignedByFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskFilterForAssignedBy(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ActionItemExecutionTaskSearchFilterForAssignedBy<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskAssignedBySearchPropertyFilteringServerHandler<TQueryEntity>().AssignedBySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskSearchFilterForAssignedBy(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ActionItemExecutionTaskFilterForAssignee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IActionItemExecutionTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskAssigneePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AssigneeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskFilterForAssignee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ActionItemExecutionTaskSearchFilterForAssignee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.ActionItemExecutionTaskAssigneeSearchPropertyFilteringServerHandler<TQueryEntity>().AssigneeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ActionItemExecutionTaskSearchFilterForAssignee(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFilter<global::Sungero.RecordManagement.IActionItemExecutionTask>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFilterForSupervisor<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IActionItemExecutionTask>), "Supervisor")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchFilterForSupervisor<global::Sungero.CoreEntities.IRecipient>), "Supervisor")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFilterForAssignedBy<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IActionItemExecutionTask>), "AssignedBy")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchFilterForAssignedBy<global::Sungero.CoreEntities.IRecipient>), "AssignedBy")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFilterForAssignee<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IActionItemExecutionTask>), "Assignee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchFilterForAssignee<global::Sungero.CoreEntities.IRecipient>), "Assignee")]


  public class ActionItemExecutionTask :
    global::Sungero.Workflow.Server.Task, global::Sungero.RecordManagement.IActionItemExecutionTask, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("c290b098-12c7-487d-bb38-73e2c98f9789");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemExecutionTask.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IActionItemExecutionTask, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IActionItemExecutionTaskState State
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskState(this);
    }

    public new virtual global::Sungero.RecordManagement.IActionItemExecutionTaskInfo Info
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IActionItemExecutionTaskAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers(this);
    }

    private global::System.DateTime? _Deadline;
    public virtual global::System.DateTime? Deadline
    {
      get
      {
        return this._Deadline;
      }

      set
      {
        this.SetPropertyValue("Deadline", this._Deadline, value, (propertyValue) => { this._Deadline = propertyValue; }, this.DeadlineChangedHandler);
      }
    }
    private global::System.Boolean? _IsCompoundActionItem;
    public virtual global::System.Boolean? IsCompoundActionItem
    {
      get
      {
        return this._IsCompoundActionItem;
      }

      set
      {
        this.SetPropertyValue("IsCompoundActionItem", this._IsCompoundActionItem, value, (propertyValue) => { this._IsCompoundActionItem = propertyValue; }, this.IsCompoundActionItemChangedHandler);
      }
    }
    private global::System.String _ActionItem;
    public virtual global::System.String ActionItem
    {
      get
      {
        return this._ActionItem;
      }

      set
      {
        this.SetPropertyValue("ActionItem", this._ActionItem, value, (propertyValue) => { this._ActionItem = propertyValue; }, this.ActionItemChangedHandler);
      }
    }
    private global::System.DateTime? _ActualDate;
    public virtual global::System.DateTime? ActualDate
    {
      get
      {
        return this._ActualDate;
      }

      set
      {
        this.SetPropertyValue("ActualDate", this._ActualDate, value, (propertyValue) => { this._ActualDate = propertyValue; }, this.ActualDateChangedHandler);
      }
    }
    private global::System.Boolean? _IsUnderControl;
    public virtual global::System.Boolean? IsUnderControl
    {
      get
      {
        return this._IsUnderControl;
      }

      set
      {
        this.SetPropertyValue("IsUnderControl", this._IsUnderControl, value, (propertyValue) => { this._IsUnderControl = propertyValue; }, this.IsUnderControlChangedHandler);
      }
    }
    private global::System.Boolean? _IsDraftResolution;
    public virtual global::System.Boolean? IsDraftResolution
    {
      get
      {
        return this._IsDraftResolution;
      }

      set
      {
        this.SetPropertyValue("IsDraftResolution", this._IsDraftResolution, value, (propertyValue) => { this._IsDraftResolution = propertyValue; }, this.IsDraftResolutionChangedHandler);
      }
    }
    private global::System.DateTime? _FinalDeadline;
    public virtual global::System.DateTime? FinalDeadline
    {
      get
      {
        return this._FinalDeadline;
      }

      set
      {
        this.SetPropertyValue("FinalDeadline", this._FinalDeadline, value, (propertyValue) => { this._FinalDeadline = propertyValue; }, this.FinalDeadlineChangedHandler);
      }
    }



    private global::System.String _AbortingReason;
    [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
    public virtual global::System.String AbortingReason
    {
      get
      {
        return this._AbortingReason;
      }

      set
      {
        this.SetPropertyValue("AbortingReason", this._AbortingReason, value, (propertyValue) => { this._AbortingReason = propertyValue; }, this.AbortingReasonChangedHandler);
      }
    }
    private global::System.String _Report;
    [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
    public virtual global::System.String Report
    {
      get
      {
        return this._Report;
      }

      set
      {
        this.SetPropertyValue("Report", this._Report, value, (propertyValue) => { this._Report = propertyValue; }, this.ReportChangedHandler);
      }
    }
    private global::System.String _ReportNote;
    [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
    public virtual global::System.String ReportNote
    {
      get
      {
        return this._ReportNote;
      }

      set
      {
        this.SetPropertyValue("ReportNote", this._ReportNote, value, (propertyValue) => { this._ReportNote = propertyValue; }, this.ReportNoteChangedHandler);
      }
    }




    private static global::Sungero.Domain.Shared.EnumerationItems _ExecutionStateItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.RecordManagement.ActionItemExecutionTask.ExecutionState),
      typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTask),
      "ExecutionState");

    public static global::Sungero.Domain.Shared.EnumerationItems ExecutionStateItems
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemExecutionTask._ExecutionStateItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems ExecutionStateAllowedItems
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemExecutionTask.ExecutionStateItems; }
    }

    private global::Sungero.Core.Enumeration? _ExecutionState;

    public virtual global::Sungero.Core.Enumeration? ExecutionState
    {
      get { return this._ExecutionState; }
      set { this.SetEnumPropertyValue("ExecutionState", this._ExecutionState, value, (propertyValue) => { this._ExecutionState = propertyValue; }, this.ExecutionStateChangedHandler, this.ExecutionStateAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _ActionItemTypeItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.RecordManagement.ActionItemExecutionTask.ActionItemType),
      typeof(global::Sungero.RecordManagement.Server.ActionItemExecutionTask),
      "ActionItemType");

    public static global::Sungero.Domain.Shared.EnumerationItems ActionItemTypeItems
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemExecutionTask._ActionItemTypeItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems ActionItemTypeAllowedItems
    {
      get { return global::Sungero.RecordManagement.Server.ActionItemExecutionTask.ActionItemTypeItems; }
    }

    private global::Sungero.Core.Enumeration? _ActionItemType;

    public virtual global::Sungero.Core.Enumeration? ActionItemType
    {
      get { return this._ActionItemType; }
      set { this.SetEnumPropertyValue("ActionItemType", this._ActionItemType, value, (propertyValue) => { this._ActionItemType = propertyValue; }, this.ActionItemTypeChangedHandler, this.ActionItemTypeAllowedItems); }
    }


    private global::Sungero.Company.IEmployee _Supervisor;
    public virtual global::Sungero.Company.IEmployee Supervisor
    {
      get
      {
        return this._Supervisor;
      }

      set
      {
        this.SetPropertyValue("Supervisor", this._Supervisor, value, (propertyValue) => { this._Supervisor = propertyValue; }, this.SupervisorChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _AssignedBy;
    public virtual global::Sungero.Company.IEmployee AssignedBy
    {
      get
      {
        return this._AssignedBy;
      }

      set
      {
        this.SetPropertyValue("AssignedBy", this._AssignedBy, value, (propertyValue) => { this._AssignedBy = propertyValue; }, this.AssignedByChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Assignee;
    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get
      {
        return this._Assignee;
      }

      set
      {
        this.SetPropertyValue("Assignee", this._Assignee, value, (propertyValue) => { this._Assignee = propertyValue; }, this.AssigneeChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskCoAssignees> _CoAssignees;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskCoAssignees> CoAssignees
    {
      get
      {
        if (this._CoAssignees == null)
        {
          this._CoAssignees = this.CreateCoAssigneesCollection();
          this.SetCoAssigneesEventHandlers();
        }
        return this._CoAssignees;
      }

      set
      {
        if (this._CoAssignees != null)
          this.UnsetChildCollectionEventHandlers(this._CoAssignees);

        this._CoAssignees = value;
        this.SetCoAssigneesEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskCoAssignees> CreateCoAssigneesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskCoAssignees>() { RootEntity = this };
    }

    private void SetCoAssigneesEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._CoAssignees, "CoAssignees");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._CoAssignees;
      changeNotifier.Added += this.CoAssigneesAddedHandler;
      changeNotifier.Deleted += this.CoAssigneesDeletedHandler;
      changeNotifier.Added += this.CoAssigneesCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.CoAssigneesCollectionUpdateEventHandler;
      changeNotifier.Updated += this.CoAssigneesCollectionUpdateEventHandler;
    }

    private void CoAssigneesCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.CoAssigneesChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemParts> _ActionItemParts;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemParts> ActionItemParts
    {
      get
      {
        if (this._ActionItemParts == null)
        {
          this._ActionItemParts = this.CreateActionItemPartsCollection();
          this.SetActionItemPartsEventHandlers();
        }
        return this._ActionItemParts;
      }

      set
      {
        if (this._ActionItemParts != null)
          this.UnsetChildCollectionEventHandlers(this._ActionItemParts);

        this._ActionItemParts = value;
        this.SetActionItemPartsEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemParts> CreateActionItemPartsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemParts>() { RootEntity = this };
    }

    private void SetActionItemPartsEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ActionItemParts, "ActionItemParts");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ActionItemParts;
      changeNotifier.Added += this.ActionItemPartsAddedHandler;
      changeNotifier.Deleted += this.ActionItemPartsDeletedHandler;
      changeNotifier.Added += this.ActionItemPartsCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ActionItemPartsCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ActionItemPartsCollectionUpdateEventHandler;
    }

    private void ActionItemPartsCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ActionItemPartsChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemObservers> _ActionItemObservers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemObservers> ActionItemObservers
    {
      get
      {
        if (this._ActionItemObservers == null)
        {
          this._ActionItemObservers = this.CreateActionItemObserversCollection();
          this.SetActionItemObserversEventHandlers();
        }
        return this._ActionItemObservers;
      }

      set
      {
        if (this._ActionItemObservers != null)
          this.UnsetChildCollectionEventHandlers(this._ActionItemObservers);

        this._ActionItemObservers = value;
        this.SetActionItemObserversEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemObservers> CreateActionItemObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskActionItemObservers>() { RootEntity = this };
    }

    private void SetActionItemObserversEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ActionItemObservers, "ActionItemObservers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ActionItemObservers;
      changeNotifier.Added += this.ActionItemObserversAddedHandler;
      changeNotifier.Deleted += this.ActionItemObserversDeletedHandler;
      changeNotifier.Added += this.ActionItemObserversCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ActionItemObserversCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ActionItemObserversCollectionUpdateEventHandler;
    }

    private void ActionItemObserversCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ActionItemObserversChangedHandler();
    }


    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Workflow.ITaskObservers> CreateObserversCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IActionItemExecutionTaskObservers>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskCreatingFromServerHandler((global::Sungero.RecordManagement.IActionItemExecutionTask)entitySource, this.Info);
    }

    #region Framework events

    protected void DeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Deadline, this.Deadline, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).DeadlineChanged(args);
    }

    protected void SupervisorChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskSupervisorChangedEventArgs(this.State.Properties.Supervisor, this.Supervisor, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).SupervisorChanged(args);
    }

    protected void IsCompoundActionItemChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsCompoundActionItem, this.IsCompoundActionItem, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).IsCompoundActionItemChanged(args);
    }

    protected void CoAssigneesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).CoAssigneesChanged(args);
    }

    protected void ActionItemPartsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ActionItemPartsChanged(args);
    }

    protected void ActionItemChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ActionItem, this.ActionItem, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ActionItemChanged(args);
    }

    protected void AssignedByChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskAssignedByChangedEventArgs(this.State.Properties.AssignedBy, this.AssignedBy, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AssignedByChanged(args);
    }

    protected void AbortingReasonChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.AbortingReason, this.AbortingReason, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AbortingReasonChanged(args);
    }

    protected void AssigneeChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskAssigneeChangedEventArgs(this.State.Properties.Assignee, this.Assignee, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AssigneeChanged(args);
    }

    protected void ExecutionStateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ExecutionState, this.ExecutionState, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ExecutionStateChanged(args);
    }

    protected void ReportChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.Report, this.Report, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ReportChanged(args);
    }

    protected void ActualDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ActualDate, this.ActualDate, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ActualDateChanged(args);
    }

    protected void ReportNoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.ReportNote, this.ReportNote, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ReportNoteChanged(args);
    }

    protected void IsUnderControlChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsUnderControl, this.IsUnderControl, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).IsUnderControlChanged(args);
    }

    protected void ActionItemTypeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ActionItemType, this.ActionItemType, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ActionItemTypeChanged(args);
    }

    protected void ActionItemObserversChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ActionItemObserversChanged(args);
    }

    protected void IsDraftResolutionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsDraftResolution, this.IsDraftResolution, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).IsDraftResolutionChanged(args);
    }

    protected void FinalDeadlineChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.FinalDeadline, this.FinalDeadline, this);
     ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).FinalDeadlineChanged(args);
    }




    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskCoAssigneesSharedCollectionHandlers CreateCoAssigneesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskCoAssigneesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskCoAssigneesSharedCollectionHandlers CreateCoAssigneesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskCoAssigneesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void CoAssigneesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateCoAssigneesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.CoAssigneesAdded(args);
      }
    }

    protected virtual void CoAssigneesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateCoAssigneesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.CoAssigneesDeleted(args);
      }
    }


    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemPartsSharedCollectionHandlers CreateActionItemPartsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemPartsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemPartsSharedCollectionHandlers CreateActionItemPartsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemPartsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ActionItemPartsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateActionItemPartsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ActionItemPartsAdded(args);
      }
    }

    protected virtual void ActionItemPartsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateActionItemPartsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ActionItemPartsDeleted(args);
      }
    }


    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemObserversSharedCollectionHandlers CreateActionItemObserversAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemObserversSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemObserversSharedCollectionHandlers CreateActionItemObserversDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.RecordManagement.ActionItemExecutionTaskActionItemObserversSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ActionItemObserversAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateActionItemObserversAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ActionItemObserversAdded(args);
      }
    }

    protected virtual void ActionItemObserversDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateActionItemObserversDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ActionItemObserversDeleted(args);
      }
    }


    #endregion


    public ActionItemExecutionTask()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IActionItemExecutionTaskDocumentsGroupAttachments DocumentsGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskDocumentsGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemExecutionTaskAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemExecutionTaskOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskOtherGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IActionItemExecutionTaskResultGroupAttachments ResultGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskResultGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).DocumentsGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ResultGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).DocumentsGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ResultGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentsGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).DocumentsGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResultGroup")
      {
        ((global::Sungero.RecordManagement.ActionItemExecutionTaskSharedHandlers)this.SharedHandlers).ResultGroupDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// ActionItemExecutionTaskHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class ActionItemExecutionTaskSupervisorPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> SupervisorFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ActionItemExecutionTaskSupervisorPropertyFilteringServerHandler(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
      : base(entity)
    {
    }
  }

  public partial class ActionItemExecutionTaskSupervisorSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> SupervisorSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ActionItemExecutionTaskSupervisorSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ActionItemExecutionTaskAssignedByPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Entity; }
    }

    public ActionItemExecutionTaskAssignedByPropertyFilteringServerHandler(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
      : base(entity)
    {
    }
  }

  public partial class ActionItemExecutionTaskAssignedBySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AssignedBySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ActionItemExecutionTaskAssignedBySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ActionItemExecutionTaskAssigneePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AssigneeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ActionItemExecutionTaskAssigneePropertyFilteringServerHandler(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
      : base(entity)
    {
    }
  }

  public partial class ActionItemExecutionTaskAssigneeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AssigneeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ActionItemExecutionTaskAssigneeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ActionItemExecutionTaskFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IActionItemExecutionTask
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public ActionItemExecutionTaskFilteringServerHandler(global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected ActionItemExecutionTaskFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> AuthorFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> AssigneeFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> SupervisorFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class ActionItemExecutionTaskSearchDialogServerHandler : global::Sungero.Workflow.TaskSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchDialogModel)this.Dialog;
       }
     }

     public ActionItemExecutionTaskSearchDialogServerHandler(global::Sungero.RecordManagement.Server.ActionItemExecutionTaskSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ActionItemExecutionTaskServerHandlers : global::Sungero.Workflow.TaskServerHandlers
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Entity; }
    }

    public ActionItemExecutionTaskServerHandlers(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
      : base(entity)
    {
    }
  }

  public partial class ActionItemExecutionTaskCreatingFromServerHandler : global::Sungero.Workflow.TaskCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _source
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Source; }
    }

    private global::Sungero.RecordManagement.IActionItemExecutionTaskInfo _info
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskInfo)this._Info; }
    }

    public ActionItemExecutionTaskCreatingFromServerHandler(global::Sungero.RecordManagement.IActionItemExecutionTask source, global::Sungero.RecordManagement.IActionItemExecutionTaskInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ActionItemExecutionTaskEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// ActionItemExecutionTaskAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemExecutionTaskAccessRights : 
    Sungero.Workflow.Server.TaskAccessRights, Sungero.RecordManagement.IActionItemExecutionTaskAccessRights
  {

    public ActionItemExecutionTaskAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ActionItemExecutionTaskTypeAccessRights : 
    Sungero.Workflow.Server.TaskTypeAccessRights, Sungero.RecordManagement.IActionItemExecutionTaskAccessRights
  {

    public ActionItemExecutionTaskTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ActionItemExecutionTaskRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class ActionItemExecutionTaskRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.TaskRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IActionItemExecutionTaskRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IActionItemExecutionTask 
    {
       public new global::Sungero.RecordManagement.IActionItemExecutionTaskAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IActionItemExecutionTaskInfo Info
       {
          get { return (global::Sungero.RecordManagement.IActionItemExecutionTaskInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ActionItemExecutionTaskPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class ActionItemExecutionTaskAuthorPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IActionItemExecutionTask
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.ActionItemExecutionTaskFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.AuthorFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IActionItemExecutionTask>(query);
      }
    }

    public class ActionItemExecutionTaskAssigneePanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IActionItemExecutionTask
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.ActionItemExecutionTaskFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.AssigneeFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IActionItemExecutionTask>(query);
      }
    }

    public class ActionItemExecutionTaskSupervisorPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IActionItemExecutionTask
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.RecordManagement.IActionItemExecutionTaskFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.ActionItemExecutionTaskFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.SupervisorFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IActionItemExecutionTask>(query);
      }
    }

}

// ==================================================================
// ActionItemExecutionTaskServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class ActionItemExecutionTaskFunctions : global::Sungero.Workflow.Server.TaskFunctions
  {
    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Entity; }
    }

    public ActionItemExecutionTaskFunctions(global::Sungero.RecordManagement.IActionItemExecutionTask entity) : base(entity) { }
  }
}

// ==================================================================
// ActionItemExecutionTaskFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class ActionItemExecutionTask
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.String GetStateViewXml(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateViewXml();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.RecordManagement.IActionItemExecutionTask GetMainActionItemExecutionTask(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.GetMainActionItemExecutionTask();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, global::Sungero.Docflow.IOfficialDocument document)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.GetStateView(document);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.Core.StateView GetActionItemStateView(global::Sungero.RecordManagement.IActionItemExecutionTask task, global::Sungero.RecordManagement.IActionItemExecutionTask openedTask, global::Sungero.RecordManagement.Structures.ActionItemExecutionTask.IStateViewModel stateViewModel, global::Sungero.Company.IEmployee draftAssignee, global::System.String draftActionItem, global::System.Nullable<global::System.DateTime> draftDeadline, global::System.Nullable<global::System.Int32> draftNumber, global::System.Boolean skipResolutionBlock, global::System.Boolean withHighlight)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetActionItemStateView(task, openedTask, stateViewModel, draftAssignee, draftActionItem, draftDeadline, draftNumber, skipResolutionBlock, withHighlight);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.RecordManagement.Structures.ActionItemExecutionTask.IStateViewModel GetAllActionItems(global::Sungero.RecordManagement.Structures.ActionItemExecutionTask.IStateViewModel model)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetAllActionItems(model);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  Sungero.Core.StateBlock AddReviewBlock(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, global::Sungero.Core.StateView stateView, global::System.Collections.Generic.List<global::Sungero.RecordManagement.IActionItemExecutionTask> tasks, global::System.Collections.Generic.List<global::Sungero.Workflow.IAssignment> assignments)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.AddReviewBlock(stateView, tasks, assignments);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  void AddActionItemInfo(Sungero.Core.StateBlock block, global::Sungero.RecordManagement.IActionItemExecutionTask actionItem, global::System.String author)
    {
    global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.AddActionItemInfo(block, actionItem, author);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  void SetDocumentStates(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
    functions.SetDocumentStates();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::Sungero.RecordManagement.IActionItemExecutionTask> GetSubActionItemExecutions(global::Sungero.RecordManagement.IActionItemExecutionAssignment entity)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetSubActionItemExecutions(entity);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean HasSubActionItems(global::Sungero.Workflow.IAssignment assignment)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.HasSubActionItems(assignment);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean HasSubActionItems(global::Sungero.Workflow.ITask task)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.HasSubActionItems(task);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean HasSubActionItems(global::Sungero.Workflow.ITask task, global::Sungero.Core.Enumeration status)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.HasSubActionItems(task, status);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Boolean HasSubActionItems(global::Sungero.Workflow.ITask task, global::Sungero.Core.Enumeration status, global::Sungero.Company.IEmployee addressee)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.HasSubActionItems(task, status, addressee);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.RecordManagement.IActionItemExecutionAssignment> GetActionItems(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetActionItems(entity);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::Sungero.Workflow.ITask> GetActionItemsForResolution(global::Sungero.Workflow.ITask task, global::Sungero.Core.Enumeration status, global::Sungero.Company.IEmployee addressee)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetActionItemsForResolution(task, status, addressee);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::System.String> ActionItemInfoProvider(global::Sungero.Workflow.ITask task)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.ActionItemInfoProvider(task);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.CoreEntities.IUser> GetActionItemsPerformers(global::Sungero.RecordManagement.IActionItemExecutionTask entity)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetActionItemsPerformers(entity);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  void GrantRightsToAttachments(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, global::System.Collections.Generic.List<global::Sungero.Domain.Shared.IEntity> attachmentGroup, global::System.Boolean needGrantRightToPerformer)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
    functions.GrantRightsToAttachments(attachmentGroup, needGrantRightToPerformer);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute(PackResultEntityEagerly = true)]
    internal static  global::Sungero.RecordManagement.IActionItemExecutionTask CreateActionItemExecutionFromExecution(global::Sungero.RecordManagement.IActionItemExecutionAssignment actionItemAssignment)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.CreateActionItemExecutionFromExecution(actionItemAssignment);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.Domain.Shared.IEntity GrantAccessRightToTask(global::Sungero.Domain.Shared.IEntity targetTask, global::Sungero.Workflow.ITask sourceTask)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GrantAccessRightToTask(targetTask, sourceTask);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Workflow.IAssignment GrantAccessRightToAssignment(global::Sungero.Workflow.IAssignment targetAssignment, global::Sungero.Workflow.ITask sourceTask)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GrantAccessRightToAssignment(targetAssignment, sourceTask);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> GetLeadActionItemExecutionPerformers(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecution)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetLeadActionItemExecutionPerformers(actionItemExecution);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::Sungero.Workflow.ITask GetLeadTaskToTask(global::Sungero.Workflow.ITask task)
    {
      return global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions.GetLeadTaskToTask(task);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.CoreEntities.IRecipient> GetTaskAdditionalAssignees(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.GetTaskAdditionalAssignees();
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Boolean DocumentInRequredGroup(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, global::Sungero.Docflow.IOfficialDocument document)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.DocumentInRequredGroup(document);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String SetRecipientsToAssignees(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, global::Sungero.CoreEntities.IRecipient recipient)
    {
      var functions = (global::Sungero.RecordManagement.Server.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.ServerFunctions;
      return functions.SetRecipientsToAssignees(recipient);
    }

    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  global::System.String FormatActionItemForSubject(global::System.String actionItem, global::System.Boolean hasDocument)
    {
      return global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions.FormatActionItemForSubject(actionItem, hasDocument);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  global::System.String GetActionItemExecutionSubject(global::Sungero.RecordManagement.IActionItemExecutionTask task, CommonLibrary.LocalizedString beginningSubject)
    {
      return global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions.GetActionItemExecutionSubject(task, beginningSubject);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Boolean CheckOverdueActionItemExecutionTask(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask)
    {
      var functions = (global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.SharedFunctions;
      return functions.CheckOverdueActionItemExecutionTask();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Boolean ValidateActionItemExecutionTaskStart(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, Sungero.Core.IValidationArgs e, global::System.Boolean startedFromUI)
    {
      var functions = (global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.SharedFunctions;
      return functions.ValidateActionItemExecutionTaskStart(e, startedFromUI);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions" />
    internal static  global::System.Boolean ValidateActionItemExecutionTaskSave(global::Sungero.RecordManagement.IActionItemExecutionTask actionItemExecutionTask, Sungero.Core.IValidationArgs e)
    {
      var functions = (global::Sungero.RecordManagement.Shared.ActionItemExecutionTaskFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)actionItemExecutionTask).FunctionsContainer.SharedFunctions;
      return functions.ValidateActionItemExecutionTaskSave(e);
    }

  }
}

// ==================================================================
// ActionItemExecutionTaskServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemExecutionTaskServerPublicFunctions : global::Sungero.RecordManagement.Server.IActionItemExecutionTaskServerPublicFunctions
  {
    public global::Sungero.Core.StateView GetActionItemStateView(global::Sungero.RecordManagement.IActionItemExecutionTask task, global::Sungero.RecordManagement.IActionItemExecutionTask openedTask, global::Sungero.RecordManagement.Structures.ActionItemExecutionTask.IStateViewModel stateViewModel, global::Sungero.Company.IEmployee draftAssignee, global::System.String draftActionItem, global::System.Nullable<global::System.DateTime> draftDeadline, global::System.Nullable<global::System.Int32> draftNumber, global::System.Boolean skipResolutionBlock, global::System.Boolean withHighlight)
    {
      return global::Sungero.RecordManagement.Functions.ActionItemExecutionTask.GetActionItemStateView(task, openedTask, stateViewModel, draftAssignee, draftActionItem, draftDeadline, draftNumber, skipResolutionBlock, withHighlight);
    }
  }
}

// ==================================================================
// ActionItemExecutionTaskQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class ActionItemExecutionTask
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.ActionItemExecutionTask.ActionItemExecutionTaskQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ActionItemExecutionTaskBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemExecutionTaskArguments: global::Sungero.Workflow.Server.Route.TaskStartEventArguments<ActionItemExecutionTaskBlock, global::Sungero.Workflow.TaskBlock>
  {
    public ActionItemExecutionTaskArguments(ActionItemExecutionTaskBlock block) : base(block) { }
  }

  public class ActionItemExecutionTaskEndBlockEventArguments: global::Sungero.Workflow.Server.Route.TaskEndBlockEventArguments<ActionItemExecutionTaskBlock, global::Sungero.Workflow.TaskBlock, Sungero.RecordManagement.IActionItemExecutionTask> 
  {
    public ActionItemExecutionTaskEndBlockEventArguments(ActionItemExecutionTaskBlock block) : base(block) { }
  }

  public partial class ActionItemExecutionTaskBlock : global::Sungero.Workflow.Blocks.TaskBlockWrapper<global::Sungero.Workflow.TaskBlock>    
  {
    public virtual global::System.DateTime? Deadline
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("Deadline"); }
      set { this.SetCustomProperty("Deadline", value); }
    }
    public virtual global::System.Boolean? IsCompoundActionItem
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsCompoundActionItem"); }
      set { this.SetCustomProperty("IsCompoundActionItem", value); }
    }
    public virtual global::System.String ActionItem
    {
      get { return this.GetCustomProperty<global::System.String>("ActionItem"); }
      set { this.SetCustomProperty("ActionItem", value); }
    }
    public virtual global::Sungero.Core.Enumeration? ExecutionState
    {
      get { return this.GetCustomEnumProperty("ExecutionState"); }
      set { this.SetCustomEnumProperty("ExecutionState", value); }
    }
    public virtual global::System.DateTime? ActualDate
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("ActualDate"); }
      set { this.SetCustomProperty("ActualDate", value); }
    }
    public virtual global::System.Boolean? IsUnderControl
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsUnderControl"); }
      set { this.SetCustomProperty("IsUnderControl", value); }
    }
    public virtual global::Sungero.Core.Enumeration? ActionItemType
    {
      get { return this.GetCustomEnumProperty("ActionItemType"); }
      set { this.SetCustomEnumProperty("ActionItemType", value); }
    }
    public virtual global::System.Boolean? IsDraftResolution
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsDraftResolution"); }
      set { this.SetCustomProperty("IsDraftResolution", value); }
    }
    public virtual global::System.DateTime? FinalDeadline
    {
      get { return this.GetCustomProperty<global::System.DateTime?>("FinalDeadline"); }
      set { this.SetCustomProperty("FinalDeadline", value); }
    }

    public virtual global::Sungero.Company.IEmployee Supervisor
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Supervisor"); }
      set { this.SetCustomNavigationProperty("Supervisor", value); }
    }
    public virtual global::Sungero.Company.IEmployee AssignedBy
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("AssignedBy"); }
      set { this.SetCustomNavigationProperty("AssignedBy", value); }
    }
    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Assignee"); }
      set { this.SetCustomNavigationProperty("Assignee", value); }
    }


    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskCoAssigneesWrapper> _CoAssignees;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskCoAssigneesWrapper> GetActionItemExecutionTaskCoAssigneesCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskCoAssigneesCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskCoAssigneesWrapper> CoAssignees
    {
      get 
      {
        if(this._CoAssignees == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("CoAssignees"); 
          this._CoAssignees = this.GetActionItemExecutionTaskCoAssigneesCollectionWrapper(items);
        }

        return this._CoAssignees;
      }
    }
    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemPartsWrapper> _ActionItemParts;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemPartsWrapper> GetActionItemExecutionTaskActionItemPartsCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemPartsCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemPartsWrapper> ActionItemParts
    {
      get 
      {
        if(this._ActionItemParts == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("ActionItemParts"); 
          this._ActionItemParts = this.GetActionItemExecutionTaskActionItemPartsCollectionWrapper(items);
        }

        return this._ActionItemParts;
      }
    }
    private global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemObserversWrapper> _ActionItemObservers;

	protected virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemObserversWrapper> GetActionItemExecutionTaskActionItemObserversCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items)
	{
	  return new global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemObserversCollectionWrapper(items);
	}

    public virtual global::Sungero.Workflow.Blocks.IChildCollectionWrapper<global::Sungero.RecordManagement.Server.ActionItemExecutionTaskActionItemObserversWrapper> ActionItemObservers
    {
      get 
      {
        if(this._ActionItemObservers == null)
        {
          var items = this.GetCustomCollectionPropertyInternalValue("ActionItemObservers"); 
          this._ActionItemObservers = this.GetActionItemExecutionTaskActionItemObserversCollectionWrapper(items);
        }

        return this._ActionItemObservers;
      }
    }



    public ActionItemExecutionTaskBlock(global::Sungero.Workflow.TaskBlock block) : base(block) { }
  }
}

// ==================================================================
// ActionItemExecutionTaskChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class ActionItemExecutionTaskCoAssigneesCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<ActionItemExecutionTaskCoAssigneesWrapper>
  {
    protected override ActionItemExecutionTaskCoAssigneesWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new ActionItemExecutionTaskCoAssigneesWrapper(value);
    }

    public ActionItemExecutionTaskCoAssigneesCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class ActionItemExecutionTaskCoAssigneesWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

        public virtual global::System.Boolean? AssignmentCreated
        {
          get { return this.GetCustomProperty<global::System.Boolean?>("AssignmentCreated"); }
          set { this.SetCustomProperty("AssignmentCreated", value); }
        }


    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Assignee"); }
      set { this.SetCustomNavigationProperty("Assignee", value); }
    }

    public ActionItemExecutionTaskCoAssigneesWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }
  public class ActionItemExecutionTaskActionItemPartsCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<ActionItemExecutionTaskActionItemPartsWrapper>
  {
    protected override ActionItemExecutionTaskActionItemPartsWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new ActionItemExecutionTaskActionItemPartsWrapper(value);
    }

    public ActionItemExecutionTaskActionItemPartsCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class ActionItemExecutionTaskActionItemPartsWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

        public virtual global::System.DateTime? Deadline
        {
          get { return this.GetCustomProperty<global::System.DateTime?>("Deadline"); }
          set { this.SetCustomProperty("Deadline", value); }
        }

        public virtual global::System.Int32? Number
        {
          get { return this.GetCustomProperty<global::System.Int32?>("Number"); }
          set { this.SetCustomProperty("Number", value); }
        }

        public virtual global::System.Boolean? AssignmentCreated
        {
          get { return this.GetCustomProperty<global::System.Boolean?>("AssignmentCreated"); }
          set { this.SetCustomProperty("AssignmentCreated", value); }
        }


    public virtual global::Sungero.Company.IEmployee Assignee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Assignee"); }
      set { this.SetCustomNavigationProperty("Assignee", value); }
    }
    public virtual global::Sungero.RecordManagement.IActionItemExecutionTask ActionItemPartExecutionTask
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.RecordManagement.IActionItemExecutionTask>("ActionItemPartExecutionTask"); }
      set { this.SetCustomNavigationProperty("ActionItemPartExecutionTask", value); }
    }

    public ActionItemExecutionTaskActionItemPartsWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }
  public class ActionItemExecutionTaskActionItemObserversCollectionWrapper :
       global::Sungero.Workflow.Blocks.ChildCollectionWrapper<ActionItemExecutionTaskActionItemObserversWrapper>
  {
    protected override ActionItemExecutionTaskActionItemObserversWrapper CreateWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> value)
    {
      return new ActionItemExecutionTaskActionItemObserversWrapper(value);
    }

    public ActionItemExecutionTaskActionItemObserversCollectionWrapper(global::System.Collections.ObjectModel.Collection<global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty>> items) : base(items) { }
  }

  public class ActionItemExecutionTaskActionItemObserversWrapper: 
        global::Sungero.Workflow.Blocks.ChildEntityWrapper
  {

    public virtual global::Sungero.CoreEntities.IRecipient Observer
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.CoreEntities.IRecipient>("Observer"); }
      set { this.SetCustomNavigationProperty("Observer", value); }
    }

    public ActionItemExecutionTaskActionItemObserversWrapper(global::System.Collections.ObjectModel.Collection<global::Sungero.Workflow.CustomTypeProperty> properties): base(properties) { }
  }

}

// ==================================================================
// ActionItemExecutionTaskRouteHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public partial class ActionItemExecutionTaskRouteHandlers{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected global::Sungero.Workflow.ITask Task { get; private set; }

    private global::Sungero.RecordManagement.IActionItemExecutionTask _obj
    {
      get { return (global::Sungero.RecordManagement.IActionItemExecutionTask)this.Task; }
    }


    protected readonly int _schemeVersion;

    public ActionItemExecutionTaskRouteHandlers(global::Sungero.RecordManagement.IActionItemExecutionTask task, int schemeVersion) 
    {
      this.Task = task;
      this._schemeVersion = schemeVersion;
    }


    [global::System.ObsoleteAttribute("Используйте ExtendedSchemeVersions")]
    private static class SchemeVersions
    {
      public static readonly int V1 = 1;
}

    }
}
