
// ==================================================================
// IncomingLetter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class IncomingLetterFilter<T> :
      global::Sungero.Docflow.Server.IncomingDocumentBaseFilter<T>
      where T : class, global::Sungero.RecordManagement.IIncomingLetter
    {
      private global::Sungero.RecordManagement.IIncomingLetterFilterState filter
      {
        get
        {
          return (Sungero.RecordManagement.IIncomingLetterFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public IncomingLetterFilter(global::Sungero.RecordManagement.IIncomingLetterFilterState filter)
      : base(filter)
      {
      }

      protected IncomingLetterFilter()
      {
      }
    }
    public class IncomingLetterSearchDialogModel : global::Sungero.Docflow.Server.IncomingDocumentBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.String InNumber { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  [Sungero.Domain.Shared.HideInDevStudio()]
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Correspondent { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IOutgoingDocumentBase> InResponseTo { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Dated { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Addressee { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Assignee { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.IContact> SignedBy { get; protected set; }


                   public new IncomingLetterVersionsModel Versions { get { return (IncomingLetterVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new IncomingLetterTrackingModel Tracking { get { return (IncomingLetterTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class IncomingLetterVersionsModel : global::Sungero.Docflow.Server.IncomingDocumentBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class IncomingLetterTrackingModel : global::Sungero.Docflow.Server.IncomingDocumentBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class IncomingLetterFilterForAddressee<TQueryEntity, TSourceEntity>
    : global::Sungero.Docflow.Server.IncomingDocumentBaseFilterForAddressee<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.IncomingLetterAddresseePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AddresseeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingLetterFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class IncomingLetterFilterForSignedBy<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.IncomingLetterSignedByPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).SignedByFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingLetterFilterForSignedBy(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class IncomingLetterSearchFilterForSignedBy<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.IncomingLetterSignedBySearchPropertyFilteringServerHandler<TQueryEntity>().SignedBySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingLetterSearchFilterForSignedBy(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class IncomingLetterFilterForContact<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.IncomingLetterContactPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ContactFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingLetterFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class IncomingLetterSearchFilterForContact<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.IncomingLetterContactSearchPropertyFilteringServerHandler<TQueryEntity>().ContactSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public IncomingLetterSearchFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterFilter<global::Sungero.RecordManagement.IIncomingLetter>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterFilterForAddressee<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IIncomingLetter>), "Addressee")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterFilterForSignedBy<global::Sungero.Parties.IContact, global::Sungero.RecordManagement.IIncomingLetter>), "SignedBy")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterSearchFilterForSignedBy<global::Sungero.Parties.IContact>), "SignedBy")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterFilterForContact<global::Sungero.Parties.IContact, global::Sungero.RecordManagement.IIncomingLetter>), "Contact")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.IncomingLetterSearchFilterForContact<global::Sungero.Parties.IContact>), "Contact")]


  public class IncomingLetter :
    global::Sungero.Docflow.Server.IncomingDocumentBase, global::Sungero.RecordManagement.IIncomingLetter, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("8dd00491-8fd0-4a7a-9cf3-8b6dc2e6455d");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.IncomingLetter.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IIncomingLetter, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.RecordManagement.IIncomingLetterState State
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetterState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.IncomingLetterState(this);
    }

    public new virtual global::Sungero.RecordManagement.IIncomingLetterInfo Info
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetterInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IIncomingLetterAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetterAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.IncomingLetterAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.IncomingLetterFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.IncomingLetterFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.IncomingLetterServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.IncomingLetterSharedHandlers(this);
    }







    private global::Sungero.Parties.IContact _SignedBy;
    public virtual global::Sungero.Parties.IContact SignedBy
    {
      get
      {
        return this._SignedBy;
      }

      set
      {
        this.SetPropertyValue("SignedBy", this._SignedBy, value, (propertyValue) => { this._SignedBy = propertyValue; }, this.SignedByChangedHandler);
      }
    }
    private global::Sungero.Parties.IContact _Contact;
    public virtual global::Sungero.Parties.IContact Contact
    {
      get
      {
        return this._Contact;
      }

      set
      {
        this.SetPropertyValue("Contact", this._Contact, value, (propertyValue) => { this._Contact = propertyValue; }, this.ContactChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IIncomingLetterVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IIncomingLetterTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.IncomingLetterCreatingFromServerHandler((global::Sungero.RecordManagement.IIncomingLetter)entitySource, this.Info);
    }

    #region Framework events

    protected void SignedByChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.IncomingLetterSignedByChangedEventArgs(this.State.Properties.SignedBy, this.SignedBy, this);
     ((global::Sungero.RecordManagement.IncomingLetterSharedHandlers)this.SharedHandlers).SignedByChanged(args);
    }

    protected void ContactChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.IncomingLetterContactChangedEventArgs(this.State.Properties.Contact, this.Contact, this);
     ((global::Sungero.RecordManagement.IncomingLetterSharedHandlers)this.SharedHandlers).ContactChanged(args);
    }





    #endregion


    public IncomingLetter()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.IncomingLetterConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// IncomingLetterHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class IncomingLetterAddresseePropertyFilteringServerHandler<T>
    : global::Sungero.Docflow.IncomingDocumentBaseAddresseePropertyFilteringServerHandler<T>
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IIncomingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Entity; }
    }

    public IncomingLetterAddresseePropertyFilteringServerHandler(global::Sungero.RecordManagement.IIncomingLetter entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingLetterSignedByPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.RecordManagement.IIncomingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Entity; }
    }

    public IncomingLetterSignedByPropertyFilteringServerHandler(global::Sungero.RecordManagement.IIncomingLetter entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingLetterSignedBySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> SignedBySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public IncomingLetterSignedBySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class IncomingLetterContactPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.RecordManagement.IIncomingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Entity; }
    }

    public IncomingLetterContactPropertyFilteringServerHandler(global::Sungero.RecordManagement.IIncomingLetter entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingLetterContactSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> ContactSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public IncomingLetterContactSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class IncomingLetterFilteringServerHandler<T>
    : global::Sungero.Docflow.IncomingDocumentBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IIncomingLetter
  {
    private global::Sungero.RecordManagement.IIncomingLetterFilterState _filter
    {
      get
      {
        return (Sungero.RecordManagement.IIncomingLetterFilterState)this.Filter;
      }
    }

    public IncomingLetterFilteringServerHandler(global::Sungero.RecordManagement.IIncomingLetterFilterState filter)
    : base(filter)
    {
    }

    protected IncomingLetterFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> DocumentRegisterFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentRegisterFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentKindFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> CounterpartyFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.CounterpartyFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }


  }

  public partial class IncomingLetterSearchDialogServerHandler : global::Sungero.Docflow.IncomingDocumentBaseSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.IncomingLetterSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.IncomingLetterSearchDialogModel)this.Dialog;
       }
     }

     public IncomingLetterSearchDialogServerHandler(global::Sungero.RecordManagement.Server.IncomingLetterSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class IncomingLetterServerHandlers : global::Sungero.Docflow.IncomingDocumentBaseServerHandlers
  {
    private global::Sungero.RecordManagement.IIncomingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Entity; }
    }

    public IncomingLetterServerHandlers(global::Sungero.RecordManagement.IIncomingLetter entity)
      : base(entity)
    {
    }
  }

  public partial class IncomingLetterCreatingFromServerHandler : global::Sungero.Docflow.IncomingDocumentBaseCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IIncomingLetter _source
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Source; }
    }

    private global::Sungero.RecordManagement.IIncomingLetterInfo _info
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetterInfo)this._Info; }
    }

    public IncomingLetterCreatingFromServerHandler(global::Sungero.RecordManagement.IIncomingLetter source, global::Sungero.RecordManagement.IIncomingLetterInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// IncomingLetterEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// IncomingLetterAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class IncomingLetterAccessRights : 
    Sungero.Docflow.Server.IncomingDocumentBaseAccessRights, Sungero.RecordManagement.IIncomingLetterAccessRights
  {

    public IncomingLetterAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class IncomingLetterTypeAccessRights : 
    Sungero.Docflow.Server.IncomingDocumentBaseTypeAccessRights, Sungero.RecordManagement.IIncomingLetterAccessRights
  {

    public IncomingLetterTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// IncomingLetterRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class IncomingLetterRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.IncomingDocumentBaseRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IIncomingLetterRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IIncomingLetter 
    {
       public new global::Sungero.RecordManagement.IIncomingLetterAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IIncomingLetterAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IIncomingLetterInfo Info
       {
          get { return (global::Sungero.RecordManagement.IIncomingLetterInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.IncomingLetterTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// IncomingLetterPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class IncomingLetterDocumentRegisterPanelNavigationFilter : global::Sungero.Docflow.Server.IncomingDocumentBaseDocumentRegisterPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IIncomingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentRegister>)query;
        var typedState = (global::Sungero.RecordManagement.IIncomingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.IncomingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentRegisterFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentRegister>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IIncomingLetter>(query);
      }
    }

    public class IncomingLetterDocumentKindPanelNavigationFilter : global::Sungero.Docflow.Server.IncomingDocumentBaseDocumentKindPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IIncomingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.RecordManagement.IIncomingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.IncomingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IIncomingLetter>(query);
      }
    }

    public class IncomingLetterCounterpartyPanelNavigationFilter : global::Sungero.Docflow.Server.IncomingDocumentBaseCounterpartyPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IIncomingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.RecordManagement.IIncomingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.IncomingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.CounterpartyFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IIncomingLetter>(query);
      }
    }

    public class IncomingLetterDepartmentPanelNavigationFilter : global::Sungero.Docflow.Server.IncomingDocumentBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IIncomingLetter
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.RecordManagement.IIncomingLetterFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.IncomingLetterFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IIncomingLetter>(query);
      }
    }

}

// ==================================================================
// IncomingLetterServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class IncomingLetterFunctions : global::Sungero.Docflow.Server.IncomingDocumentBaseFunctions
  {
    private global::Sungero.RecordManagement.IIncomingLetter _obj
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetter)this.Entity; }
    }

    public IncomingLetterFunctions(global::Sungero.RecordManagement.IIncomingLetter entity) : base(entity) { }
  }
}

// ==================================================================
// IncomingLetterFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class IncomingLetter
  {
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.IncomingLetterFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.RecordManagement.IIncomingLetter> GetDuplicates(global::Sungero.RecordManagement.IIncomingLetter letter, global::Sungero.Docflow.IDocumentKind documentKind, global::Sungero.Company.IBusinessUnit businessUnit, global::System.String inNumber, global::System.Nullable<global::System.DateTime> dated, global::Sungero.Parties.ICounterparty correspondent)
    {
      return global::Sungero.RecordManagement.Server.IncomingLetterFunctions.GetDuplicates(letter, documentKind, businessUnit, inNumber, dated, correspondent);
    }
    /// <redirect project="Sungero.RecordManagement.Server" type="Sungero.RecordManagement.Server.IncomingLetterFunctions" />
    internal static  global::Sungero.Docflow.IOfficialDocument CreateReplyDocument(global::Sungero.RecordManagement.IIncomingLetter incomingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Server.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.ServerFunctions;
      return functions.CreateReplyDocument();
    }

    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  global::System.Boolean HaveDuplicates(global::Sungero.RecordManagement.IIncomingLetter letter, global::Sungero.Docflow.IDocumentKind documentKind, global::Sungero.Company.IBusinessUnit businessUnit, global::System.String correspondentNumber, global::System.Nullable<global::System.DateTime> dated, global::Sungero.Parties.ICounterparty correspondent)
    {
      return global::Sungero.RecordManagement.Shared.IncomingLetterFunctions.HaveDuplicates(letter, documentKind, businessUnit, correspondentNumber, dated, correspondent);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  void FillName(global::Sungero.RecordManagement.IIncomingLetter incomingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Shared.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.RecordManagement.IIncomingLetter incomingLetter, global::System.Boolean isEnabled, global::System.Boolean isRepeatRegister)
    {
      var functions = (global::Sungero.RecordManagement.Shared.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, isRepeatRegister);
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.RecordManagement.IIncomingLetter incomingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Shared.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  global::System.Boolean IsVerificationModeSupported(global::Sungero.RecordManagement.IIncomingLetter incomingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Shared.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.SharedFunctions;
      return functions.IsVerificationModeSupported();
    }
    /// <redirect project="Sungero.RecordManagement.Shared" type="Sungero.RecordManagement.Shared.IncomingLetterFunctions" />
    internal static  global::System.Boolean HasEmptyRequiredProperties(global::Sungero.RecordManagement.IIncomingLetter incomingLetter)
    {
      var functions = (global::Sungero.RecordManagement.Shared.IncomingLetterFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)incomingLetter).FunctionsContainer.SharedFunctions;
      return functions.HasEmptyRequiredProperties();
    }

  }
}

// ==================================================================
// IncomingLetterServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class IncomingLetterServerPublicFunctions : global::Sungero.RecordManagement.Server.IIncomingLetterServerPublicFunctions
  {
  }
}

// ==================================================================
// IncomingLetterQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class IncomingLetter
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.IncomingLetter.IncomingLetterQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// IncomingLetterServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class IncomingLetterConvertingFromServerHandler : global::Sungero.Docflow.IncomingDocumentBaseConvertingFromServerHandler
  { 
    private global::Sungero.RecordManagement.IIncomingLetterInfo _info
    {
      get { return (global::Sungero.RecordManagement.IIncomingLetterInfo)this._Info; }
    }

    public IncomingLetterConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.RecordManagement.IIncomingLetterInfo info)
      : base(source, info)
    {
    }
  }
}
