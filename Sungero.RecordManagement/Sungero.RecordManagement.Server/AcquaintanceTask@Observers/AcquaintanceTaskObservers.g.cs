
// ==================================================================
// AcquaintanceTaskObservers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class AcquaintanceTaskObserversFilterForObserver<TQueryEntity, TSourceEntity, TRootEntity>
    : global::Sungero.Workflow.Server.TaskObserversFilterForObserver<TQueryEntity, TSourceEntity, TRootEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
    where TSourceEntity : class, global::Sungero.RecordManagement.IAcquaintanceTaskObservers
    where TRootEntity : class, global::Sungero.RecordManagement.IAcquaintanceTask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity, TRootEntity rootEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.AcquaintanceTaskObserversObserverPropertyFilteringServerHandler<TQueryEntity>(sourceEntity, rootEntity).ObserversObserverFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AcquaintanceTaskObserversFilterForObserver(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.AcquaintanceTaskObserversFilterForObserver<global::Sungero.CoreEntities.IRecipient, global::Sungero.RecordManagement.IAcquaintanceTaskObservers, global::Sungero.RecordManagement.IAcquaintanceTask>), "Observer")]


  public class AcquaintanceTaskObservers :
    global::Sungero.Workflow.Server.TaskObservers, global::Sungero.RecordManagement.IAcquaintanceTaskObservers
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("e30843c8-907a-47e1-8934-384f4ec21de4");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.AcquaintanceTaskObservers.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IAcquaintanceTaskObservers, Sungero.Domain.Interfaces"; }
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceTaskObserversState State
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskObserversState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.AcquaintanceTaskObserversState(this);
    }

    public new virtual global::Sungero.RecordManagement.IAcquaintanceTaskObserversInfo Info
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskObserversInfo)base.Info; }
    }










    #region Framework events



    #endregion


    public AcquaintanceTaskObservers()
    {
    }

  }
}

// ==================================================================
// AcquaintanceTaskObserversHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class AcquaintanceTaskObserversObserverPropertyFilteringServerHandler<T>
    : global::Sungero.Workflow.TaskObserversObserverPropertyFilteringServerHandler<T>
    where T : class, global::Sungero.CoreEntities.IRecipient
  {
    private global::Sungero.RecordManagement.IAcquaintanceTaskObservers _obj
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTaskObservers)this.Entity; }
    }

    private global::Sungero.RecordManagement.IAcquaintanceTask _root
    {
      get { return (global::Sungero.RecordManagement.IAcquaintanceTask)this.Root; }
    }

    public AcquaintanceTaskObserversObserverPropertyFilteringServerHandler(global::Sungero.RecordManagement.IAcquaintanceTaskObservers entity, global::Sungero.RecordManagement.IAcquaintanceTask root)
      : base(entity, root)
    {
    }
  }



}

// ==================================================================
// AcquaintanceTaskObserversEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}
