
// ==================================================================
// PreparingDraftResolutionAssignment.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class PreparingDraftResolutionAssignmentFilter<T> :
      global::Sungero.Workflow.Server.AssignmentFilter<T>
      where T : class, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment
    {
      protected new global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState Filter { get; private set; }

      private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public PreparingDraftResolutionAssignmentFilter(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected PreparingDraftResolutionAssignmentFilter()
      {
      }
    }
    public class PreparingDraftResolutionAssignmentSearchDialogModel : global::Sungero.Workflow.Server.AssignmentSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Performer { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Importance { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Deadline { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Result { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Addressee { get; protected set; }


        }




  public class PreparingDraftResolutionAssignmentFilterForAddressee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentAddresseePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AddresseeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public PreparingDraftResolutionAssignmentFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class PreparingDraftResolutionAssignmentSearchFilterForAddressee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentAddresseeSearchPropertyFilteringServerHandler<TQueryEntity>().AddresseeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public PreparingDraftResolutionAssignmentSearchFilterForAddressee(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentFilter<global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentFilterForAddressee<global::Sungero.Company.IEmployee, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment>), "Addressee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentSearchFilterForAddressee<global::Sungero.CoreEntities.IRecipient>), "Addressee")]


  public class PreparingDraftResolutionAssignment :
    global::Sungero.Workflow.Server.Assignment, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("7cca016a-80f0-4562-9042-57bb748d5b30");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignment.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IPreparingDraftResolutionAssignment, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Subject; }
      set { this.Subject = value; }
    }

    public new virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentState State
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentState(this);
    }

    public new virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo Info
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers(this);
    }

    private global::System.Boolean? _NeedDeleteActionItems;
    public virtual global::System.Boolean? NeedDeleteActionItems
    {
      get
      {
        return this._NeedDeleteActionItems;
      }

      set
      {
        this.SetPropertyValue("NeedDeleteActionItems", this._NeedDeleteActionItems, value, (propertyValue) => { this._NeedDeleteActionItems = propertyValue; }, this.NeedDeleteActionItemsChangedHandler);
      }
    }
    private global::System.Boolean? _IsRework;
    public virtual global::System.Boolean? IsRework
    {
      get
      {
        return this._IsRework;
      }

      set
      {
        this.SetPropertyValue("IsRework", this._IsRework, value, (propertyValue) => { this._IsRework = propertyValue; }, this.IsReworkChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _ResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
      global::Sungero.Workflow.Server.Assignment.ResultItems,
      typeof(global::Sungero.RecordManagement.PreparingDraftResolutionAssignment.Result),
      typeof(global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignment),
      "Result");

    public static new global::Sungero.Domain.Shared.EnumerationItems ResultItems
    {
      get { return global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignment._ResultItems; }
    }

    public override global::Sungero.Domain.Shared.EnumerationItems ResultAllowedItems
    {
      get { return global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignment.ResultItems; }
    }



    private global::Sungero.Company.IEmployee _Addressee;
    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get
      {
        return this._Addressee;
      }

      set
      {
        this.SetPropertyValue("Addressee", this._Addressee, value, (propertyValue) => { this._Addressee = propertyValue; }, this.AddresseeChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentCreatingFromServerHandler((global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment)entitySource, this.Info);
    }

    #region Framework events

    protected void AddresseeChangedHandler()
    {
      var args = new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentAddresseeChangedEventArgs(this.State.Properties.Addressee, this.Addressee, this);
     ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).AddresseeChanged(args);
    }

    protected void NeedDeleteActionItemsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.NeedDeleteActionItems, this.NeedDeleteActionItems, this);
     ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).NeedDeleteActionItemsChanged(args);
    }

    protected void IsReworkChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsRework, this.IsRework, this);
     ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).IsReworkChanged(args);
    }



    #endregion


    public PreparingDraftResolutionAssignment()
    {
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentCreated += this.AttachmentCreatedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentAdded += this.AttachmentAddedHandler;
      ((global::Sungero.Workflow.Interfaces.IWorkflowEntity)this).AttachmentDeleted += this.AttachmentDeletedHandler;


    }

    #region Workflow attachments
    public virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentResolutionGroupAttachments ResolutionGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentResolutionGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentDocumentForReviewGroupAttachments DocumentForReviewGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentDocumentForReviewGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAddendaGroupAttachments AddendaGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentAddendaGroupAttachments(this);
      }
    }
    public virtual global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentOtherGroupAttachments OtherGroup
    {
      get
      {
        return new global::Sungero.RecordManagement.Shared.PreparingDraftResolutionAssignmentOtherGroupAttachments(this);
      }
    }


    private void AttachmentCreatedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentCreatedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).ResolutionGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).DocumentForReviewGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).AddendaGroupCreated(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).OtherGroupCreated(e);
        return;
      }

    }

    private void AttachmentAddedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentAddedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).ResolutionGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).DocumentForReviewGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).AddendaGroupAdded(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).OtherGroupAdded(e);
        return;
      }

    }

    private void AttachmentDeletedHandler(object sender, global::Sungero.Workflow.Interfaces.AttachmentDeletedEventArgs e)
    {
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "ResolutionGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).ResolutionGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "DocumentForReviewGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).DocumentForReviewGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "AddendaGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).AddendaGroupDeleted(e);
        return;
      }
      if (((global::Sungero.Workflow.Interfaces.IInternalAttachmentEventArgs)e).GroupName == "OtherGroup")
      {
        ((global::Sungero.RecordManagement.PreparingDraftResolutionAssignmentSharedHandlers)this.SharedHandlers).OtherGroupDeleted(e);
        return;
      }

    }
    #endregion

  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class PreparingDraftResolutionAssignmentAddresseePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment _obj
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AddresseeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public PreparingDraftResolutionAssignmentAddresseePropertyFilteringServerHandler(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment entity)
      : base(entity)
    {
    }
  }

  public partial class PreparingDraftResolutionAssignmentAddresseeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AddresseeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public PreparingDraftResolutionAssignmentAddresseeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class PreparingDraftResolutionAssignmentFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState Filter { get; private set; }

    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public PreparingDraftResolutionAssignmentFilteringServerHandler(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected PreparingDraftResolutionAssignmentFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class PreparingDraftResolutionAssignmentSearchDialogServerHandler : global::Sungero.Workflow.AssignmentSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentSearchDialogModel)this.Dialog;
       }
     }

     public PreparingDraftResolutionAssignmentSearchDialogServerHandler(global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class PreparingDraftResolutionAssignmentServerHandlers : global::Sungero.Workflow.AssignmentServerHandlers
  {
    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment _obj
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment)this.Entity; }
    }

    public PreparingDraftResolutionAssignmentServerHandlers(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment entity)
      : base(entity)
    {
    }
  }

  public partial class PreparingDraftResolutionAssignmentCreatingFromServerHandler : global::Sungero.Workflow.AssignmentCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment _source
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment)this.Source; }
    }

    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo _info
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo)this._Info; }
    }

    public PreparingDraftResolutionAssignmentCreatingFromServerHandler(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment source, global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// PreparingDraftResolutionAssignmentEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// PreparingDraftResolutionAssignmentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class PreparingDraftResolutionAssignmentAccessRights : 
    Sungero.Workflow.Server.AssignmentAccessRights, Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights
  {

    public PreparingDraftResolutionAssignmentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class PreparingDraftResolutionAssignmentTypeAccessRights : 
    Sungero.Workflow.Server.AssignmentTypeAccessRights, Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights
  {

    public PreparingDraftResolutionAssignmentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class PreparingDraftResolutionAssignmentRepositoryImplementer<T> : 
      global::Sungero.Workflow.Server.AssignmentRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment 
    {
       public new global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo Info
       {
          get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignmentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.PreparingDraftResolutionAssignmentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// PreparingDraftResolutionAssignmentPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// PreparingDraftResolutionAssignmentServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class PreparingDraftResolutionAssignmentFunctions : global::Sungero.Workflow.Server.AssignmentFunctions
  {
    private global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment _obj
    {
      get { return (global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment)this.Entity; }
    }

    public PreparingDraftResolutionAssignmentFunctions(global::Sungero.RecordManagement.IPreparingDraftResolutionAssignment entity) : base(entity) { }
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class PreparingDraftResolutionAssignment
  {
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class PreparingDraftResolutionAssignmentServerPublicFunctions : global::Sungero.RecordManagement.Server.IPreparingDraftResolutionAssignmentServerPublicFunctions
  {
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class PreparingDraftResolutionAssignment
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.PreparingDraftResolutionAssignment.PreparingDraftResolutionAssignmentQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentBlock.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class PreparingDraftResolutionAssignmentArguments: global::Sungero.Workflow.Server.Route.AssignmentStartEventArguments<PreparingDraftResolutionAssignmentBlock, global::Sungero.Workflow.AssignmentBlock>
  {
    public PreparingDraftResolutionAssignmentArguments(PreparingDraftResolutionAssignmentBlock block) : base(block) { }
  }

  public class PreparingDraftResolutionAssignmentEndBlockEventArguments: global::Sungero.Workflow.Server.Route.AssignmentEndBlockEventArguments<PreparingDraftResolutionAssignmentBlock, global::Sungero.Workflow.AssignmentBlock, Sungero.RecordManagement.IPreparingDraftResolutionAssignment> 
  {
    public PreparingDraftResolutionAssignmentEndBlockEventArguments(PreparingDraftResolutionAssignmentBlock block) : base(block) { }
  }

  public partial class PreparingDraftResolutionAssignmentBlock : global::Sungero.Workflow.Blocks.AssignmentBlockWrapper<global::Sungero.Workflow.AssignmentBlock>    
  {
    public virtual global::System.Boolean? NeedDeleteActionItems
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("NeedDeleteActionItems"); }
      set { this.SetCustomProperty("NeedDeleteActionItems", value); }
    }
    public virtual global::System.Boolean? IsRework
    {
      get { return this.GetCustomProperty<global::System.Boolean?>("IsRework"); }
      set { this.SetCustomProperty("IsRework", value); }
    }

    public virtual global::Sungero.Company.IEmployee Addressee
    {
      get { return this.GetCustomNavigationProperty<global::Sungero.Company.IEmployee>("Addressee"); }
      set { this.SetCustomNavigationProperty("Addressee", value); }
    }




    public PreparingDraftResolutionAssignmentBlock(global::Sungero.Workflow.AssignmentBlock block) : base(block) { }
  }
}

// ==================================================================
// PreparingDraftResolutionAssignmentChildWrappers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}
