
// ==================================================================
// Order.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OrderFilter<T> :
      global::Sungero.RecordManagement.Server.OrderBaseFilter<T>
      where T : class, global::Sungero.RecordManagement.IOrder
    {
      private global::Sungero.RecordManagement.IOrderFilterState filter
      {
        get
        {
          return (Sungero.RecordManagement.IOrderFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public OrderFilter(global::Sungero.RecordManagement.IOrderFilterState filter)
      : base(filter)
      {
      }

      protected OrderFilter()
      {
      }
    }
    public class OrderSearchDialogModel : global::Sungero.RecordManagement.Server.OrderBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> PreparedBy { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }




                   public new OrderVersionsModel Versions { get { return (OrderVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new OrderTrackingModel Tracking { get { return (OrderTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class OrderVersionsModel : global::Sungero.RecordManagement.Server.OrderBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class OrderTrackingModel : global::Sungero.RecordManagement.Server.OrderBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.RecordManagement.Server.OrderFilter<global::Sungero.RecordManagement.IOrder>))]

  public class Order :
    global::Sungero.RecordManagement.Server.OrderBase, global::Sungero.RecordManagement.IOrder, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("9570e517-7ab7-4f23-a959-3652715efad3");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.RecordManagement.Server.Order.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.RecordManagement.IOrder, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.RecordManagement.IOrderState State
    {
      get { return (global::Sungero.RecordManagement.IOrderState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.RecordManagement.Shared.OrderState(this);
    }

    public new virtual global::Sungero.RecordManagement.IOrderInfo Info
    {
      get { return (global::Sungero.RecordManagement.IOrderInfo)base.Info; }
    }

    public new virtual global::Sungero.RecordManagement.IOrderAccessRights AccessRights
    {
      get { return (global::Sungero.RecordManagement.IOrderAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.RecordManagement.Server.OrderAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.RecordManagement.Server.OrderFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.RecordManagement.Shared.OrderFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.RecordManagement.OrderServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.RecordManagement.OrderSharedHandlers(this);
    }









    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IOrderVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.RecordManagement.IOrderTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.OrderCreatingFromServerHandler((global::Sungero.RecordManagement.IOrder)entitySource, this.Info);
    }

    #region Framework events





    #endregion


    public Order()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.RecordManagement.OrderConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// OrderHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{

  public partial class OrderFilteringServerHandler<T>
    : global::Sungero.RecordManagement.OrderBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.RecordManagement.IOrder
  {
    private global::Sungero.RecordManagement.IOrderFilterState _filter
    {
      get
      {
        return (Sungero.RecordManagement.IOrderFilterState)this.Filter;
      }
    }

    public OrderFilteringServerHandler(global::Sungero.RecordManagement.IOrderFilterState filter)
    : base(filter)
    {
    }

    protected OrderFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> DocumentRegisterFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentRegisterFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentKindFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.BusinessUnitFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }


  }

  public partial class OrderSearchDialogServerHandler : global::Sungero.RecordManagement.OrderBaseSearchDialogServerHandler
   {
     private global::Sungero.RecordManagement.Server.OrderSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.RecordManagement.Server.OrderSearchDialogModel)this.Dialog;
       }
     }

     public OrderSearchDialogServerHandler(global::Sungero.RecordManagement.Server.OrderSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class OrderServerHandlers : global::Sungero.RecordManagement.OrderBaseServerHandlers
  {
    private global::Sungero.RecordManagement.IOrder _obj
    {
      get { return (global::Sungero.RecordManagement.IOrder)this.Entity; }
    }

    public OrderServerHandlers(global::Sungero.RecordManagement.IOrder entity)
      : base(entity)
    {
    }
  }

  public partial class OrderCreatingFromServerHandler : global::Sungero.RecordManagement.OrderBaseCreatingFromServerHandler
  {
    private global::Sungero.RecordManagement.IOrder _source
    {
      get { return (global::Sungero.RecordManagement.IOrder)this.Source; }
    }

    private global::Sungero.RecordManagement.IOrderInfo _info
    {
      get { return (global::Sungero.RecordManagement.IOrderInfo)this._Info; }
    }

    public OrderCreatingFromServerHandler(global::Sungero.RecordManagement.IOrder source, global::Sungero.RecordManagement.IOrderInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// OrderEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
}

// ==================================================================
// OrderAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class OrderAccessRights : 
    Sungero.RecordManagement.Server.OrderBaseAccessRights, Sungero.RecordManagement.IOrderAccessRights
  {

    public OrderAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class OrderTypeAccessRights : 
    Sungero.RecordManagement.Server.OrderBaseTypeAccessRights, Sungero.RecordManagement.IOrderAccessRights
  {

    public OrderTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// OrderRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OrderRepositoryImplementer<T> : 
      global::Sungero.RecordManagement.Server.OrderBaseRepositoryImplementer<T>,
      global::Sungero.RecordManagement.IOrderRepositoryImplementer<T>
      where T : global::Sungero.RecordManagement.IOrder 
    {
       public new global::Sungero.RecordManagement.IOrderAccessRights AccessRights
       {
          get { return (global::Sungero.RecordManagement.IOrderAccessRights)base.AccessRights; }
       }

       public new global::Sungero.RecordManagement.IOrderInfo Info
       {
          get { return (global::Sungero.RecordManagement.IOrderInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.RecordManagement.Server.OrderTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// OrderPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
    public class OrderDocumentRegisterPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDocumentRegisterPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOrder
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentRegister>)query;
        var typedState = (global::Sungero.RecordManagement.IOrderFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OrderFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentRegisterFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentRegister>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOrder>(query);
      }
    }

    public class OrderDocumentKindPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDocumentKindPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOrder
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.RecordManagement.IOrderFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OrderFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOrder>(query);
      }
    }

    public class OrderBusinessUnitPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseBusinessUnitPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOrder
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.RecordManagement.IOrderFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OrderFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOrder>(query);
      }
    }

    public class OrderDepartmentPanelNavigationFilter : global::Sungero.RecordManagement.Server.OrderBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.RecordManagement.IOrder
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.RecordManagement.IOrderFilterState)this.State;
        var handlers = new global::Sungero.RecordManagement.OrderFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.RecordManagement.IOrder>(query);
      }
    }

}

// ==================================================================
// OrderServerFunctions.g.cs
// ==================================================================

namespace Sungero.RecordManagement.Server
{
  public partial class OrderFunctions : global::Sungero.RecordManagement.Server.OrderBaseFunctions
  {
    private global::Sungero.RecordManagement.IOrder _obj
    {
      get { return (global::Sungero.RecordManagement.IOrder)this.Entity; }
    }

    public OrderFunctions(global::Sungero.RecordManagement.IOrder entity) : base(entity) { }
  }
}

// ==================================================================
// OrderFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Functions
{
  internal static class Order
  {
  }
}

// ==================================================================
// OrderServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Server
{
  public class OrderServerPublicFunctions : global::Sungero.RecordManagement.Server.IOrderServerPublicFunctions
  {
  }
}

// ==================================================================
// OrderQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement.Queries
{
  public class Order
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.RecordManagement.Server.Order.OrderQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// OrderServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.RecordManagement
{
  public partial class OrderConvertingFromServerHandler : global::Sungero.RecordManagement.OrderBaseConvertingFromServerHandler
  { 
    private global::Sungero.RecordManagement.IOrderInfo _info
    {
      get { return (global::Sungero.RecordManagement.IOrderInfo)this._Info; }
    }

    public OrderConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.RecordManagement.IOrderInfo info)
      : base(source, info)
    {
    }
  }
}
