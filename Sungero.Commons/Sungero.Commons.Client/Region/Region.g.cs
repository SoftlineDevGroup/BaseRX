
// ==================================================================
// Region.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Commons.Client
{
  public class Region :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Sungero.Commons.IRegion
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4efe2fa9-b1d1-4b47-b366-4128fe0a391c");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Commons.Client.Region.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Commons.IRegion, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Commons.IRegionState State
    {
      get
      {
        return (global::Sungero.Commons.IRegionState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Commons.Shared.RegionState(this);
    }

    public new global::Sungero.Commons.IRegionInfo Info
    {
      get
      {
        return (global::Sungero.Commons.IRegionInfo)base.Info;
      }
    }

    public new global::Sungero.Commons.IRegionAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Commons.IRegionAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Commons.Client.RegionAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Code;

        public virtual global::System.String Code
        {
          get { return this._Code.Value; }
          set { this._Code.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.ICountry> _Country;

              public virtual global::Sungero.Commons.ICountry Country
              {
              get
              {
                return this._Country.Value as global::Sungero.Commons.ICountry;
              }

              set
              {
                (this._Country as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Commons.Client.RegionActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Commons.Client.RegionCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Commons.Client.RegionAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Commons.Client.RegionAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Commons.Client.RegionFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Commons.Shared.RegionFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Commons.RegionClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Commons.RegionSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Commons.RegionSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void CountryChangedHandler()
    {
      var args = new global::Sungero.Commons.Shared.RegionCountryChangedEventArgs(this.State.Properties.Country, this.Country, this);
     ((global::Sungero.Commons.RegionSharedHandlers)this.SharedHandlers).CountryChanged(args);
    }

    protected void CodeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Code, this.Code, this);
     ((global::Sungero.Commons.RegionSharedHandlers)this.SharedHandlers).CodeChanged(args);
    }



  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Sungero.Commons.RegionClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.ICountry CountryValueInputHandler(global::Sungero.Commons.ICountry value)
  {
    var args = new global::Sungero.Commons.Client.RegionCountryValueInputEventArgs(this.Country, value, this, this.Info.Properties.Country);
    ((global::Sungero.Commons.RegionClientHandlers)this.Handlers).CountryValueInput(args);
    return args.NewValue;
  }

  protected global::System.String CodeValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Code, value, this, this.Info.Properties.Code);
    ((global::Sungero.Commons.RegionClientHandlers)this.Handlers).CodeValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitCountryNavigationProperty()
              {
                this._Country = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.ICountry>("Country", this);
                this._Country.ValueChanged += (sender, e) => { this.CountryChangedHandler(); };
                this.AddProperty(this._Country as global::Sungero.Domain.Client.IProperty);
              }




    public Region()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._Code = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Code", this);
            this._Code.ValueChanged += (sender, e) => { this.CodeChangedHandler(); };
            this.AddProperty(this._Code);

            this.InitCountryNavigationProperty();








    }

    #endregion

  }
}

// ==================================================================
// RegionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Commons.Client
{
  public class RegionPresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Sungero.Commons.IRegion
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CountryCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CountryCollectionPresenter
              {
          get { return this._CountryCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
                  this._CountryCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.ICountry>(global::System.Guid.Parse("553a52cc-46de-499d-a94d-1d89764eb4e5"));
              this._CountryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICountry>(() => this.Entity.Id, typeof(T), "Country");


    }

    public RegionPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// RegionCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Commons.Client
{
  public class RegionCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Sungero.Commons.IRegion
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public RegionCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public RegionCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public RegionCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public RegionCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// RegionRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Commons.Client
{ 
  public class RegionRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Sungero.Commons.IRegionRepositoryImplementer<T>
      where T : global::Sungero.Commons.IRegion
    {
       public new global::Sungero.Commons.IRegionAccessRights AccessRights
       {
          get { return (global::Sungero.Commons.IRegionAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Commons.IRegionInfo Info
       {
          get { return (global::Sungero.Commons.IRegionInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Commons.Client.RegionTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// RegionAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Commons.Client
{
  public class RegionAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Sungero.Commons.IRegionAccessRights
  {

    public RegionAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class RegionTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Sungero.Commons.IRegionAccessRights
  {

    public RegionTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
