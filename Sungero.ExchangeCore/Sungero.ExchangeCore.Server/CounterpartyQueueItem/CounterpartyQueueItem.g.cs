
// ==================================================================
// CounterpartyQueueItem.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class CounterpartyQueueItemFilter<T> :
      global::Sungero.ExchangeCore.Server.QueueItemBaseFilter<T>
      where T : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
    {
      private global::Sungero.ExchangeCore.ICounterpartyQueueItemFilterState filter
      {
        get
        {
          return (Sungero.ExchangeCore.ICounterpartyQueueItemFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public CounterpartyQueueItemFilter(global::Sungero.ExchangeCore.ICounterpartyQueueItemFilterState filter)
      : base(filter)
      {
      }

      protected CounterpartyQueueItemFilter()
      {
      }
    }
      public class CounterpartyQueueItemUiFilter<T> :
        global::Sungero.ExchangeCore.Server.QueueItemBaseUiFilter<T>
        where T : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class CounterpartyQueueItemSearchDialogModel : global::Sungero.ExchangeCore.Server.QueueItemBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String ExternalId { get; protected set; }
                  public override global::System.Int32? Retries { get; protected set; }
                  public override global::System.String Note { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBoxBase> Box { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> ProcessingStatus { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> LastUpdate { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBusinessUnitBox> RootBox { get; protected set; }


                  public virtual global::System.String CounterpartyName { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Workflow.ITask> MatchingTask { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> SyncResult { get; protected set; }


        }




  public class CounterpartyQueueItemFilterForMatchingTask<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Workflow.ITask
    where TSourceEntity : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.CounterpartyQueueItemMatchingTaskPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).MatchingTaskFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyQueueItemFilterForMatchingTask(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyQueueItemSearchFilterForMatchingTask<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Workflow.ITask
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.CounterpartyQueueItemMatchingTaskSearchPropertyFilteringServerHandler<TQueryEntity>().MatchingTaskSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyQueueItemSearchFilterForMatchingTask(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyQueueItemFilterForCounterparty<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.CounterpartyQueueItemCounterpartyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyQueueItemFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyQueueItemSearchFilterForCounterparty<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.CounterpartyQueueItemCounterpartySearchPropertyFilteringServerHandler<TQueryEntity>().CounterpartySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyQueueItemSearchFilterForCounterparty(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemFilter<global::Sungero.ExchangeCore.ICounterpartyQueueItem>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemUiFilter<global::Sungero.ExchangeCore.ICounterpartyQueueItem>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemFilterForMatchingTask<global::Sungero.Workflow.ITask, global::Sungero.ExchangeCore.ICounterpartyQueueItem>), "MatchingTask")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemSearchFilterForMatchingTask<global::Sungero.Workflow.ITask>), "MatchingTask")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemFilterForCounterparty<global::Sungero.Parties.ICounterparty, global::Sungero.ExchangeCore.ICounterpartyQueueItem>), "Counterparty")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemSearchFilterForCounterparty<global::Sungero.Parties.ICounterparty>), "Counterparty")]


  public class CounterpartyQueueItem :
    global::Sungero.ExchangeCore.Server.QueueItemBase, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("50a0d7aa-1f04-4e4a-8f0c-044e0ba99949");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Server.CounterpartyQueueItem.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.ICounterpartyQueueItem, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.ExchangeCore.ICounterpartyQueueItemState State
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemState(this);
    }

    public new virtual global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo Info
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo)base.Info; }
    }

    public new virtual global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights AccessRights
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Server.CounterpartyQueueItemAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.ExchangeCore.Server.CounterpartyQueueItemFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.CounterpartyQueueItemServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers(this);
    }

    private global::System.String _CounterpartyName;
    public virtual global::System.String CounterpartyName
    {
      get
      {
        return this._CounterpartyName;
      }

      set
      {
        this.SetPropertyValue("CounterpartyName", this._CounterpartyName, value, (propertyValue) => { this._CounterpartyName = propertyValue; }, this.CounterpartyNameChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _SyncResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.ExchangeCore.CounterpartyQueueItem.SyncResult),
      typeof(global::Sungero.ExchangeCore.Server.CounterpartyQueueItem),
      "SyncResult");

    public static global::Sungero.Domain.Shared.EnumerationItems SyncResultItems
    {
      get { return global::Sungero.ExchangeCore.Server.CounterpartyQueueItem._SyncResultItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems SyncResultAllowedItems
    {
      get { return global::Sungero.ExchangeCore.Server.CounterpartyQueueItem.SyncResultItems; }
    }

    private global::Sungero.Core.Enumeration? _SyncResult;

    public virtual global::Sungero.Core.Enumeration? SyncResult
    {
      get { return this._SyncResult; }
      set { this.SetEnumPropertyValue("SyncResult", this._SyncResult, value, (propertyValue) => { this._SyncResult = propertyValue; }, this.SyncResultChangedHandler, this.SyncResultAllowedItems); }
    }


    private global::Sungero.Workflow.ITask _MatchingTask;
    public virtual global::Sungero.Workflow.ITask MatchingTask
    {
      get
      {
        return this._MatchingTask;
      }

      set
      {
        this.SetPropertyValue("MatchingTask", this._MatchingTask, value, (propertyValue) => { this._MatchingTask = propertyValue; }, this.MatchingTaskChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _Counterparty;
    public virtual global::Sungero.Parties.ICounterparty Counterparty
    {
      get
      {
        return this._Counterparty;
      }

      set
      {
        this.SetPropertyValue("Counterparty", this._Counterparty, value, (propertyValue) => { this._Counterparty = propertyValue; }, this.CounterpartyChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.ExchangeCore.CounterpartyQueueItemCreatingFromServerHandler((global::Sungero.ExchangeCore.ICounterpartyQueueItem)entitySource, this.Info);
    }

    #region Framework events

    protected void MatchingTaskChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemMatchingTaskChangedEventArgs(this.State.Properties.MatchingTask, this.MatchingTask, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).MatchingTaskChanged(args);
    }

    protected void SyncResultChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.SyncResult, this.SyncResult, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).SyncResultChanged(args);
    }

    protected void CounterpartyNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.CounterpartyName, this.CounterpartyName, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).CounterpartyNameChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }



    #endregion


    public CounterpartyQueueItem()
    {
    }

  }
}

// ==================================================================
// CounterpartyQueueItemHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore
{
  public partial class CounterpartyQueueItemMatchingTaskPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Workflow.ITask
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItem _obj
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItem)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> MatchingTaskFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyQueueItemMatchingTaskPropertyFilteringServerHandler(global::Sungero.ExchangeCore.ICounterpartyQueueItem entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyQueueItemMatchingTaskSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Workflow.ITask
  {

    public virtual global::System.Linq.IQueryable<T> MatchingTaskSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyQueueItemMatchingTaskSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class CounterpartyQueueItemCounterpartyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItem _obj
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItem)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> CounterpartyFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyQueueItemCounterpartyPropertyFilteringServerHandler(global::Sungero.ExchangeCore.ICounterpartyQueueItem entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyQueueItemCounterpartySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> CounterpartySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyQueueItemCounterpartySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class CounterpartyQueueItemFilteringServerHandler<T>
    : global::Sungero.ExchangeCore.QueueItemBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItemFilterState _filter
    {
      get
      {
        return (Sungero.ExchangeCore.ICounterpartyQueueItemFilterState)this.Filter;
      }
    }

    public CounterpartyQueueItemFilteringServerHandler(global::Sungero.ExchangeCore.ICounterpartyQueueItemFilterState filter)
    : base(filter)
    {
    }

    protected CounterpartyQueueItemFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }


  }

  public partial class CounterpartyQueueItemUiFilteringServerHandler<T>
    : global::Sungero.ExchangeCore.QueueItemBaseUiFilteringServerHandler<T>
    where T : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class CounterpartyQueueItemSearchDialogServerHandler : global::Sungero.ExchangeCore.QueueItemBaseSearchDialogServerHandler
   {
     private global::Sungero.ExchangeCore.Server.CounterpartyQueueItemSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.ExchangeCore.Server.CounterpartyQueueItemSearchDialogModel)this.Dialog;
       }
     }

     public CounterpartyQueueItemSearchDialogServerHandler(global::Sungero.ExchangeCore.Server.CounterpartyQueueItemSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class CounterpartyQueueItemServerHandlers : global::Sungero.ExchangeCore.QueueItemBaseServerHandlers
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItem _obj
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItem)this.Entity; }
    }

    public CounterpartyQueueItemServerHandlers(global::Sungero.ExchangeCore.ICounterpartyQueueItem entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyQueueItemCreatingFromServerHandler : global::Sungero.ExchangeCore.QueueItemBaseCreatingFromServerHandler
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItem _source
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItem)this.Source; }
    }

    private global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo _info
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo)this._Info; }
    }

    public CounterpartyQueueItemCreatingFromServerHandler(global::Sungero.ExchangeCore.ICounterpartyQueueItem source, global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// CounterpartyQueueItemEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}

// ==================================================================
// CounterpartyQueueItemAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class CounterpartyQueueItemAccessRights : 
    Sungero.ExchangeCore.Server.QueueItemBaseAccessRights, Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights
  {

    public CounterpartyQueueItemAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CounterpartyQueueItemTypeAccessRights : 
    Sungero.ExchangeCore.Server.QueueItemBaseTypeAccessRights, Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights
  {

    public CounterpartyQueueItemTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// CounterpartyQueueItemRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class CounterpartyQueueItemRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Server.QueueItemBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.ICounterpartyQueueItemRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.ICounterpartyQueueItem 
    {
       public new global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo Info
       {
          get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Server.CounterpartyQueueItemTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CounterpartyQueueItemPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}

// ==================================================================
// CounterpartyQueueItemServerFunctions.g.cs
// ==================================================================

namespace Sungero.ExchangeCore.Server
{
  public partial class CounterpartyQueueItemFunctions : global::Sungero.ExchangeCore.Server.QueueItemBaseFunctions
  {
    private global::Sungero.ExchangeCore.ICounterpartyQueueItem _obj
    {
      get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItem)this.Entity; }
    }

    public CounterpartyQueueItemFunctions(global::Sungero.ExchangeCore.ICounterpartyQueueItem entity) : base(entity) { }
  }
}

// ==================================================================
// CounterpartyQueueItemFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Functions
{
  internal static class CounterpartyQueueItem
  {
  }
}

// ==================================================================
// CounterpartyQueueItemServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class CounterpartyQueueItemServerPublicFunctions : global::Sungero.ExchangeCore.Server.ICounterpartyQueueItemServerPublicFunctions
  {
  }
}

// ==================================================================
// CounterpartyQueueItemQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Queries
{
  public class CounterpartyQueueItem
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.ExchangeCore.Server.CounterpartyQueueItem.CounterpartyQueueItemQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
