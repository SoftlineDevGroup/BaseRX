
// ==================================================================
// DepartmentBox.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class DepartmentBoxFilter<T> :
      global::Sungero.ExchangeCore.Server.BoxBaseFilter<T>
      where T : class, global::Sungero.ExchangeCore.IDepartmentBox
    {
      private global::Sungero.ExchangeCore.IDepartmentBoxFilterState filter
      {
        get
        {
          return (Sungero.ExchangeCore.IDepartmentBoxFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public DepartmentBoxFilter(global::Sungero.ExchangeCore.IDepartmentBoxFilterState filter)
      : base(filter)
      {
      }

      protected DepartmentBoxFilter()
      {
      }
    }
      public class DepartmentBoxUiFilter<T> :
        global::Sungero.ExchangeCore.Server.BoxBaseUiFilter<T>
        where T : class, global::Sungero.ExchangeCore.IDepartmentBox
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class DepartmentBoxSearchDialogModel : global::Sungero.ExchangeCore.Server.BoxBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Note { get; protected set; }
                  public override global::System.String Name { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> ConnectionStatus { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Routing { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Responsible { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBoxBase> ParentBox { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }


        }




  public class DepartmentBoxFilterForParentBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
    where TSourceEntity : class, global::Sungero.ExchangeCore.IDepartmentBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxParentBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ParentBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxFilterForParentBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DepartmentBoxSearchFilterForParentBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxParentBoxSearchPropertyFilteringServerHandler<TQueryEntity>().ParentBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxSearchFilterForParentBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DepartmentBoxFilterForDepartment<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IDepartment
    where TSourceEntity : class, global::Sungero.ExchangeCore.IDepartmentBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxDepartmentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).DepartmentFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxFilterForDepartment(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DepartmentBoxSearchFilterForDepartment<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Company.IDepartment
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxDepartmentSearchPropertyFilteringServerHandler<TQueryEntity>().DepartmentSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxSearchFilterForDepartment(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DepartmentBoxFilterForRootBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
    where TSourceEntity : class, global::Sungero.ExchangeCore.IDepartmentBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxRootBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RootBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class DepartmentBoxSearchFilterForRootBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.DepartmentBoxRootBoxSearchPropertyFilteringServerHandler<TQueryEntity>().RootBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public DepartmentBoxSearchFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxFilter<global::Sungero.ExchangeCore.IDepartmentBox>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxUiFilter<global::Sungero.ExchangeCore.IDepartmentBox>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxFilterForParentBox<global::Sungero.ExchangeCore.IBoxBase, global::Sungero.ExchangeCore.IDepartmentBox>), "ParentBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxSearchFilterForParentBox<global::Sungero.ExchangeCore.IBoxBase>), "ParentBox")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxFilterForDepartment<global::Sungero.Company.IDepartment, global::Sungero.ExchangeCore.IDepartmentBox>), "Department")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxSearchFilterForDepartment<global::Sungero.Company.IDepartment>), "Department")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox, global::Sungero.ExchangeCore.IDepartmentBox>), "RootBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.DepartmentBoxSearchFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox>), "RootBox")]


  public class DepartmentBox :
    global::Sungero.ExchangeCore.Server.BoxBase, global::Sungero.ExchangeCore.IDepartmentBox, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("fd8945e2-e3b6-43f9-aac1-fb7ce4d984c6");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Server.DepartmentBox.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IDepartmentBox, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.ExchangeCore.IDepartmentBoxState State
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBoxState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.DepartmentBoxState(this);
    }

    public new virtual global::Sungero.ExchangeCore.IDepartmentBoxInfo Info
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBoxInfo)base.Info; }
    }

    public new virtual global::Sungero.ExchangeCore.IDepartmentBoxAccessRights AccessRights
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBoxAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Server.DepartmentBoxAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.DepartmentBoxFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.DepartmentBoxServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers(this);
    }

    private global::System.String _ServiceId;
    public virtual global::System.String ServiceId
    {
      get
      {
        return this._ServiceId;
      }

      set
      {
        this.SetPropertyValue("ServiceId", this._ServiceId, value, (propertyValue) => { this._ServiceId = propertyValue; }, this.ServiceIdChangedHandler);
      }
    }
    private global::System.Boolean? _IsDeleted;
    public virtual global::System.Boolean? IsDeleted
    {
      get
      {
        return this._IsDeleted;
      }

      set
      {
        this.SetPropertyValue("IsDeleted", this._IsDeleted, value, (propertyValue) => { this._IsDeleted = propertyValue; }, this.IsDeletedChangedHandler);
      }
    }
    private global::System.String _ServiceName;
    public virtual global::System.String ServiceName
    {
      get
      {
        return this._ServiceName;
      }

      set
      {
        this.SetPropertyValue("ServiceName", this._ServiceName, value, (propertyValue) => { this._ServiceName = propertyValue; }, this.ServiceNameChangedHandler);
      }
    }







    private global::Sungero.ExchangeCore.IBoxBase _ParentBox;
    public virtual global::Sungero.ExchangeCore.IBoxBase ParentBox
    {
      get
      {
        return this._ParentBox;
      }

      set
      {
        this.SetPropertyValue("ParentBox", this._ParentBox, value, (propertyValue) => { this._ParentBox = propertyValue; }, this.ParentBoxChangedHandler);
      }
    }
    private global::Sungero.Company.IDepartment _Department;
    public virtual global::Sungero.Company.IDepartment Department
    {
      get
      {
        return this._Department;
      }

      set
      {
        this.SetPropertyValue("Department", this._Department, value, (propertyValue) => { this._Department = propertyValue; }, this.DepartmentChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBusinessUnitBox _RootBox;
    public virtual global::Sungero.ExchangeCore.IBusinessUnitBox RootBox
    {
      get
      {
        return this._RootBox;
      }

      set
      {
        this.SetPropertyValue("RootBox", this._RootBox, value, (propertyValue) => { this._RootBox = propertyValue; }, this.RootBoxChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.ExchangeCore.DepartmentBoxCreatingFromServerHandler((global::Sungero.ExchangeCore.IDepartmentBox)entitySource, this.Info);
    }

    #region Framework events

    protected void ParentBoxChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.DepartmentBoxParentBoxChangedEventArgs(this.State.Properties.ParentBox, this.ParentBox, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).ParentBoxChanged(args);
    }

    protected void DepartmentChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.DepartmentBoxDepartmentChangedEventArgs(this.State.Properties.Department, this.Department, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).DepartmentChanged(args);
    }

    protected void RootBoxChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.DepartmentBoxRootBoxChangedEventArgs(this.State.Properties.RootBox, this.RootBox, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).RootBoxChanged(args);
    }

    protected void ServiceIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceId, this.ServiceId, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).ServiceIdChanged(args);
    }

    protected void IsDeletedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsDeleted, this.IsDeleted, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).IsDeletedChanged(args);
    }

    protected void ServiceNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ServiceName, this.ServiceName, this);
     ((global::Sungero.ExchangeCore.DepartmentBoxSharedHandlers)this.SharedHandlers).ServiceNameChanged(args);
    }



    #endregion


    public DepartmentBox()
    {
    }

  }
}

// ==================================================================
// DepartmentBoxHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore
{
  public partial class DepartmentBoxParentBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _obj
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ParentBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxParentBoxPropertyFilteringServerHandler(global::Sungero.ExchangeCore.IDepartmentBox entity)
      : base(entity)
    {
    }
  }

  public partial class DepartmentBoxParentBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {

    public virtual global::System.Linq.IQueryable<T> ParentBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxParentBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DepartmentBoxDepartmentPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IDepartment
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _obj
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> DepartmentFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxDepartmentPropertyFilteringServerHandler(global::Sungero.ExchangeCore.IDepartmentBox entity)
      : base(entity)
    {
    }
  }

  public partial class DepartmentBoxDepartmentSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IDepartment
  {

    public virtual global::System.Linq.IQueryable<T> DepartmentSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxDepartmentSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class DepartmentBoxRootBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _obj
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RootBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxRootBoxPropertyFilteringServerHandler(global::Sungero.ExchangeCore.IDepartmentBox entity)
      : base(entity)
    {
    }
  }

  public partial class DepartmentBoxRootBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {

    public virtual global::System.Linq.IQueryable<T> RootBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public DepartmentBoxRootBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class DepartmentBoxFilteringServerHandler<T>
    : global::Sungero.ExchangeCore.BoxBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.ExchangeCore.IDepartmentBox
  {
    private global::Sungero.ExchangeCore.IDepartmentBoxFilterState _filter
    {
      get
      {
        return (Sungero.ExchangeCore.IDepartmentBoxFilterState)this.Filter;
      }
    }

    public DepartmentBoxFilteringServerHandler(global::Sungero.ExchangeCore.IDepartmentBoxFilterState filter)
    : base(filter)
    {
    }

    protected DepartmentBoxFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.BusinessUnitFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.ExchangeCore.IExchangeService> ExchangeServiceFiltering(global::System.Linq.IQueryable<Sungero.ExchangeCore.IExchangeService> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.ExchangeServiceFiltering(query, e);
              return query;
      }


  }

  public partial class DepartmentBoxUiFilteringServerHandler<T>
    : global::Sungero.ExchangeCore.BoxBaseUiFilteringServerHandler<T>
    where T : class, global::Sungero.ExchangeCore.IDepartmentBox
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class DepartmentBoxSearchDialogServerHandler : global::Sungero.ExchangeCore.BoxBaseSearchDialogServerHandler
   {
     private global::Sungero.ExchangeCore.Server.DepartmentBoxSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.ExchangeCore.Server.DepartmentBoxSearchDialogModel)this.Dialog;
       }
     }

     public DepartmentBoxSearchDialogServerHandler(global::Sungero.ExchangeCore.Server.DepartmentBoxSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class DepartmentBoxServerHandlers : global::Sungero.ExchangeCore.BoxBaseServerHandlers
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _obj
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Entity; }
    }

    public DepartmentBoxServerHandlers(global::Sungero.ExchangeCore.IDepartmentBox entity)
      : base(entity)
    {
    }
  }

  public partial class DepartmentBoxCreatingFromServerHandler : global::Sungero.ExchangeCore.BoxBaseCreatingFromServerHandler
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _source
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Source; }
    }

    private global::Sungero.ExchangeCore.IDepartmentBoxInfo _info
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBoxInfo)this._Info; }
    }

    public DepartmentBoxCreatingFromServerHandler(global::Sungero.ExchangeCore.IDepartmentBox source, global::Sungero.ExchangeCore.IDepartmentBoxInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// DepartmentBoxEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}

// ==================================================================
// DepartmentBoxAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class DepartmentBoxAccessRights : 
    Sungero.ExchangeCore.Server.BoxBaseAccessRights, Sungero.ExchangeCore.IDepartmentBoxAccessRights
  {

    public DepartmentBoxAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class DepartmentBoxTypeAccessRights : 
    Sungero.ExchangeCore.Server.BoxBaseTypeAccessRights, Sungero.ExchangeCore.IDepartmentBoxAccessRights
  {

    public DepartmentBoxTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// DepartmentBoxRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class DepartmentBoxRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Server.BoxBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IDepartmentBoxRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IDepartmentBox 
    {
       public new global::Sungero.ExchangeCore.IDepartmentBoxAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IDepartmentBoxAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IDepartmentBoxInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IDepartmentBoxInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Server.DepartmentBoxTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// DepartmentBoxPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class DepartmentBoxBusinessUnitPanelNavigationFilter : global::Sungero.ExchangeCore.Server.BoxBaseBusinessUnitPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.ExchangeCore.IDepartmentBox
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.ExchangeCore.IDepartmentBoxFilterState)this.State;
        var handlers = new global::Sungero.ExchangeCore.DepartmentBoxFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.ExchangeCore.IDepartmentBox>(query);
      }
    }

    public class DepartmentBoxExchangeServicePanelNavigationFilter : global::Sungero.ExchangeCore.Server.BoxBaseExchangeServicePanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.ExchangeCore.IDepartmentBox
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.ExchangeCore.IExchangeService>)query;
        var typedState = (global::Sungero.ExchangeCore.IDepartmentBoxFilterState)this.State;
        var handlers = new global::Sungero.ExchangeCore.DepartmentBoxFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ExchangeServiceFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.ExchangeCore.IExchangeService>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.ExchangeCore.IDepartmentBox>(query);
      }
    }

}

// ==================================================================
// DepartmentBoxServerFunctions.g.cs
// ==================================================================

namespace Sungero.ExchangeCore.Server
{
  public partial class DepartmentBoxFunctions : global::Sungero.ExchangeCore.Server.BoxBaseFunctions
  {
    private global::Sungero.ExchangeCore.IDepartmentBox _obj
    {
      get { return (global::Sungero.ExchangeCore.IDepartmentBox)this.Entity; }
    }

    public DepartmentBoxFunctions(global::Sungero.ExchangeCore.IDepartmentBox entity) : base(entity) { }
  }
}

// ==================================================================
// DepartmentBoxFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Functions
{
  internal static class DepartmentBox
  {
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  void CreateDepartmentBoxes(global::Sungero.ExchangeCore.IBusinessUnitBox box)
    {
    global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions.CreateDepartmentBoxes(box);
    }
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  global::Sungero.Company.IEmployee GetResponsible(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.ServerFunctions;
      return functions.GetResponsible();
    }
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  global::Sungero.Company.IEmployee GetExchangeDocumentResponsible(global::Sungero.ExchangeCore.IDepartmentBox departmentBox, global::Sungero.Parties.ICounterparty counterparty, global::System.Collections.Generic.List<global::Sungero.Exchange.IExchangeDocumentInfo> infos)
    {
      var functions = (global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.ServerFunctions;
      return functions.GetExchangeDocumentResponsible(counterparty, infos);
    }
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  global::Sungero.ExchangeCore.IExchangeService GetExchangeService(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.ServerFunctions;
      return functions.GetExchangeService();
    }
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  global::Sungero.Company.IBusinessUnit GetBusinessUnit(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.ServerFunctions;
      return functions.GetBusinessUnit();
    }
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.DepartmentBoxFunctions" />
    internal static  global::Sungero.Company.IDepartment GetDepartment(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Server.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.ServerFunctions;
      return functions.GetDepartment();
    }

    /// <redirect project="Sungero.ExchangeCore.Shared" type="Sungero.ExchangeCore.Shared.DepartmentBoxFunctions" />
    internal static  void SetDepartmentBoxName(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Shared.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.SharedFunctions;
    functions.SetDepartmentBoxName();
    }
    /// <redirect project="Sungero.ExchangeCore.Shared" type="Sungero.ExchangeCore.Shared.DepartmentBoxFunctions" />
    internal static  global::Sungero.ExchangeCore.IBusinessUnitBox GetRootBox(global::Sungero.ExchangeCore.IDepartmentBox departmentBox)
    {
      var functions = (global::Sungero.ExchangeCore.Shared.DepartmentBoxFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)departmentBox).FunctionsContainer.SharedFunctions;
      return functions.GetRootBox();
    }

  }
}

// ==================================================================
// DepartmentBoxServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class DepartmentBoxServerPublicFunctions : global::Sungero.ExchangeCore.Server.IDepartmentBoxServerPublicFunctions
  {
  }
}

// ==================================================================
// DepartmentBoxQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Queries
{
  public class DepartmentBox
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.ExchangeCore.Server.DepartmentBox.DepartmentBoxQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
