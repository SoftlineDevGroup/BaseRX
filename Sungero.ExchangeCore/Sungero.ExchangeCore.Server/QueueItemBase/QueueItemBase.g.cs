
// ==================================================================
// QueueItemBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class QueueItemBaseFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.ExchangeCore.IQueueItemBase
    {
      protected new global::Sungero.ExchangeCore.IQueueItemBaseFilterState Filter { get; private set; }

      private global::Sungero.ExchangeCore.IQueueItemBaseFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public QueueItemBaseFilter(global::Sungero.ExchangeCore.IQueueItemBaseFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected QueueItemBaseFilter()
      {
      }
    }
      public class QueueItemBaseUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.ExchangeCore.IQueueItemBase
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class QueueItemBaseSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }
                  public virtual global::System.String ExternalId { get; protected set; }
                  public virtual global::System.Int32? Retries { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBoxBase> Box { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> ProcessingStatus { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> LastUpdate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.ExchangeCore.IBusinessUnitBox> RootBox { get; protected set; }


        }




  public class QueueItemBaseFilterForBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
    where TSourceEntity : class, global::Sungero.ExchangeCore.IQueueItemBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.QueueItemBaseBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public QueueItemBaseFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class QueueItemBaseSearchFilterForBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBoxBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.QueueItemBaseBoxSearchPropertyFilteringServerHandler<TQueryEntity>().BoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public QueueItemBaseSearchFilterForBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class QueueItemBaseFilterForRootBox<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
    where TSourceEntity : class, global::Sungero.ExchangeCore.IQueueItemBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.QueueItemBaseRootBoxPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RootBoxFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public QueueItemBaseFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class QueueItemBaseSearchFilterForRootBox<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.QueueItemBaseRootBoxSearchPropertyFilteringServerHandler<TQueryEntity>().RootBoxSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public QueueItemBaseSearchFilterForRootBox(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseFilter<global::Sungero.ExchangeCore.IQueueItemBase>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseUiFilter<global::Sungero.ExchangeCore.IQueueItemBase>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseFilterForBox<global::Sungero.ExchangeCore.IBoxBase, global::Sungero.ExchangeCore.IQueueItemBase>), "Box")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseSearchFilterForBox<global::Sungero.ExchangeCore.IBoxBase>), "Box")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox, global::Sungero.ExchangeCore.IQueueItemBase>), "RootBox")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.QueueItemBaseSearchFilterForRootBox<global::Sungero.ExchangeCore.IBusinessUnitBox>), "RootBox")]


  public class QueueItemBase :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.ExchangeCore.IQueueItemBase
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4e09273f-8b3a-489e-814e-a4ebfbba3e6c");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Server.QueueItemBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IQueueItemBase, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.ExchangeCore.IQueueItemBaseState State
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBaseState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.QueueItemBaseState(this);
    }

    public new virtual global::Sungero.ExchangeCore.IQueueItemBaseInfo Info
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBaseInfo)base.Info; }
    }

    public new virtual global::Sungero.ExchangeCore.IQueueItemBaseAccessRights AccessRights
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBaseAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Server.QueueItemBaseAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.ExchangeCore.Server.QueueItemBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.QueueItemBaseFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.QueueItemBaseServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.String _ExternalId;
    public virtual global::System.String ExternalId
    {
      get
      {
        return this._ExternalId;
      }

      set
      {
        this.SetPropertyValue("ExternalId", this._ExternalId, value, (propertyValue) => { this._ExternalId = propertyValue; }, this.ExternalIdChangedHandler);
      }
    }
    private global::System.Int32? _Retries;
    public virtual global::System.Int32? Retries
    {
      get
      {
        return this._Retries;
      }

      set
      {
        this.SetPropertyValue("Retries", this._Retries, value, (propertyValue) => { this._Retries = propertyValue; }, this.RetriesChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.DateTime? _LastUpdate;
    public virtual global::System.DateTime? LastUpdate
    {
      get
      {
        return this._LastUpdate;
      }

      set
      {
        this.SetPropertyValue("LastUpdate", this._LastUpdate, value, (propertyValue) => { this._LastUpdate = propertyValue; }, this.LastUpdateChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _ProcessingStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.ExchangeCore.QueueItemBase.ProcessingStatus),
      typeof(global::Sungero.ExchangeCore.Server.QueueItemBase),
      "ProcessingStatus");

    public static global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusItems
    {
      get { return global::Sungero.ExchangeCore.Server.QueueItemBase._ProcessingStatusItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusAllowedItems
    {
      get { return global::Sungero.ExchangeCore.Server.QueueItemBase.ProcessingStatusItems; }
    }

    private global::Sungero.Core.Enumeration? _ProcessingStatus;

    public virtual global::Sungero.Core.Enumeration? ProcessingStatus
    {
      get { return this._ProcessingStatus; }
      set { this.SetEnumPropertyValue("ProcessingStatus", this._ProcessingStatus, value, (propertyValue) => { this._ProcessingStatus = propertyValue; }, this.ProcessingStatusChangedHandler, this.ProcessingStatusAllowedItems); }
    }


    private global::Sungero.ExchangeCore.IBoxBase _Box;
    public virtual global::Sungero.ExchangeCore.IBoxBase Box
    {
      get
      {
        return this._Box;
      }

      set
      {
        this.SetPropertyValue("Box", this._Box, value, (propertyValue) => { this._Box = propertyValue; }, this.BoxChangedHandler);
      }
    }
    private global::Sungero.ExchangeCore.IBusinessUnitBox _RootBox;
    public virtual global::Sungero.ExchangeCore.IBusinessUnitBox RootBox
    {
      get
      {
        return this._RootBox;
      }

      set
      {
        this.SetPropertyValue("RootBox", this._RootBox, value, (propertyValue) => { this._RootBox = propertyValue; }, this.RootBoxChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.ExchangeCore.QueueItemBaseCreatingFromServerHandler((global::Sungero.ExchangeCore.IQueueItemBase)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void ExternalIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ExternalId, this.ExternalId, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).ExternalIdChanged(args);
    }

    protected void BoxChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.QueueItemBaseBoxChangedEventArgs(this.State.Properties.Box, this.Box, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).BoxChanged(args);
    }

    protected void RetriesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.Retries, this.Retries, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).RetriesChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void ProcessingStatusChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ProcessingStatus, this.ProcessingStatus, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).ProcessingStatusChanged(args);
    }

    protected void LastUpdateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.LastUpdate, this.LastUpdate, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).LastUpdateChanged(args);
    }

    protected void RootBoxChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.QueueItemBaseRootBoxChangedEventArgs(this.State.Properties.RootBox, this.RootBox, this);
     ((global::Sungero.ExchangeCore.QueueItemBaseSharedHandlers)this.SharedHandlers).RootBoxChanged(args);
    }



    #endregion


    public QueueItemBase()
    {
    }

  }
}

// ==================================================================
// QueueItemBaseHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore
{
  public partial class QueueItemBaseBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {
    private global::Sungero.ExchangeCore.IQueueItemBase _obj
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public QueueItemBaseBoxPropertyFilteringServerHandler(global::Sungero.ExchangeCore.IQueueItemBase entity)
      : base(entity)
    {
    }
  }

  public partial class QueueItemBaseBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBoxBase
  {

    public virtual global::System.Linq.IQueryable<T> BoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public QueueItemBaseBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class QueueItemBaseRootBoxPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    private global::Sungero.ExchangeCore.IQueueItemBase _obj
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBase)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RootBoxFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public QueueItemBaseRootBoxPropertyFilteringServerHandler(global::Sungero.ExchangeCore.IQueueItemBase entity)
      : base(entity)
    {
    }
  }

  public partial class QueueItemBaseRootBoxSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {

    public virtual global::System.Linq.IQueryable<T> RootBoxSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public QueueItemBaseRootBoxSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class QueueItemBaseFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.ExchangeCore.IQueueItemBase
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.ExchangeCore.IQueueItemBaseFilterState Filter { get; private set; }

    private global::Sungero.ExchangeCore.IQueueItemBaseFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public QueueItemBaseFilteringServerHandler(global::Sungero.ExchangeCore.IQueueItemBaseFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected QueueItemBaseFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class QueueItemBaseUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.ExchangeCore.IQueueItemBase
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class QueueItemBaseSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.ExchangeCore.Server.QueueItemBaseSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.ExchangeCore.Server.QueueItemBaseSearchDialogModel)this.Dialog;
       }
     }

     public QueueItemBaseSearchDialogServerHandler(global::Sungero.ExchangeCore.Server.QueueItemBaseSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class QueueItemBaseServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.ExchangeCore.IQueueItemBase _obj
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBase)this.Entity; }
    }

    public QueueItemBaseServerHandlers(global::Sungero.ExchangeCore.IQueueItemBase entity)
      : base(entity)
    {
    }
  }

  public partial class QueueItemBaseCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.ExchangeCore.IQueueItemBase _source
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBase)this.Source; }
    }

    private global::Sungero.ExchangeCore.IQueueItemBaseInfo _info
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBaseInfo)this._Info; }
    }

    public QueueItemBaseCreatingFromServerHandler(global::Sungero.ExchangeCore.IQueueItemBase source, global::Sungero.ExchangeCore.IQueueItemBaseInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// QueueItemBaseEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}

// ==================================================================
// QueueItemBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class QueueItemBaseAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.ExchangeCore.IQueueItemBaseAccessRights
  {

    public QueueItemBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class QueueItemBaseTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.ExchangeCore.IQueueItemBaseAccessRights
  {

    public QueueItemBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// QueueItemBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
    public class QueueItemBaseRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IQueueItemBaseRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IQueueItemBase 
    {
       public new global::Sungero.ExchangeCore.IQueueItemBaseAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IQueueItemBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IQueueItemBaseInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IQueueItemBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Server.QueueItemBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// QueueItemBasePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}

// ==================================================================
// QueueItemBaseServerFunctions.g.cs
// ==================================================================

namespace Sungero.ExchangeCore.Server
{
  public partial class QueueItemBaseFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.ExchangeCore.IQueueItemBase _obj
    {
      get { return (global::Sungero.ExchangeCore.IQueueItemBase)this.Entity; }
    }

    public QueueItemBaseFunctions(global::Sungero.ExchangeCore.IQueueItemBase entity) : base(entity) { }
  }
}

// ==================================================================
// QueueItemBaseFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Functions
{
  internal static class QueueItemBase
  {
    /// <redirect project="Sungero.ExchangeCore.Server" type="Sungero.ExchangeCore.Server.QueueItemBaseFunctions" />
    internal static  void QueueItemOnError(global::Sungero.ExchangeCore.IQueueItemBase queueItemBase, global::System.String errorMessage)
    {
      var functions = (global::Sungero.ExchangeCore.Server.QueueItemBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)queueItemBase).FunctionsContainer.ServerFunctions;
    functions.QueueItemOnError(errorMessage);
    }

  }
}

// ==================================================================
// QueueItemBaseServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class QueueItemBaseServerPublicFunctions : global::Sungero.ExchangeCore.Server.IQueueItemBaseServerPublicFunctions
  {
    public void QueueItemOnError(global::Sungero.ExchangeCore.IQueueItemBase queueItemBase, global::System.String errorMessage)
    {
global::Sungero.ExchangeCore.Functions.QueueItemBase.QueueItemOnError(queueItemBase, errorMessage);
    }
  }
}

// ==================================================================
// QueueItemBaseQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Queries
{
  public class QueueItemBase
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.ExchangeCore.Server.QueueItemBase.QueueItemBaseQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
