
// ==================================================================
// BusinessUnitBoxExchangeServiceCertificates.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
  public class BusinessUnitBoxExchangeServiceCertificatesFilterForCertificate<TQueryEntity, TSourceEntity, TRootEntity>
    : global::Sungero.Domain.ChildEntityPropertyFilterBase<TQueryEntity, TSourceEntity, TRootEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.ICertificate
    where TSourceEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates
    where TRootEntity : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity, TRootEntity rootEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesCertificatePropertyFilteringServerHandler<TQueryEntity>(sourceEntity, rootEntity).ExchangeServiceCertificatesCertificateFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public BusinessUnitBoxExchangeServiceCertificatesFilterForCertificate(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class BusinessUnitBoxExchangeServiceCertificatesSearchFilterForCertificate<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.ICertificate
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesCertificateSearchPropertyFilteringServerHandler<TQueryEntity>().ExchangeServiceCertificatesCertificateSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public BusinessUnitBoxExchangeServiceCertificatesSearchFilterForCertificate(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.ExchangeCore.Server.BusinessUnitBoxExchangeServiceCertificatesFilterForCertificate<global::Sungero.CoreEntities.ICertificate, global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates, global::Sungero.ExchangeCore.IBusinessUnitBox>), "Certificate")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.ExchangeCore.Server.BusinessUnitBoxExchangeServiceCertificatesSearchFilterForCertificate<global::Sungero.CoreEntities.ICertificate>), "Certificate")]


  public class BusinessUnitBoxExchangeServiceCertificates :
    global::Sungero.Domain.ChildEntity, global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("6b3c4688-1125-4f7e-a24b-7cd485aab591");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Server.BusinessUnitBoxExchangeServiceCertificates.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates, Sungero.Domain.Interfaces"; }
    }

    public new virtual global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesState State
    {
      get { return (global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxExchangeServiceCertificatesState(this);
    }

    public new virtual global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesInfo Info
    {
      get { return (global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesInfo)base.Info; }
    }


    public global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox { get; set; }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.BusinessUnitBox; }
      set { this.BusinessUnitBox = (global::Sungero.ExchangeCore.IBusinessUnitBox)value; }
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedHandlers(this);
    }







    private global::Sungero.CoreEntities.ICertificate _Certificate;
    public virtual global::Sungero.CoreEntities.ICertificate Certificate
    {
      get
      {
        return this._Certificate;
      }

      set
      {
        this.SetPropertyValue("Certificate", this._Certificate, value, (propertyValue) => { this._Certificate = propertyValue; }, this.CertificateChangedHandler);
      }
    }




    #region Framework events

    protected void CertificateChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxExchangeServiceCertificatesCertificateChangedEventArgs(this.State.Properties.Certificate, this.Certificate, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedHandlers)this.SharedHandlers).ExchangeServiceCertificatesCertificateChanged(args);
    }



    #endregion


    public BusinessUnitBoxExchangeServiceCertificates()
    {
    }

  }
}

// ==================================================================
// BusinessUnitBoxExchangeServiceCertificatesHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore
{
  public partial class BusinessUnitBoxExchangeServiceCertificatesCertificatePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.ChildEntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.ICertificate
  {
    private global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates _obj
    {
      get { return (global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates)this.Entity; }
    }

    private global::Sungero.ExchangeCore.IBusinessUnitBox _root
    {
      get { return (global::Sungero.ExchangeCore.IBusinessUnitBox)this.Root; }
    }

    public virtual global::System.Linq.IQueryable<T> ExchangeServiceCertificatesCertificateFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public BusinessUnitBoxExchangeServiceCertificatesCertificatePropertyFilteringServerHandler(global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates entity, global::Sungero.ExchangeCore.IBusinessUnitBox root)
      : base(entity, root)
    {
    }
  }

  public partial class BusinessUnitBoxExchangeServiceCertificatesCertificateSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.ICertificate
  {

    public virtual global::System.Linq.IQueryable<T> ExchangeServiceCertificatesCertificateSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public BusinessUnitBoxExchangeServiceCertificatesCertificateSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



}

// ==================================================================
// BusinessUnitBoxExchangeServiceCertificatesEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Server
{
}
