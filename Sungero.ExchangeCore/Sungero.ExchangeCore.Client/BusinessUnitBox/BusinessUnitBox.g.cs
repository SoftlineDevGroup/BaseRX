
// ==================================================================
// BusinessUnitBox.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class BusinessUnitBox :
    global::Sungero.ExchangeCore.Client.BoxBase, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("2dd7a803-8db7-40e1-9da6-b41c62d367c8");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.BusinessUnitBox.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IBusinessUnitBox, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.ExchangeCore.IBusinessUnitBoxState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.IBusinessUnitBoxState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxState(this);
    }

    public new global::Sungero.ExchangeCore.IBusinessUnitBoxInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.IBusinessUnitBoxInfo)base.Info;
      }
    }

    public new global::Sungero.ExchangeCore.IBusinessUnitBoxAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.ExchangeCore.IBusinessUnitBoxAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Login;

        public virtual global::System.String Login
        {
          get { return this._Login.Value; }
          set { this._Login.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _OrganizationId;

        public virtual global::System.String OrganizationId
        {
          get { return this._OrganizationId.Value; }
          set { this._OrganizationId.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _HasExchangeServiceCertificates;

        public virtual global::System.Boolean? HasExchangeServiceCertificates
        {
          get { return this._HasExchangeServiceCertificates.Value; }
          set { this._HasExchangeServiceCertificates.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _FtsId;

        public virtual global::System.String FtsId
        {
          get { return this._FtsId.Value; }
          set { this._FtsId.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IBusinessUnit> _BusinessUnit;

              public virtual global::Sungero.Company.IBusinessUnit BusinessUnit
              {
              get
              {
                return this._BusinessUnit.Value as global::Sungero.Company.IBusinessUnit;
              }

              set
              {
                (this._BusinessUnit as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.ExchangeCore.IExchangeService> _ExchangeService;

              public virtual global::Sungero.ExchangeCore.IExchangeService ExchangeService
              {
              get
              {
                return this._ExchangeService.Value as global::Sungero.ExchangeCore.IExchangeService;
              }

              set
              {
                (this._ExchangeService as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.CoreEntities.ICertificate> _CertificateReceiptNotifications;

              public virtual global::Sungero.CoreEntities.ICertificate CertificateReceiptNotifications
              {
              get
              {
                return this._CertificateReceiptNotifications.Value as global::Sungero.CoreEntities.ICertificate;
              }

              set
              {
                (this._CertificateReceiptNotifications as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates> _ExchangeServiceCertificates;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates> ExchangeServiceCertificates
          {
            get { return this._ExchangeServiceCertificates.Value; }
          }




      protected global::Sungero.Domain.Client.TextProperty _Password;

      [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
      public virtual System.String Password
      {
        get { return this._Password.Value; }
        set { this._Password.Value = value; }
      }



    private object _ExchangeServiceCertificatesActionsHandlers;

    public object ExchangeServiceCertificatesActionsHandlers
    {
      get
      {
        if (this._ExchangeServiceCertificatesActionsHandlers == null)
          this._ExchangeServiceCertificatesActionsHandlers = this.CreateExchangeServiceCertificatesActionsHandlers();
        return this._ExchangeServiceCertificatesActionsHandlers;
      }
    }

    private object _ExchangeServiceCertificatesCollectionActionsHandlers;

    public object ExchangeServiceCertificatesCollectionActionsHandlers
    {
      get
      {
        if (this._ExchangeServiceCertificatesCollectionActionsHandlers == null)
          this._ExchangeServiceCertificatesCollectionActionsHandlers = this.CreateExchangeServiceCertificatesCollectionActionsHandlers();
        return this._ExchangeServiceCertificatesCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxAnyChildEntityCollectionActions();
    }

    protected object CreateExchangeServiceCertificatesActionsHandlers()
    {
      return null;
    }

    protected object CreateExchangeServiceCertificatesCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void BusinessUnitChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxBusinessUnitChangedEventArgs(this.State.Properties.BusinessUnit, this.BusinessUnit, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).BusinessUnitChanged(args);
    }

    protected void ExchangeServiceChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxExchangeServiceChangedEventArgs(this.State.Properties.ExchangeService, this.ExchangeService, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).ExchangeServiceChanged(args);
    }

    protected void LoginChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Login, this.Login, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).LoginChanged(args);
    }

    protected void PasswordChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.TextPropertyChangedEventArgs(this.State.Properties.Password, this.Password, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).PasswordChanged(args);
    }

    protected void OrganizationIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.OrganizationId, this.OrganizationId, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).OrganizationIdChanged(args);
    }

    protected void ExchangeServiceCertificatesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).ExchangeServiceCertificatesChanged(args);
    }

    protected void HasExchangeServiceCertificatesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.HasExchangeServiceCertificates, this.HasExchangeServiceCertificates, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).HasExchangeServiceCertificatesChanged(args);
    }

    protected void FtsIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.FtsId, this.FtsId, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).FtsIdChanged(args);
    }

    protected void CertificateReceiptNotificationsChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxCertificateReceiptNotificationsChangedEventArgs(this.State.Properties.CertificateReceiptNotifications, this.CertificateReceiptNotifications, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxSharedHandlers)this.SharedHandlers).CertificateReceiptNotificationsChanged(args);
    }



    protected virtual global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedCollectionHandlers CreateExchangeServiceCertificatesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedCollectionHandlers CreateExchangeServiceCertificatesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExchangeServiceCertificatesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeServiceCertificatesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ExchangeServiceCertificatesAdded(args);
      }
    }

    protected virtual void ExchangeServiceCertificatesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeServiceCertificatesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ExchangeServiceCertificatesDeleted(args);
      }
    }


  protected global::Sungero.Company.IBusinessUnit BusinessUnitValueInputHandler(global::Sungero.Company.IBusinessUnit value)
  {
    var args = new global::Sungero.ExchangeCore.Client.BusinessUnitBoxBusinessUnitValueInputEventArgs(this.BusinessUnit, value, this, this.Info.Properties.BusinessUnit);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).BusinessUnitValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.ExchangeCore.IExchangeService ExchangeServiceValueInputHandler(global::Sungero.ExchangeCore.IExchangeService value)
  {
    var args = new global::Sungero.ExchangeCore.Client.BusinessUnitBoxExchangeServiceValueInputEventArgs(this.ExchangeService, value, this, this.Info.Properties.ExchangeService);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).ExchangeServiceValueInput(args);
    return args.NewValue;
  }

  protected global::System.String LoginValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Login, value, this, this.Info.Properties.Login);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).LoginValueInput(args);
    return args.NewValue;
  }

  protected global::System.String PasswordValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.TextValueInputEventArgs(this.Password, value, this, this.Info.Properties.Password);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).PasswordValueInput(args);
    return args.NewValue;
  }

  protected global::System.String OrganizationIdValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.OrganizationId, value, this, this.Info.Properties.OrganizationId);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).OrganizationIdValueInput(args);
    return args.NewValue;
  }


  protected global::System.Boolean? HasExchangeServiceCertificatesValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.HasExchangeServiceCertificates, value, this, this.Info.Properties.HasExchangeServiceCertificates);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).HasExchangeServiceCertificatesValueInput(args);
    return args.NewValue;
  }

  protected global::System.String FtsIdValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.FtsId, value, this, this.Info.Properties.FtsId);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).FtsIdValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.CoreEntities.ICertificate CertificateReceiptNotificationsValueInputHandler(global::Sungero.CoreEntities.ICertificate value)
  {
    var args = new global::Sungero.ExchangeCore.Client.BusinessUnitBoxCertificateReceiptNotificationsValueInputEventArgs(this.CertificateReceiptNotifications, value, this, this.Info.Properties.CertificateReceiptNotifications);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxClientHandlers)this.Handlers).CertificateReceiptNotificationsValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors




              protected virtual void InitBusinessUnitNavigationProperty()
              {
                this._BusinessUnit = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IBusinessUnit>("BusinessUnit", this);
                this._BusinessUnit.ValueChanged += (sender, e) => { this.BusinessUnitChangedHandler(); };
                this.AddProperty(this._BusinessUnit as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitExchangeServiceNavigationProperty()
              {
                this._ExchangeService = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IExchangeService>("ExchangeService", this);
                this._ExchangeService.ValueChanged += (sender, e) => { this.ExchangeServiceChangedHandler(); };
                this.AddProperty(this._ExchangeService as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCertificateReceiptNotificationsNavigationProperty()
              {
                this._CertificateReceiptNotifications = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.CoreEntities.ICertificate>("CertificateReceiptNotifications", this);
                this._CertificateReceiptNotifications.ValueChanged += (sender, e) => { this.CertificateReceiptNotificationsChangedHandler(); };
                this.AddProperty(this._CertificateReceiptNotifications as global::Sungero.Domain.Client.IProperty);
              }



            protected virtual void InitExchangeServiceCertificatesCollectionProperty()
            {
              this._ExchangeServiceCertificates = new global::Sungero.Domain.Client.ListProperty<global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates>("ExchangeServiceCertificates", this);
              this._ExchangeServiceCertificates.ValueChanged += (sender, e) => { this.ExchangeServiceCertificatesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._ExchangeServiceCertificates);
              this.SetExchangeServiceCertificatesEventHandlers();
            }

            protected void SetExchangeServiceCertificatesEventHandlers()
            {
              this._ExchangeServiceCertificates.ChildEntityAdded += this.ExchangeServiceCertificatesAddedHandler;
              this._ExchangeServiceCertificates.ChildEntityDeleted += this.ExchangeServiceCertificatesDeletedHandler;
            }


    public BusinessUnitBox()
    {
            this._Login = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Login", this);
            this._Login.ValueChanged += (sender, e) => { this.LoginChangedHandler(); };
            this.AddProperty(this._Login);

            this._OrganizationId = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("OrganizationId", this);
            this._OrganizationId.ValueChanged += (sender, e) => { this.OrganizationIdChangedHandler(); };
            this.AddProperty(this._OrganizationId);

            this._HasExchangeServiceCertificates = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("HasExchangeServiceCertificates", this);
            this._HasExchangeServiceCertificates.ValueChanged += (sender, e) => { this.HasExchangeServiceCertificatesChangedHandler(); };
            this.AddProperty(this._HasExchangeServiceCertificates);

            this._FtsId = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("FtsId", this);
            this._FtsId.ValueChanged += (sender, e) => { this.FtsIdChangedHandler(); };
            this.AddProperty(this._FtsId);

            this.InitBusinessUnitNavigationProperty();

            this.InitExchangeServiceNavigationProperty();

            this.InitCertificateReceiptNotificationsNavigationProperty();


            this.InitExchangeServiceCertificatesCollectionProperty();


            this._Password = new global::Sungero.Domain.Client.TextProperty("Password", this);
            this._Password.ValueChanged += (sender, e) => { this.PasswordChangedHandler(); };
            this.AddProperty(this._Password);






    }

    #endregion

  }
}

// ==================================================================
// BusinessUnitBoxPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class BusinessUnitBoxPresenter<T> :
    global::Sungero.ExchangeCore.Client.BoxBasePresenter<T>
    where T : class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _LoginCommand;

          public global::System.Windows.Input.ICommand LoginCommand
          {
            get
            {
              if (this._LoginCommand == null)
                  this._LoginCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("Login", this, this.Login, this.CanLogin) { IsEmptyParameterAllowed = true };
              return this._LoginCommand;
            }
          }
          private global::System.Windows.Input.ICommand _OpenLogonUrlCommand;

          public global::System.Windows.Input.ICommand OpenLogonUrlCommand
          {
            get
            {
              if (this._OpenLogonUrlCommand == null)
                  this._OpenLogonUrlCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenLogonUrl", this, this.OpenLogonUrl, this.CanOpenLogonUrl) { IsEmptyParameterAllowed = true };
              return this._OpenLogonUrlCommand;
            }
          }
          private global::System.Windows.Input.ICommand _CheckConnectionCommand;

          public global::System.Windows.Input.ICommand CheckConnectionCommand
          {
            get
            {
              if (this._CheckConnectionCommand == null)
                  this._CheckConnectionCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CheckConnection", this, this.CheckConnection, this.CanCheckConnection) { IsEmptyParameterAllowed = true };
              return this._CheckConnectionCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanLogin(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).CanLogin(args);
              }

              private void Login(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.Login);
                ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).Login(args);
              }

              private bool CanOpenLogonUrl(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).CanOpenLogonUrl(args);
              }

              private void OpenLogonUrl(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenLogonUrl);
                ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).OpenLogonUrl(args);
              }

              private bool CanCheckConnection(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).CanCheckConnection(args);
              }

              private void CheckConnection(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.CheckConnection);
                ((Sungero.ExchangeCore.Client.BusinessUnitBoxActions)(entity as Sungero.ExchangeCore.Client.BusinessUnitBox).ActionsHandlers).CheckConnection(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BusinessUnitCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BusinessUnitCollectionPresenter
              {
          get { return this._BusinessUnitCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ExchangeServiceCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ExchangeServiceCollectionPresenter
              {
          get { return this._ExchangeServiceCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CertificateReceiptNotificationsCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CertificateReceiptNotificationsCollectionPresenter
              {
          get { return this._CertificateReceiptNotificationsCollectionPresenter; }
        }


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ExchangeServiceCertificatesCertificateCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter ExchangeServiceCertificatesCertificateCollectionPresenter
                          {
                  get { return this._ExchangeServiceCertificatesCertificateCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
              this._ResponsibleCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Responsible");

                  this._BusinessUnitCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IBusinessUnit>(global::System.Guid.Parse("85476bf0-a807-48c7-9644-13f35bf7385b"));
              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

                  this._ExchangeServiceCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IExchangeService>(global::System.Guid.Parse("bb0d84c1-55e1-4dc7-9c53-95517355df7b"));
              this._ExchangeServiceCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.ExchangeCore.IExchangeService>(() => this.Entity, typeof(T), "ExchangeService");

                  this._CertificateReceiptNotificationsCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.CoreEntities.ICertificate>(global::System.Guid.Parse("309b7d9c-818f-44d4-bbdd-73d8387371b0"));
              this._CertificateReceiptNotificationsCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.CoreEntities.ICertificate>(() => this.Entity, typeof(T), "CertificateReceiptNotifications");


                          this._ExchangeServiceCertificatesCertificateCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.CoreEntities.ICertificate>(global::System.Guid.Parse("5da29c81-bc96-4487-90a6-c16211afb246"));
                        this._ExchangeServiceCertificatesCertificateCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.ICertificate>(() => this.Entity.Id, typeof(Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates), "Certificate");


    }

    public BusinessUnitBoxPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// BusinessUnitBoxCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class BusinessUnitBoxCollectionPresenter<T> : 
    global::Sungero.ExchangeCore.Client.BoxBaseCollectionPresenter<T>
    where T: class, global::Sungero.ExchangeCore.IBusinessUnitBox
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public BusinessUnitBoxCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public BusinessUnitBoxCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public BusinessUnitBoxCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public BusinessUnitBoxCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// BusinessUnitBoxRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{ 
  public class BusinessUnitBoxRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Client.BoxBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IBusinessUnitBoxRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IBusinessUnitBox
    {
       public new global::Sungero.ExchangeCore.IBusinessUnitBoxAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IBusinessUnitBoxAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IBusinessUnitBoxInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IBusinessUnitBoxInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Client.BusinessUnitBoxTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// BusinessUnitBoxAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class BusinessUnitBoxAccessRights : 
    Sungero.ExchangeCore.Client.BoxBaseAccessRights, Sungero.ExchangeCore.IBusinessUnitBoxAccessRights
  {

    public BusinessUnitBoxAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class BusinessUnitBoxTypeAccessRights : 
    Sungero.ExchangeCore.Client.BoxBaseTypeAccessRights, Sungero.ExchangeCore.IBusinessUnitBoxAccessRights
  {

    public BusinessUnitBoxTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
