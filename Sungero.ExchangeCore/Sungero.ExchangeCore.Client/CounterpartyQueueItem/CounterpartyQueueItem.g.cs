
// ==================================================================
// CounterpartyQueueItem.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class CounterpartyQueueItem :
    global::Sungero.ExchangeCore.Client.QueueItemBase, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("50a0d7aa-1f04-4e4a-8f0c-044e0ba99949");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.CounterpartyQueueItem.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.ICounterpartyQueueItem, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.ExchangeCore.ICounterpartyQueueItemState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.ICounterpartyQueueItemState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemState(this);
    }

    public new global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo)base.Info;
      }
    }

    public new global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemAccessRights(this);
    }

        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _SyncResult;

        public virtual global::Sungero.Core.Enumeration? SyncResult
        {
          get { return this._SyncResult.Value; }
          set { this._SyncResult.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _CounterpartyName;

        public virtual global::System.String CounterpartyName
        {
          get { return this._CounterpartyName.Value; }
          set { this._CounterpartyName.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _SyncResultItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Sungero.ExchangeCore.CounterpartyQueueItem.SyncResult),
          typeof(global::Sungero.ExchangeCore.Client.CounterpartyQueueItem),
          "SyncResult");

        public static global::Sungero.Domain.Shared.EnumerationItems SyncResultItems
        {
          get { return global::Sungero.ExchangeCore.Client.CounterpartyQueueItem._SyncResultItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems SyncResultAllowedItems
        {
          get { return global::Sungero.ExchangeCore.Client.CounterpartyQueueItem.SyncResultItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Workflow.ITask> _MatchingTask;

              public virtual global::Sungero.Workflow.ITask MatchingTask
              {
              get
              {
                return this._MatchingTask.Value as global::Sungero.Workflow.ITask;
              }

              set
              {
                (this._MatchingTask as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.ICounterparty> _Counterparty;

              public virtual global::Sungero.Parties.ICounterparty Counterparty
              {
              get
              {
                return this._Counterparty.Value as global::Sungero.Parties.ICounterparty;
              }

              set
              {
                (this._Counterparty as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void MatchingTaskChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemMatchingTaskChangedEventArgs(this.State.Properties.MatchingTask, this.MatchingTask, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).MatchingTaskChanged(args);
    }

    protected void SyncResultChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.SyncResult, this.SyncResult, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).SyncResultChanged(args);
    }

    protected void CounterpartyNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.CounterpartyName, this.CounterpartyName, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).CounterpartyNameChanged(args);
    }

    protected void CounterpartyChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.CounterpartyQueueItemCounterpartyChangedEventArgs(this.State.Properties.Counterparty, this.Counterparty, this);
     ((global::Sungero.ExchangeCore.CounterpartyQueueItemSharedHandlers)this.SharedHandlers).CounterpartyChanged(args);
    }



  protected global::Sungero.Workflow.ITask MatchingTaskValueInputHandler(global::Sungero.Workflow.ITask value)
  {
    var args = new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemMatchingTaskValueInputEventArgs(this.MatchingTask, value, this, this.Info.Properties.MatchingTask);
    ((global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers)this.Handlers).MatchingTaskValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? SyncResultValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.SyncResult, value, this, this.Info.Properties.SyncResult);
    ((global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers)this.Handlers).SyncResultValueInput(args);
    return args.NewValue;
  }

  protected global::System.String CounterpartyNameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.CounterpartyName, value, this, this.Info.Properties.CounterpartyName);
    ((global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers)this.Handlers).CounterpartyNameValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.ICounterparty CounterpartyValueInputHandler(global::Sungero.Parties.ICounterparty value)
  {
    var args = new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemCounterpartyValueInputEventArgs(this.Counterparty, value, this, this.Info.Properties.Counterparty);
    ((global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers)this.Handlers).CounterpartyValueInput(args);
    return args.NewValue;
  }


  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> SyncResultFilteringHandler()
  {
    return ((global::Sungero.ExchangeCore.CounterpartyQueueItemClientHandlers)this.Handlers).SyncResultFiltering(this.SyncResultAllowedItems);
  }




    #endregion

    #region Constructors





              protected virtual void InitMatchingTaskNavigationProperty()
              {
                this._MatchingTask = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Workflow.ITask>("MatchingTask", this);
                this._MatchingTask.ValueChanged += (sender, e) => { this.MatchingTaskChangedHandler(); };
                this.AddProperty(this._MatchingTask as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitCounterpartyNavigationProperty()
              {
                this._Counterparty = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.ICounterparty>("Counterparty", this);
                this._Counterparty.ValueChanged += (sender, e) => { this.CounterpartyChangedHandler(); };
                this.AddProperty(this._Counterparty as global::Sungero.Domain.Client.IProperty);
              }




    public CounterpartyQueueItem()
    {
            this._SyncResult = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("SyncResult", this);
            this._SyncResult.ValueChanged += (sender, e) => { this.SyncResultChangedHandler(); };
            this.AddProperty(this._SyncResult);

            this._CounterpartyName = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("CounterpartyName", this);
            this._CounterpartyName.ValueChanged += (sender, e) => { this.CounterpartyNameChangedHandler(); };
            this.AddProperty(this._CounterpartyName);

            this.InitMatchingTaskNavigationProperty();

            this.InitCounterpartyNavigationProperty();








    }

    #endregion

  }
}

// ==================================================================
// CounterpartyQueueItemPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class CounterpartyQueueItemPresenter<T> :
    global::Sungero.ExchangeCore.Client.QueueItemBasePresenter<T>
    where T : class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _MatchingTaskCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter MatchingTaskCollectionPresenter
              {
          get { return this._MatchingTaskCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CounterpartyCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CounterpartyCollectionPresenter
              {
          get { return this._CounterpartyCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._BoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBoxBase>(() => this.Entity.Id, typeof(T), "Box");

              this._RootBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "RootBox");

                  this._MatchingTaskCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Workflow.ITask>(global::System.Guid.Parse("f678367f-bcf5-4439-b881-c61450f820ef"));
              this._MatchingTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "MatchingTask");

                  this._CounterpartyCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.ICounterparty>(global::System.Guid.Parse("46b3cf85-fd90-4620-9f02-61a966564193"));
              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");


    }

    public CounterpartyQueueItemPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// CounterpartyQueueItemCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class CounterpartyQueueItemCollectionPresenter<T> : 
    global::Sungero.ExchangeCore.Client.QueueItemBaseCollectionPresenter<T>
    where T: class, global::Sungero.ExchangeCore.ICounterpartyQueueItem
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public CounterpartyQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public CounterpartyQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public CounterpartyQueueItemCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public CounterpartyQueueItemCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// CounterpartyQueueItemRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{ 
  public class CounterpartyQueueItemRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Client.QueueItemBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.ICounterpartyQueueItemRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.ICounterpartyQueueItem
    {
       public new global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo Info
       {
          get { return (global::Sungero.ExchangeCore.ICounterpartyQueueItemInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Client.CounterpartyQueueItemTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CounterpartyQueueItemAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class CounterpartyQueueItemAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseAccessRights, Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights
  {

    public CounterpartyQueueItemAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CounterpartyQueueItemTypeAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseTypeAccessRights, Sungero.ExchangeCore.ICounterpartyQueueItemAccessRights
  {

    public CounterpartyQueueItemTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
