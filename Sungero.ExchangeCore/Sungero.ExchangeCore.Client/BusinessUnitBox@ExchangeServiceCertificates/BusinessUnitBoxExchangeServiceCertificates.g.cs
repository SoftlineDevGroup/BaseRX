
// ==================================================================
// BusinessUnitBoxExchangeServiceCertificates.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class BusinessUnitBoxExchangeServiceCertificates :
    global::Sungero.Domain.Client.ChildEntityProxy, global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("6b3c4688-1125-4f7e-a24b-7cd485aab591");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.BusinessUnitBoxExchangeServiceCertificates.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificates, Sungero.Domain.Interfaces"; }
    }

    public new global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxExchangeServiceCertificatesState(this);
    }

    public new global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.IBusinessUnitBoxExchangeServiceCertificatesInfo)base.Info;
      }
    }

    protected global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox> _BusinessUnitBox;

    public global::Sungero.ExchangeCore.IBusinessUnitBox BusinessUnitBox
    {
      get { return this._BusinessUnitBox.Value; }
      set { this._BusinessUnitBox.Value = value; }
    }

    public override global::Sungero.Domain.Shared.IEntity RootEntity
    {
      get { return this.BusinessUnitBox; }
      set { this.BusinessUnitBox = (global::Sungero.ExchangeCore.IBusinessUnitBox)value; }
    }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.CoreEntities.ICertificate> _Certificate;

              public virtual global::Sungero.CoreEntities.ICertificate Certificate
              {
              get
              {
                return this._Certificate.Value as global::Sungero.CoreEntities.ICertificate;
              }

              set
              {
                (this._Certificate as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }










    #endregion

    #region Methods

    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void CertificateChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.BusinessUnitBoxExchangeServiceCertificatesCertificateChangedEventArgs(this.State.Properties.Certificate, this.Certificate, this);
     ((global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesSharedHandlers)this.SharedHandlers).ExchangeServiceCertificatesCertificateChanged(args);
    }



  protected global::Sungero.CoreEntities.ICertificate CertificateValueInputHandler(global::Sungero.CoreEntities.ICertificate value)
  {
    var args = new global::Sungero.ExchangeCore.Client.BusinessUnitBoxExchangeServiceCertificatesCertificateValueInputEventArgs(this.Certificate, value, this, this.Info.Properties.Certificate);
    ((global::Sungero.ExchangeCore.BusinessUnitBoxExchangeServiceCertificatesClientHandlers)this.Handlers).ExchangeServiceCertificatesCertificateValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitCertificateNavigationProperty()
              {
                this._Certificate = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.CoreEntities.ICertificate>("Certificate", this);
                this._Certificate.ValueChanged += (sender, e) => { this.CertificateChangedHandler(); };
                this.AddProperty(this._Certificate as global::Sungero.Domain.Client.IProperty);
              }




    public BusinessUnitBoxExchangeServiceCertificates()
    {
      this._BusinessUnitBox = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>("BusinessUnitBox", this, true);


            this.InitCertificateNavigationProperty();








    }

    #endregion

  }
}
