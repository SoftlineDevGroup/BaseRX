
// ==================================================================
// ExchangeService.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class ExchangeService :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Sungero.ExchangeCore.IExchangeService
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("d6c0fcaf-4ac9-4a6a-9e2c-8fed1e35c08a");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.ExchangeService.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IExchangeService, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.ExchangeCore.IExchangeServiceState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.IExchangeServiceState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.ExchangeServiceState(this);
    }

    public new global::Sungero.ExchangeCore.IExchangeServiceInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.IExchangeServiceInfo)base.Info;
      }
    }

    public new global::Sungero.ExchangeCore.IExchangeServiceAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.ExchangeCore.IExchangeServiceAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Uri;

        public virtual global::System.String Uri
        {
          get { return this._Uri.Value; }
          set { this._Uri.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Note;

        public virtual global::System.String Note
        {
          get { return this._Note.Value; }
          set { this._Note.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _ExchangeProvider;

        public virtual global::Sungero.Core.Enumeration? ExchangeProvider
        {
          get { return this._ExchangeProvider.Value; }
          set { this._ExchangeProvider.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _LogonUrl;

        public virtual global::System.String LogonUrl
        {
          get { return this._LogonUrl.Value; }
          set { this._LogonUrl.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _ExchangeProviderItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Sungero.ExchangeCore.ExchangeService.ExchangeProvider),
          typeof(global::Sungero.ExchangeCore.Client.ExchangeService),
          "ExchangeProvider");

        public static global::Sungero.Domain.Shared.EnumerationItems ExchangeProviderItems
        {
          get { return global::Sungero.ExchangeCore.Client.ExchangeService._ExchangeProviderItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems ExchangeProviderAllowedItems
        {
          get { return global::Sungero.ExchangeCore.Client.ExchangeService.ExchangeProviderItems; }
        }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.ExchangeCore.Client.ExchangeServiceFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.ExchangeServiceFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.ExchangeServiceClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void UriChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Uri, this.Uri, this);
     ((global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers)this.SharedHandlers).UriChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void ExchangeProviderChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.ExchangeProvider, this.ExchangeProvider, this);
     ((global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers)this.SharedHandlers).ExchangeProviderChanged(args);
    }

    protected void LogonUrlChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.LogonUrl, this.LogonUrl, this);
     ((global::Sungero.ExchangeCore.ExchangeServiceSharedHandlers)this.SharedHandlers).LogonUrlChanged(args);
    }



  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::System.String UriValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Uri, value, this, this.Info.Properties.Uri);
    ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).UriValueInput(args);
    return args.NewValue;
  }

  protected global::System.String NoteValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Note, value, this, this.Info.Properties.Note);
    ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).NoteValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? ExchangeProviderValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.ExchangeProvider, value, this, this.Info.Properties.ExchangeProvider);
    ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).ExchangeProviderValueInput(args);
    return args.NewValue;
  }

  protected global::System.String LogonUrlValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.LogonUrl, value, this, this.Info.Properties.LogonUrl);
    ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).LogonUrlValueInput(args);
    return args.NewValue;
  }


  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> ExchangeProviderFilteringHandler()
  {
    return ((global::Sungero.ExchangeCore.ExchangeServiceClientHandlers)this.Handlers).ExchangeProviderFiltering(this.ExchangeProviderAllowedItems);
  }



    #endregion

    #region Constructors



    public ExchangeService()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._Uri = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Uri", this);
            this._Uri.ValueChanged += (sender, e) => { this.UriChangedHandler(); };
            this.AddProperty(this._Uri);

            this._Note = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Note", this);
            this._Note.ValueChanged += (sender, e) => { this.NoteChangedHandler(); };
            this.AddProperty(this._Note);

            this._ExchangeProvider = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("ExchangeProvider", this);
            this._ExchangeProvider.ValueChanged += (sender, e) => { this.ExchangeProviderChangedHandler(); };
            this.AddProperty(this._ExchangeProvider);

            this._LogonUrl = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("LogonUrl", this);
            this._LogonUrl.ValueChanged += (sender, e) => { this.LogonUrlChangedHandler(); };
            this.AddProperty(this._LogonUrl);








    }

    #endregion

  }
}

// ==================================================================
// ExchangeServicePresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class ExchangeServicePresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Sungero.ExchangeCore.IExchangeService
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {

    }

    public ExchangeServicePresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ExchangeServiceCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class ExchangeServiceCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Sungero.ExchangeCore.IExchangeService
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public ExchangeServiceCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ExchangeServiceCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ExchangeServiceCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ExchangeServiceCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ExchangeServiceRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{ 
  public class ExchangeServiceRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IExchangeServiceRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IExchangeService
    {
       public new global::Sungero.ExchangeCore.IExchangeServiceAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IExchangeServiceAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IExchangeServiceInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IExchangeServiceInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Client.ExchangeServiceTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ExchangeServiceAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class ExchangeServiceAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Sungero.ExchangeCore.IExchangeServiceAccessRights
  {

    public ExchangeServiceAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ExchangeServiceTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Sungero.ExchangeCore.IExchangeServiceAccessRights
  {

    public ExchangeServiceTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
