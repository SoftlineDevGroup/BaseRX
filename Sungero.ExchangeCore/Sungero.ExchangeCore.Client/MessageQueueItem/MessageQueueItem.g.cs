
// ==================================================================
// MessageQueueItem.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItem :
    global::Sungero.ExchangeCore.Client.QueueItemBase, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("f9a3ec37-0fd4-4343-a295-9394ba830a0e");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.ExchangeCore.Client.MessageQueueItem.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.ExchangeCore.IMessageQueueItem, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.ExchangeCore.IMessageQueueItemState State
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.ExchangeCore.Shared.MessageQueueItemState(this);
    }

    public new global::Sungero.ExchangeCore.IMessageQueueItemInfo Info
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemInfo)base.Info;
      }
    }

    public new global::Sungero.ExchangeCore.IMessageQueueItemAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.ExchangeCore.IMessageQueueItemAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAccessRights(this);
    }


        private static global::Sungero.Domain.Shared.EnumerationItems _ProcessingStatusItems = new global::Sungero.Domain.Shared.EnumerationItems(
          global::Sungero.ExchangeCore.Client.QueueItemBase.ProcessingStatusItems,
          typeof(global::Sungero.ExchangeCore.MessageQueueItem.ProcessingStatus),
          typeof(global::Sungero.ExchangeCore.Client.MessageQueueItem),
          "ProcessingStatus");

        public static new global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusItems
        {
          get { return global::Sungero.ExchangeCore.Client.MessageQueueItem._ProcessingStatusItems; }
        }

        public override global::Sungero.Domain.Shared.EnumerationItems ProcessingStatusAllowedItems
        {
          get { return global::Sungero.ExchangeCore.Client.MessageQueueItem.ProcessingStatusItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Workflow.ITask> _NoticeTask;

              public virtual global::Sungero.Workflow.ITask NoticeTask
              {
              get
              {
                return this._NoticeTask.Value as global::Sungero.Workflow.ITask;
              }

              set
              {
                (this._NoticeTask as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.ExchangeCore.IMessageQueueItemDocuments> _Documents;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.ExchangeCore.IMessageQueueItemDocuments> Documents
          {
            get { return this._Documents.Value; }
          }






    private object _DocumentsActionsHandlers;

    public object DocumentsActionsHandlers
    {
      get
      {
        if (this._DocumentsActionsHandlers == null)
          this._DocumentsActionsHandlers = this.CreateDocumentsActionsHandlers();
        return this._DocumentsActionsHandlers;
      }
    }

    private object _DocumentsCollectionActionsHandlers;

    public object DocumentsCollectionActionsHandlers
    {
      get
      {
        if (this._DocumentsCollectionActionsHandlers == null)
          this._DocumentsCollectionActionsHandlers = this.CreateDocumentsCollectionActionsHandlers();
        return this._DocumentsCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemAnyChildEntityCollectionActions();
    }

    protected object CreateDocumentsActionsHandlers()
    {
      return null;
    }

    protected object CreateDocumentsCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.ExchangeCore.Client.MessageQueueItemFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.ExchangeCore.Shared.MessageQueueItemFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.ExchangeCore.MessageQueueItemClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.ExchangeCore.MessageQueueItemSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NoticeTaskChangedHandler()
    {
      var args = new global::Sungero.ExchangeCore.Shared.MessageQueueItemNoticeTaskChangedEventArgs(this.State.Properties.NoticeTask, this.NoticeTask, this);
     ((global::Sungero.ExchangeCore.MessageQueueItemSharedHandlers)this.SharedHandlers).NoticeTaskChanged(args);
    }

    protected void DocumentsChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.ExchangeCore.MessageQueueItemSharedHandlers)this.SharedHandlers).DocumentsChanged(args);
    }



    protected virtual global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers CreateDocumentsAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers CreateDocumentsDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.ExchangeCore.MessageQueueItemDocumentsSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void DocumentsAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentsAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.DocumentsAdded(args);
      }
    }

    protected virtual void DocumentsDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateDocumentsDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.DocumentsDeleted(args);
      }
    }


  protected global::Sungero.Workflow.ITask NoticeTaskValueInputHandler(global::Sungero.Workflow.ITask value)
  {
    var args = new global::Sungero.ExchangeCore.Client.MessageQueueItemNoticeTaskValueInputEventArgs(this.NoticeTask, value, this, this.Info.Properties.NoticeTask);
    ((global::Sungero.ExchangeCore.MessageQueueItemClientHandlers)this.Handlers).NoticeTaskValueInput(args);
    return args.NewValue;
  }




    #endregion

    #region Constructors





              protected virtual void InitNoticeTaskNavigationProperty()
              {
                this._NoticeTask = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Workflow.ITask>("NoticeTask", this);
                this._NoticeTask.ValueChanged += (sender, e) => { this.NoticeTaskChangedHandler(); };
                this.AddProperty(this._NoticeTask as global::Sungero.Domain.Client.IProperty);
              }



            protected virtual void InitDocumentsCollectionProperty()
            {
              this._Documents = new global::Sungero.Domain.Client.ListProperty<global::Sungero.ExchangeCore.IMessageQueueItemDocuments>("Documents", this);
              this._Documents.ValueChanged += (sender, e) => { this.DocumentsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Documents);
              this.SetDocumentsEventHandlers();
            }

            protected void SetDocumentsEventHandlers()
            {
              this._Documents.ChildEntityAdded += this.DocumentsAddedHandler;
              this._Documents.ChildEntityDeleted += this.DocumentsDeletedHandler;
            }


    public MessageQueueItem()
    {

            this.InitNoticeTaskNavigationProperty();


            this.InitDocumentsCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// MessageQueueItemPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemPresenter<T> :
    global::Sungero.ExchangeCore.Client.QueueItemBasePresenter<T>
    where T : class, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _NoticeTaskCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter NoticeTaskCollectionPresenter
              {
          get { return this._NoticeTaskCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
              this._BoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBoxBase>(() => this.Entity.Id, typeof(T), "Box");

              this._RootBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "RootBox");

                  this._NoticeTaskCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Workflow.ITask>(global::System.Guid.Parse("94c20048-d112-4a93-8364-73763058bd99"));
              this._NoticeTaskCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(T), "NoticeTask");


    }

    public MessageQueueItemPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// MessageQueueItemCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemCollectionPresenter<T> : 
    global::Sungero.ExchangeCore.Client.QueueItemBaseCollectionPresenter<T>
    where T: class, global::Sungero.ExchangeCore.IMessageQueueItem
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public MessageQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public MessageQueueItemCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public MessageQueueItemCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public MessageQueueItemCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// MessageQueueItemRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{ 
  public class MessageQueueItemRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Client.QueueItemBaseRepositoryImplementer<T>,
      global::Sungero.ExchangeCore.IMessageQueueItemRepositoryImplementer<T>
      where T : global::Sungero.ExchangeCore.IMessageQueueItem
    {
       public new global::Sungero.ExchangeCore.IMessageQueueItemAccessRights AccessRights
       {
          get { return (global::Sungero.ExchangeCore.IMessageQueueItemAccessRights)base.AccessRights; }
       }

       public new global::Sungero.ExchangeCore.IMessageQueueItemInfo Info
       {
          get { return (global::Sungero.ExchangeCore.IMessageQueueItemInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.ExchangeCore.Client.MessageQueueItemTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// MessageQueueItemAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.ExchangeCore.Client
{
  public class MessageQueueItemAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseAccessRights, Sungero.ExchangeCore.IMessageQueueItemAccessRights
  {

    public MessageQueueItemAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class MessageQueueItemTypeAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseTypeAccessRights, Sungero.ExchangeCore.IMessageQueueItemAccessRights
  {

    public MessageQueueItemTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
