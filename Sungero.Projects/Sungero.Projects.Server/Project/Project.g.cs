
// ==================================================================
// Project.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectFilter<T> :
      global::Sungero.Docflow.Server.ProjectBaseFilter<T>
      where T : class, global::Sungero.Projects.IProject
    {
      private global::Sungero.Projects.IProjectFilterState filter
      {
        get
        {
          return (Sungero.Projects.IProjectFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public ProjectFilter(global::Sungero.Projects.IProjectFilterState filter)
      : base(filter)
      {
      }

      protected ProjectFilter()
      {
      }
    }
      public class ProjectUiFilter<T> :
        global::Sungero.Docflow.Server.ProjectBaseUiFilter<T>
        where T : class, global::Sungero.Projects.IProject
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class ProjectSearchDialogModel : global::Sungero.Docflow.Server.ProjectBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }



                  public virtual global::System.String ShortName { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Projects.IProjectKind> ProjectKind { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> InternalCustomer { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> ExternalCustomer { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> StartDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> EndDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Manager { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Administrator { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ActualStartDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> ActualFinishDate { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Stage { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ProjectTeamMembersModel TeamMembers { get; protected set; }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ProjectClassifierModel Classifier { get; protected set; }

        }


      public class ProjectTeamMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }
      public class ProjectClassifierModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class ProjectFilterForProjectKind<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectKind
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectProjectKindPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ProjectKindFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForProjectKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForProjectKind<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProjectKind
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectProjectKindSearchPropertyFilteringServerHandler<TQueryEntity>().ProjectKindSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForProjectKind(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForInternalCustomer<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectInternalCustomerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).InternalCustomerFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForInternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForInternalCustomer<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectInternalCustomerSearchPropertyFilteringServerHandler<TQueryEntity>().InternalCustomerSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForInternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForExternalCustomer<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectExternalCustomerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ExternalCustomerFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForExternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForExternalCustomer<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectExternalCustomerSearchPropertyFilteringServerHandler<TQueryEntity>().ExternalCustomerSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForExternalCustomer(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForManager<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectManagerPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ManagerFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForManager(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForManager<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectManagerSearchPropertyFilteringServerHandler<TQueryEntity>().ManagerSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForManager(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForFolder<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectFolderPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).FolderFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForFolder<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IFolder
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectFolderSearchPropertyFilteringServerHandler<TQueryEntity>().FolderSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForFolder(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForLeadingProject<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProject
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectLeadingProjectPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).LeadingProjectFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForLeadingProject(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForLeadingProject<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectLeadingProjectSearchPropertyFilteringServerHandler<TQueryEntity>().LeadingProjectSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForLeadingProject(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectFilterForAdministrator<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Projects.IProject
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Projects.ProjectAdministratorPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).AdministratorFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectFilterForAdministrator(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ProjectSearchFilterForAdministrator<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Projects.ProjectAdministratorSearchPropertyFilteringServerHandler<TQueryEntity>().AdministratorSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ProjectSearchFilterForAdministrator(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Projects.Server.ProjectFilter<global::Sungero.Projects.IProject>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Projects.Server.ProjectUiFilter<global::Sungero.Projects.IProject>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForProjectKind<global::Sungero.Projects.IProjectKind, global::Sungero.Projects.IProject>), "ProjectKind")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForProjectKind<global::Sungero.Projects.IProjectKind>), "ProjectKind")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForInternalCustomer<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProject>), "InternalCustomer")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForInternalCustomer<global::Sungero.CoreEntities.IRecipient>), "InternalCustomer")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForExternalCustomer<global::Sungero.Parties.ICounterparty, global::Sungero.Projects.IProject>), "ExternalCustomer")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForExternalCustomer<global::Sungero.Parties.ICounterparty>), "ExternalCustomer")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForManager<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProject>), "Manager")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForManager<global::Sungero.CoreEntities.IRecipient>), "Manager")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForFolder<global::Sungero.CoreEntities.IFolder, global::Sungero.Projects.IProject>), "Folder")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForFolder<global::Sungero.CoreEntities.IFolder>), "Folder")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForLeadingProject<global::Sungero.Projects.IProject, global::Sungero.Projects.IProject>), "LeadingProject")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForLeadingProject<global::Sungero.Projects.IProject>), "LeadingProject")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Projects.Server.ProjectFilterForAdministrator<global::Sungero.Company.IEmployee, global::Sungero.Projects.IProject>), "Administrator")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Projects.Server.ProjectSearchFilterForAdministrator<global::Sungero.CoreEntities.IRecipient>), "Administrator")]


  public class Project :
    global::Sungero.Docflow.Server.ProjectBase, global::Sungero.Projects.IProject, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("4383f2ff-56e6-46f4-b4ef-cc17e6aeef40");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Projects.Server.Project.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Projects.IProject, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Projects.IProjectState State
    {
      get { return (global::Sungero.Projects.IProjectState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Projects.Shared.ProjectState(this);
    }

    public new virtual global::Sungero.Projects.IProjectInfo Info
    {
      get { return (global::Sungero.Projects.IProjectInfo)base.Info; }
    }

    public new virtual global::Sungero.Projects.IProjectAccessRights AccessRights
    {
      get { return (global::Sungero.Projects.IProjectAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Projects.Server.ProjectAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Projects.Server.ProjectFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Projects.Shared.ProjectFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Projects.ProjectServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Projects.ProjectSharedHandlers(this);
    }

    private global::System.String _ShortName;
    public virtual global::System.String ShortName
    {
      get
      {
        return this._ShortName;
      }

      set
      {
        this.SetPropertyValue("ShortName", this._ShortName, value, (propertyValue) => { this._ShortName = propertyValue; }, this.ShortNameChangedHandler);
      }
    }
    private global::System.DateTime? _StartDate;
    public virtual global::System.DateTime? StartDate
    {
      get
      {
        return this._StartDate;
      }

      set
      {
        this.SetPropertyValue("StartDate", this._StartDate, value, (propertyValue) => { this._StartDate = propertyValue; }, this.StartDateChangedHandler);
      }
    }
    private global::System.DateTime? _EndDate;
    public virtual global::System.DateTime? EndDate
    {
      get
      {
        return this._EndDate;
      }

      set
      {
        this.SetPropertyValue("EndDate", this._EndDate, value, (propertyValue) => { this._EndDate = propertyValue; }, this.EndDateChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.DateTime? _ActualStartDate;
    public virtual global::System.DateTime? ActualStartDate
    {
      get
      {
        return this._ActualStartDate;
      }

      set
      {
        this.SetPropertyValue("ActualStartDate", this._ActualStartDate, value, (propertyValue) => { this._ActualStartDate = propertyValue; }, this.ActualStartDateChangedHandler);
      }
    }
    private global::System.DateTime? _ActualFinishDate;
    public virtual global::System.DateTime? ActualFinishDate
    {
      get
      {
        return this._ActualFinishDate;
      }

      set
      {
        this.SetPropertyValue("ActualFinishDate", this._ActualFinishDate, value, (propertyValue) => { this._ActualFinishDate = propertyValue; }, this.ActualFinishDateChangedHandler);
      }
    }
    private global::System.Int32? _ExecutionPercent;
    public virtual global::System.Int32? ExecutionPercent
    {
      get
      {
        return this._ExecutionPercent;
      }

      set
      {
        this.SetPropertyValue("ExecutionPercent", this._ExecutionPercent, value, (propertyValue) => { this._ExecutionPercent = propertyValue; }, this.ExecutionPercentChangedHandler);
      }
    }
    private global::System.DateTime? _Modified;
    public virtual global::System.DateTime? Modified
    {
      get
      {
        return this._Modified;
      }

      set
      {
        this.SetPropertyValue("Modified", this._Modified, value, (propertyValue) => { this._Modified = propertyValue; }, this.ModifiedChangedHandler);
      }
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _StageItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Sungero.Projects.Project.Stage),
      typeof(global::Sungero.Projects.Server.Project),
      "Stage");

    public static global::Sungero.Domain.Shared.EnumerationItems StageItems
    {
      get { return global::Sungero.Projects.Server.Project._StageItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems StageAllowedItems
    {
      get { return global::Sungero.Projects.Server.Project.StageItems; }
    }

    private global::Sungero.Core.Enumeration? _Stage;

    public virtual global::Sungero.Core.Enumeration? Stage
    {
      get { return this._Stage; }
      set { this.SetEnumPropertyValue("Stage", this._Stage, value, (propertyValue) => { this._Stage = propertyValue; }, this.StageChangedHandler, this.StageAllowedItems); }
    }


    private global::Sungero.Projects.IProjectKind _ProjectKind;
    public virtual global::Sungero.Projects.IProjectKind ProjectKind
    {
      get
      {
        return this._ProjectKind;
      }

      set
      {
        this.SetPropertyValue("ProjectKind", this._ProjectKind, value, (propertyValue) => { this._ProjectKind = propertyValue; }, this.ProjectKindChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _InternalCustomer;
    public virtual global::Sungero.Company.IEmployee InternalCustomer
    {
      get
      {
        return this._InternalCustomer;
      }

      set
      {
        this.SetPropertyValue("InternalCustomer", this._InternalCustomer, value, (propertyValue) => { this._InternalCustomer = propertyValue; }, this.InternalCustomerChangedHandler);
      }
    }
    private global::Sungero.Parties.ICounterparty _ExternalCustomer;
    public virtual global::Sungero.Parties.ICounterparty ExternalCustomer
    {
      get
      {
        return this._ExternalCustomer;
      }

      set
      {
        this.SetPropertyValue("ExternalCustomer", this._ExternalCustomer, value, (propertyValue) => { this._ExternalCustomer = propertyValue; }, this.ExternalCustomerChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Manager;
    public virtual global::Sungero.Company.IEmployee Manager
    {
      get
      {
        return this._Manager;
      }

      set
      {
        this.SetPropertyValue("Manager", this._Manager, value, (propertyValue) => { this._Manager = propertyValue; }, this.ManagerChangedHandler);
      }
    }
    private global::Sungero.CoreEntities.IFolder _Folder;
    public virtual global::Sungero.CoreEntities.IFolder Folder
    {
      get
      {
        return this._Folder;
      }

      set
      {
        this.SetPropertyValue("Folder", this._Folder, value, (propertyValue) => { this._Folder = propertyValue; }, this.FolderChangedHandler);
      }
    }
    private global::Sungero.Projects.IProject _LeadingProject;
    public virtual global::Sungero.Projects.IProject LeadingProject
    {
      get
      {
        return this._LeadingProject;
      }

      set
      {
        this.SetPropertyValue("LeadingProject", this._LeadingProject, value, (propertyValue) => { this._LeadingProject = propertyValue; }, this.LeadingProjectChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Administrator;
    public virtual global::Sungero.Company.IEmployee Administrator
    {
      get
      {
        return this._Administrator;
      }

      set
      {
        this.SetPropertyValue("Administrator", this._Administrator, value, (propertyValue) => { this._Administrator = propertyValue; }, this.AdministratorChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectTeamMembers> _TeamMembers;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectTeamMembers> TeamMembers
    {
      get
      {
        if (this._TeamMembers == null)
        {
          this._TeamMembers = this.CreateTeamMembersCollection();
          this.SetTeamMembersEventHandlers();
        }
        return this._TeamMembers;
      }

      set
      {
        if (this._TeamMembers != null)
          this.UnsetChildCollectionEventHandlers(this._TeamMembers);

        this._TeamMembers = value;
        this.SetTeamMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectTeamMembers> CreateTeamMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Projects.IProjectTeamMembers>() { RootEntity = this };
    }

    private void SetTeamMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._TeamMembers, "TeamMembers");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._TeamMembers;
      changeNotifier.Added += this.TeamMembersAddedHandler;
      changeNotifier.Deleted += this.TeamMembersDeletedHandler;
      changeNotifier.Added += this.TeamMembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.TeamMembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.TeamMembersCollectionUpdateEventHandler;
    }

    private void TeamMembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.TeamMembersChangedHandler();
    }
    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectClassifier> _Classifier;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectClassifier> Classifier
    {
      get
      {
        if (this._Classifier == null)
        {
          this._Classifier = this.CreateClassifierCollection();
          this.SetClassifierEventHandlers();
        }
        return this._Classifier;
      }

      set
      {
        if (this._Classifier != null)
          this.UnsetChildCollectionEventHandlers(this._Classifier);

        this._Classifier = value;
        this.SetClassifierEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Projects.IProjectClassifier> CreateClassifierCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Projects.IProjectClassifier>() { RootEntity = this };
    }

    private void SetClassifierEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Classifier, "Classifier");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Classifier;
      changeNotifier.Added += this.ClassifierAddedHandler;
      changeNotifier.Deleted += this.ClassifierDeletedHandler;
      changeNotifier.Added += this.ClassifierCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ClassifierCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ClassifierCollectionUpdateEventHandler;
    }

    private void ClassifierCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ClassifierChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Projects.ProjectCreatingFromServerHandler((global::Sungero.Projects.IProject)entitySource, this.Info);
    }

    #region Framework events

    protected void ProjectKindChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectProjectKindChangedEventArgs(this.State.Properties.ProjectKind, this.ProjectKind, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ProjectKindChanged(args);
    }

    protected void ShortNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.ShortName, this.ShortName, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ShortNameChanged(args);
    }

    protected void InternalCustomerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectInternalCustomerChangedEventArgs(this.State.Properties.InternalCustomer, this.InternalCustomer, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).InternalCustomerChanged(args);
    }

    protected void ExternalCustomerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectExternalCustomerChangedEventArgs(this.State.Properties.ExternalCustomer, this.ExternalCustomer, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ExternalCustomerChanged(args);
    }

    protected void StartDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.StartDate, this.StartDate, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).StartDateChanged(args);
    }

    protected void EndDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.EndDate, this.EndDate, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).EndDateChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void TeamMembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).TeamMembersChanged(args);
    }

    protected void ManagerChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectManagerChangedEventArgs(this.State.Properties.Manager, this.Manager, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ManagerChanged(args);
    }

    protected void FolderChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectFolderChangedEventArgs(this.State.Properties.Folder, this.Folder, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).FolderChanged(args);
    }

    protected void ClassifierChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ClassifierChanged(args);
    }

    protected void LeadingProjectChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectLeadingProjectChangedEventArgs(this.State.Properties.LeadingProject, this.LeadingProject, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).LeadingProjectChanged(args);
    }

    protected void AdministratorChangedHandler()
    {
      var args = new global::Sungero.Projects.Shared.ProjectAdministratorChangedEventArgs(this.State.Properties.Administrator, this.Administrator, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).AdministratorChanged(args);
    }

    protected void ActualStartDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ActualStartDate, this.ActualStartDate, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ActualStartDateChanged(args);
    }

    protected void ActualFinishDateChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ActualFinishDate, this.ActualFinishDate, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ActualFinishDateChanged(args);
    }

    protected void ExecutionPercentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.ExecutionPercent, this.ExecutionPercent, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ExecutionPercentChanged(args);
    }

    protected void StageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.Stage, this.Stage, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).StageChanged(args);
    }

    protected void ModifiedChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.Modified, this.Modified, this);
     ((global::Sungero.Projects.ProjectSharedHandlers)this.SharedHandlers).ModifiedChanged(args);
    }



    protected virtual global::Sungero.Projects.ProjectTeamMembersSharedCollectionHandlers CreateTeamMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectTeamMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Projects.ProjectTeamMembersSharedCollectionHandlers CreateTeamMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectTeamMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void TeamMembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateTeamMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.TeamMembersAdded(args);
      }
    }

    protected virtual void TeamMembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateTeamMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.TeamMembersDeleted(args);
      }
    }


    protected virtual global::Sungero.Projects.ProjectClassifierSharedCollectionHandlers CreateClassifierAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectClassifierSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Projects.ProjectClassifierSharedCollectionHandlers CreateClassifierDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Projects.ProjectClassifierSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ClassifierAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateClassifierAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ClassifierAdded(args);
      }
    }

    protected virtual void ClassifierDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateClassifierDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ClassifierDeleted(args);
      }
    }


    #endregion


    public Project()
    {
    }

  }
}

// ==================================================================
// ProjectHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects
{
  public partial class ProjectProjectKindPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectKind
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public ProjectProjectKindPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectProjectKindSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProjectKind
  {

    public virtual global::System.Linq.IQueryable<T> ProjectKindSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectProjectKindSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectInternalCustomerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> InternalCustomerFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectInternalCustomerPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectInternalCustomerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> InternalCustomerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectInternalCustomerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectExternalCustomerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ExternalCustomerFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectExternalCustomerPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectExternalCustomerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICounterparty
  {

    public virtual global::System.Linq.IQueryable<T> ExternalCustomerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectExternalCustomerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectManagerPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public ProjectManagerPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectManagerSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> ManagerSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectManagerSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectFolderPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> FolderFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectFolderPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectFolderSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IFolder
  {

    public virtual global::System.Linq.IQueryable<T> FolderSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectFolderSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectLeadingProjectPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProject
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public ProjectLeadingProjectPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectLeadingProjectSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Projects.IProject
  {

    public virtual global::System.Linq.IQueryable<T> LeadingProjectSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectLeadingProjectSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ProjectAdministratorPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> AdministratorFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ProjectAdministratorPropertyFilteringServerHandler(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectAdministratorSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> AdministratorSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ProjectAdministratorSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ProjectFilteringServerHandler<T>
    : global::Sungero.Docflow.ProjectBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Projects.IProject
  {
    private global::Sungero.Projects.IProjectFilterState _filter
    {
      get
      {
        return (Sungero.Projects.IProjectFilterState)this.Filter;
      }
    }

    public ProjectFilteringServerHandler(global::Sungero.Projects.IProjectFilterState filter)
    : base(filter)
    {
    }

    protected ProjectFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Projects.IProjectKind> ProjectKindFiltering(global::System.Linq.IQueryable<Sungero.Projects.IProjectKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> ProjectManagerFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Projects.IProject> LeadingProjectFiltering(global::System.Linq.IQueryable<Sungero.Projects.IProject> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> InternalCustomerFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }

      public virtual global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> ExternalCustomerFiltering(global::System.Linq.IQueryable<Sungero.Parties.ICounterparty> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class ProjectUiFilteringServerHandler<T>
    : global::Sungero.Docflow.ProjectBaseUiFilteringServerHandler<T>
    where T : class, global::Sungero.Projects.IProject
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class ProjectSearchDialogServerHandler : global::Sungero.Docflow.ProjectBaseSearchDialogServerHandler
   {
     private global::Sungero.Projects.Server.ProjectSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Projects.Server.ProjectSearchDialogModel)this.Dialog;
       }
     }

     public ProjectSearchDialogServerHandler(global::Sungero.Projects.Server.ProjectSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ProjectServerHandlers : global::Sungero.Docflow.ProjectBaseServerHandlers
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public ProjectServerHandlers(global::Sungero.Projects.IProject entity)
      : base(entity)
    {
    }
  }

  public partial class ProjectCreatingFromServerHandler : global::Sungero.Docflow.ProjectBaseCreatingFromServerHandler
  {
    private global::Sungero.Projects.IProject _source
    {
      get { return (global::Sungero.Projects.IProject)this.Source; }
    }

    private global::Sungero.Projects.IProjectInfo _info
    {
      get { return (global::Sungero.Projects.IProjectInfo)this._Info; }
    }

    public ProjectCreatingFromServerHandler(global::Sungero.Projects.IProject source, global::Sungero.Projects.IProjectInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ProjectEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
}

// ==================================================================
// ProjectAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
  public class ProjectAccessRights : 
    Sungero.Docflow.Server.ProjectBaseAccessRights, Sungero.Projects.IProjectAccessRights
  {

    public ProjectAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ProjectTypeAccessRights : 
    Sungero.Docflow.Server.ProjectBaseTypeAccessRights, Sungero.Projects.IProjectAccessRights
  {

    public ProjectTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ProjectRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.ProjectBaseRepositoryImplementer<T>,
      global::Sungero.Projects.IProjectRepositoryImplementer<T>
      where T : global::Sungero.Projects.IProject 
    {
       public new global::Sungero.Projects.IProjectAccessRights AccessRights
       {
          get { return (global::Sungero.Projects.IProjectAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Projects.IProjectInfo Info
       {
          get { return (global::Sungero.Projects.IProjectInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Projects.Server.ProjectTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ProjectPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
    public class ProjectProjectKindPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProject
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Projects.IProjectKind>)query;
        var typedState = (global::Sungero.Projects.IProjectFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ProjectKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Projects.IProjectKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProject>(query);
      }
    }

    public class ProjectProjectManagerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProject
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Projects.IProjectFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ProjectManagerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProject>(query);
      }
    }

    public class ProjectLeadingProjectPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProject
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Projects.IProject>)query;
        var typedState = (global::Sungero.Projects.IProjectFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.LeadingProjectFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Projects.IProject>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProject>(query);
      }
    }

    public class ProjectInternalCustomerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProject
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Projects.IProjectFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.InternalCustomerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProject>(query);
      }
    }

    public class ProjectExternalCustomerPanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Projects.IProject
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Parties.ICounterparty>)query;
        var typedState = (global::Sungero.Projects.IProjectFilterState)this.State;
        var handlers = new global::Sungero.Projects.ProjectFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ExternalCustomerFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Parties.ICounterparty>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Projects.IProject>(query);
      }
    }

}

// ==================================================================
// ProjectServerFunctions.g.cs
// ==================================================================

namespace Sungero.Projects.Server
{
  public partial class ProjectFunctions : global::Sungero.Docflow.Server.ProjectBaseFunctions
  {
    private global::Sungero.Projects.IProject _obj
    {
      get { return (global::Sungero.Projects.IProject)this.Entity; }
    }

    public ProjectFunctions(global::Sungero.Projects.IProject entity) : base(entity) { }
  }
}

// ==================================================================
// ProjectFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Functions
{
  internal static class Project
  {
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Projects.IProject CreateProject()
    {
      return global::Sungero.Projects.Server.ProjectFunctions.CreateProject();
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    internal static  void AddDocumentToFolder(global::Sungero.Projects.IProject project, global::Sungero.Content.IElectronicDocument document)
    {
      var functions = (global::Sungero.Projects.Server.ProjectFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)project).FunctionsContainer.ServerFunctions;
    functions.AddDocumentToFolder(document);
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    internal static  void UpdateClassifier(global::Sungero.Projects.IProject project)
    {
      var functions = (global::Sungero.Projects.Server.ProjectFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)project).FunctionsContainer.ServerFunctions;
    functions.UpdateClassifier();
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Linq.IQueryable<global::Sungero.Docflow.IOfficialDocument> GetProjectDocuments(global::Sungero.Projects.IProject project)
    {
      var functions = (global::Sungero.Projects.Server.ProjectFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)project).FunctionsContainer.ServerFunctions;
      return functions.GetProjectDocuments();
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Docflow.IOfficialDocument CreateProjectDocument(global::Sungero.Projects.IProject project)
    {
      var functions = (global::Sungero.Projects.Server.ProjectFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)project).FunctionsContainer.ServerFunctions;
      return functions.CreateProjectDocument();
    }
    /// <redirect project="Sungero.Projects.Server" type="Sungero.Projects.Server.ProjectFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Projects.IProject> GetProjectsManagerOrAdministrator(global::Sungero.CoreEntities.IRecipient recipient)
    {
      return global::Sungero.Projects.Server.ProjectFunctions.GetProjectsManagerOrAdministrator(recipient);
    }

  }
}

// ==================================================================
// ProjectServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Server
{
  public class ProjectServerPublicFunctions : global::Sungero.Projects.Server.IProjectServerPublicFunctions
  {
    public void AddDocumentToFolder(global::Sungero.Projects.IProject project, global::Sungero.Content.IElectronicDocument document)
    {
global::Sungero.Projects.Functions.Project.AddDocumentToFolder(project, document);
    }
  }
}

// ==================================================================
// ProjectQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Queries
{
  public class Project
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Projects.Server.Project.ProjectQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
