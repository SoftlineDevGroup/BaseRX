
// ==================================================================
// ProjectQueueItemBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectQueueItemBase :
    global::Sungero.ExchangeCore.Client.QueueItemBase, global::Sungero.Projects.IProjectQueueItemBase
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("a9f25053-faf8-4d59-8665-ace5a19bc8bd");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Projects.Client.ProjectQueueItemBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Projects.IProjectQueueItemBase, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Projects.IProjectQueueItemBaseState State
    {
      get
      {
        return (global::Sungero.Projects.IProjectQueueItemBaseState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Projects.Shared.ProjectQueueItemBaseState(this);
    }

    public new global::Sungero.Projects.IProjectQueueItemBaseInfo Info
    {
      get
      {
        return (global::Sungero.Projects.IProjectQueueItemBaseInfo)base.Info;
      }
    }

    public new global::Sungero.Projects.IProjectQueueItemBaseAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Projects.IProjectQueueItemBaseAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Projects.Client.ProjectQueueItemBaseAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _ProjectId;

        public virtual global::System.Int32? ProjectId
        {
          get { return this._ProjectId.Value; }
          set { this._ProjectId.Value = value; }
        }










    #endregion

    #region Methods


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Projects.Client.ProjectQueueItemBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Projects.Shared.ProjectQueueItemBaseFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Projects.ProjectQueueItemBaseClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Projects.ProjectQueueItemBaseSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void ProjectIdChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.ProjectId, this.ProjectId, this);
     ((global::Sungero.Projects.ProjectQueueItemBaseSharedHandlers)this.SharedHandlers).ProjectIdChanged(args);
    }



  protected global::System.Int32? ProjectIdValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.ProjectId, value, this, this.Info.Properties.ProjectId);
    ((global::Sungero.Projects.ProjectQueueItemBaseClientHandlers)this.Handlers).ProjectIdValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors





    public ProjectQueueItemBase()
    {
            this._ProjectId = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("ProjectId", this);
            this._ProjectId.ValueChanged += (sender, e) => { this.ProjectIdChangedHandler(); };
            this.AddProperty(this._ProjectId);








    }

    #endregion

  }
}

// ==================================================================
// ProjectQueueItemBasePresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectQueueItemBasePresenter<T> :
    global::Sungero.ExchangeCore.Client.QueueItemBasePresenter<T>
    where T : class, global::Sungero.Projects.IProjectQueueItemBase
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._BoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBoxBase>(() => this.Entity.Id, typeof(T), "Box");

              this._RootBoxCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(T), "RootBox");


    }

    public ProjectQueueItemBasePresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ProjectQueueItemBaseCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectQueueItemBaseCollectionPresenter<T> : 
    global::Sungero.ExchangeCore.Client.QueueItemBaseCollectionPresenter<T>
    where T: class, global::Sungero.Projects.IProjectQueueItemBase
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public ProjectQueueItemBaseCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ProjectQueueItemBaseCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ProjectQueueItemBaseCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ProjectQueueItemBaseCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ProjectQueueItemBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{ 
  public class ProjectQueueItemBaseRepositoryImplementer<T> : 
      global::Sungero.ExchangeCore.Client.QueueItemBaseRepositoryImplementer<T>,
      global::Sungero.Projects.IProjectQueueItemBaseRepositoryImplementer<T>
      where T : global::Sungero.Projects.IProjectQueueItemBase
    {
       public new global::Sungero.Projects.IProjectQueueItemBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Projects.IProjectQueueItemBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Projects.IProjectQueueItemBaseInfo Info
       {
          get { return (global::Sungero.Projects.IProjectQueueItemBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Projects.Client.ProjectQueueItemBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ProjectQueueItemBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Projects.Client
{
  public class ProjectQueueItemBaseAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseAccessRights, Sungero.Projects.IProjectQueueItemBaseAccessRights
  {

    public ProjectQueueItemBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ProjectQueueItemBaseTypeAccessRights : 
    Sungero.ExchangeCore.Client.QueueItemBaseTypeAccessRights, Sungero.Projects.IProjectQueueItemBaseAccessRights
  {

    public ProjectQueueItemBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
