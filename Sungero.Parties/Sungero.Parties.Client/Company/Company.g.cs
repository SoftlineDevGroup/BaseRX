
// ==================================================================
// Company.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class Company :
    global::Sungero.Parties.Client.CompanyBase, global::Sungero.Parties.ICompany
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("593e143c-616c-4d95-9457-fd916c4aa7f8");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Parties.Client.Company.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Parties.ICompany, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Parties.ICompanyState State
    {
      get
      {
        return (global::Sungero.Parties.ICompanyState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Parties.Shared.CompanyState(this);
    }

    public new global::Sungero.Parties.ICompanyInfo Info
    {
      get
      {
        return (global::Sungero.Parties.ICompanyInfo)base.Info;
      }
    }

    public new global::Sungero.Parties.ICompanyAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Parties.ICompanyAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Parties.Client.CompanyAccessRights(this);
    }










    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CompanyActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CompanyCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CompanyAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CompanyAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Parties.Client.CompanyFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Parties.Shared.CompanyFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Parties.CompanyClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Parties.CompanySharedHandlers(this);
    }

    #endregion

    #region Framework events






    #endregion

    #region Constructors







            protected override void InitExchangeBoxesCollectionProperty()
            {
              this._ExchangeBoxes = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Parties.ICompanyExchangeBoxes>("ExchangeBoxes", this);
              this._ExchangeBoxes.ValueChanged += (sender, e) => { this.ExchangeBoxesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._ExchangeBoxes);
              this.SetExchangeBoxesEventHandlers();
            }


    public Company()
    {








    }

    #endregion

  }
}

// ==================================================================
// CompanyPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CompanyPresenter<T> :
    global::Sungero.Parties.Client.CompanyBasePresenter<T>
    where T : class, global::Sungero.Parties.ICompany
  {
    #region Fields and properties




    #endregion

    #region Methods

    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion



    #region Constructors

    private void Init()
    {
              this._ResponsibleCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Responsible");

              this._BankCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.IBank>(() => this.Entity.Id, typeof(T), "Bank");

              this._RegionCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.IRegion>(() => this.Entity.Id, typeof(T), "Region");

              this._CityCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Commons.ICity>(() => this.Entity, typeof(T), "City");

              this._HeadCompanyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Parties.ICompany>(() => this.Entity, typeof(T), "HeadCompany");


                        this._ExchangeBoxesBoxCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(Sungero.Parties.ICompanyExchangeBoxes), "Box");



    }

    public CompanyPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// CompanyCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CompanyCollectionPresenter<T> : 
    global::Sungero.Parties.Client.CompanyBaseCollectionPresenter<T>
    where T: class, global::Sungero.Parties.ICompany
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public CompanyCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public CompanyCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public CompanyCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public CompanyCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// CompanyRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{ 
  public class CompanyRepositoryImplementer<T> : 
      global::Sungero.Parties.Client.CompanyBaseRepositoryImplementer<T>,
      global::Sungero.Parties.ICompanyRepositoryImplementer<T>
      where T : global::Sungero.Parties.ICompany
    {
       public new global::Sungero.Parties.ICompanyAccessRights AccessRights
       {
          get { return (global::Sungero.Parties.ICompanyAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Parties.ICompanyInfo Info
       {
          get { return (global::Sungero.Parties.ICompanyInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Parties.Client.CompanyTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CompanyAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CompanyAccessRights : 
    Sungero.Parties.Client.CompanyBaseAccessRights, Sungero.Parties.ICompanyAccessRights
  {

    public CompanyAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CompanyTypeAccessRights : 
    Sungero.Parties.Client.CompanyBaseTypeAccessRights, Sungero.Parties.ICompanyAccessRights
  {

    public CompanyTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
