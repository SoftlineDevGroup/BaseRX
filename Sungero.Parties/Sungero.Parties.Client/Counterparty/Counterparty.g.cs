
// ==================================================================
// Counterparty.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class Counterparty :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Sungero.Parties.ICounterparty
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("294767f1-009f-4fbd-80fc-f98c49ddc560");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Parties.Client.Counterparty.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Parties.ICounterparty, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Parties.ICounterpartyState State
    {
      get
      {
        return (global::Sungero.Parties.ICounterpartyState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Parties.Shared.CounterpartyState(this);
    }

    public new global::Sungero.Parties.ICounterpartyInfo Info
    {
      get
      {
        return (global::Sungero.Parties.ICounterpartyInfo)base.Info;
      }
    }

    public new global::Sungero.Parties.ICounterpartyAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Parties.ICounterpartyAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Parties.Client.CounterpartyAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _TIN;

        public virtual global::System.String TIN
        {
          get { return this._TIN.Value; }
          set { this._TIN.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _LegalAddress;

        public virtual global::System.String LegalAddress
        {
          get { return this._LegalAddress.Value; }
          set { this._LegalAddress.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _PostalAddress;

        public virtual global::System.String PostalAddress
        {
          get { return this._PostalAddress.Value; }
          set { this._PostalAddress.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Phones;

        public virtual global::System.String Phones
        {
          get { return this._Phones.Value; }
          set { this._Phones.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Email;

        public virtual global::System.String Email
        {
          get { return this._Email.Value; }
          set { this._Email.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Homepage;

        public virtual global::System.String Homepage
        {
          get { return this._Homepage.Value; }
          set { this._Homepage.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Note;

        public virtual global::System.String Note
        {
          get { return this._Note.Value; }
          set { this._Note.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _Nonresident;

        public virtual global::System.Boolean? Nonresident
        {
          get { return this._Nonresident.Value; }
          set { this._Nonresident.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _PSRN;

        public virtual global::System.String PSRN
        {
          get { return this._PSRN.Value; }
          set { this._PSRN.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _NCEO;

        public virtual global::System.String NCEO
        {
          get { return this._NCEO.Value; }
          set { this._NCEO.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _NCEA;

        public virtual global::System.String NCEA
        {
          get { return this._NCEA.Value; }
          set { this._NCEA.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Account;

        public virtual global::System.String Account
        {
          get { return this._Account.Value; }
          set { this._Account.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _CanExchange;

        public virtual global::System.Boolean? CanExchange
        {
          get { return this._CanExchange.Value; }
          set { this._CanExchange.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Code;

        public virtual global::System.String Code
        {
          get { return this._Code.Value; }
          set { this._Code.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.ICity> _City;

              public virtual global::Sungero.Commons.ICity City
              {
              get
              {
                return this._City.Value as global::Sungero.Commons.ICity;
              }

              set
              {
                (this._City as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Commons.IRegion> _Region;

              public virtual global::Sungero.Commons.IRegion Region
              {
              get
              {
                return this._Region.Value as global::Sungero.Commons.IRegion;
              }

              set
              {
                (this._Region as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.IBank> _Bank;

              public virtual global::Sungero.Parties.IBank Bank
              {
              get
              {
                return this._Bank.Value as global::Sungero.Parties.IBank;
              }

              set
              {
                (this._Bank as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _Responsible;

              public virtual global::Sungero.Company.IEmployee Responsible
              {
              get
              {
                return this._Responsible.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._Responsible as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.Parties.ICounterpartyExchangeBoxes> _ExchangeBoxes;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> ExchangeBoxes
          {
            get { return this._ExchangeBoxes.Value; }
          }






    private object _ExchangeBoxesActionsHandlers;

    public object ExchangeBoxesActionsHandlers
    {
      get
      {
        if (this._ExchangeBoxesActionsHandlers == null)
          this._ExchangeBoxesActionsHandlers = this.CreateExchangeBoxesActionsHandlers();
        return this._ExchangeBoxesActionsHandlers;
      }
    }

    private object _ExchangeBoxesCollectionActionsHandlers;

    public object ExchangeBoxesCollectionActionsHandlers
    {
      get
      {
        if (this._ExchangeBoxesCollectionActionsHandlers == null)
          this._ExchangeBoxesCollectionActionsHandlers = this.CreateExchangeBoxesCollectionActionsHandlers();
        return this._ExchangeBoxesCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected virtual object CreateExchangeBoxesActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CounterpartyExchangeBoxesActions();
    }

    protected virtual object CreateExchangeBoxesCollectionActionsHandlers()
    {
      return new global::Sungero.Parties.Client.CounterpartyExchangeBoxesCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Parties.Client.CounterpartyFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Parties.Shared.CounterpartyFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Parties.CounterpartyClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Parties.CounterpartySharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void TINChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.TIN, this.TIN, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).TINChanged(args);
    }

    protected void CityChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyCityChangedEventArgs(this.State.Properties.City, this.City, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CityChanged(args);
    }

    protected void RegionChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyRegionChangedEventArgs(this.State.Properties.Region, this.Region, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).RegionChanged(args);
    }

    protected void LegalAddressChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.LegalAddress, this.LegalAddress, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).LegalAddressChanged(args);
    }

    protected void PostalAddressChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.PostalAddress, this.PostalAddress, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PostalAddressChanged(args);
    }

    protected void PhonesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Phones, this.Phones, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PhonesChanged(args);
    }

    protected void EmailChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Email, this.Email, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).EmailChanged(args);
    }

    protected void HomepageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Homepage, this.Homepage, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).HomepageChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void NonresidentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.Nonresident, this.Nonresident, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NonresidentChanged(args);
    }

    protected void PSRNChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.PSRN, this.PSRN, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PSRNChanged(args);
    }

    protected void NCEOChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.NCEO, this.NCEO, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NCEOChanged(args);
    }

    protected void NCEAChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.NCEA, this.NCEA, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NCEAChanged(args);
    }

    protected void AccountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Account, this.Account, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).AccountChanged(args);
    }

    protected void BankChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyBankChangedEventArgs(this.State.Properties.Bank, this.Bank, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).BankChanged(args);
    }

    protected void ExchangeBoxesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).ExchangeBoxesChanged(args);
    }

    protected void CanExchangeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.CanExchange, this.CanExchange, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CanExchangeChanged(args);
    }

    protected void CodeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Code, this.Code, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CodeChanged(args);
    }

    protected void ResponsibleChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyResponsibleChangedEventArgs(this.State.Properties.Responsible, this.Responsible, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).ResponsibleChanged(args);
    }



    protected virtual global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers CreateExchangeBoxesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers CreateExchangeBoxesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExchangeBoxesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeBoxesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ExchangeBoxesAdded(args);
      }
    }

    protected virtual void ExchangeBoxesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeBoxesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ExchangeBoxesDeleted(args);
      }
    }


  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::System.String TINValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.TIN, value, this, this.Info.Properties.TIN);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).TINValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.ICity CityValueInputHandler(global::Sungero.Commons.ICity value)
  {
    var args = new global::Sungero.Parties.Client.CounterpartyCityValueInputEventArgs(this.City, value, this, this.Info.Properties.City);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).CityValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Commons.IRegion RegionValueInputHandler(global::Sungero.Commons.IRegion value)
  {
    var args = new global::Sungero.Parties.Client.CounterpartyRegionValueInputEventArgs(this.Region, value, this, this.Info.Properties.Region);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).RegionValueInput(args);
    return args.NewValue;
  }

  protected global::System.String LegalAddressValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.LegalAddress, value, this, this.Info.Properties.LegalAddress);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).LegalAddressValueInput(args);
    return args.NewValue;
  }

  protected global::System.String PostalAddressValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.PostalAddress, value, this, this.Info.Properties.PostalAddress);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).PostalAddressValueInput(args);
    return args.NewValue;
  }

  protected global::System.String PhonesValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Phones, value, this, this.Info.Properties.Phones);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).PhonesValueInput(args);
    return args.NewValue;
  }

  protected global::System.String EmailValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Email, value, this, this.Info.Properties.Email);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).EmailValueInput(args);
    return args.NewValue;
  }

  protected global::System.String HomepageValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Homepage, value, this, this.Info.Properties.Homepage);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).HomepageValueInput(args);
    return args.NewValue;
  }

  protected global::System.String NoteValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Note, value, this, this.Info.Properties.Note);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).NoteValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? NonresidentValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.Nonresident, value, this, this.Info.Properties.Nonresident);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).NonresidentValueInput(args);
    return args.NewValue;
  }

  protected global::System.String PSRNValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.PSRN, value, this, this.Info.Properties.PSRN);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).PSRNValueInput(args);
    return args.NewValue;
  }

  protected global::System.String NCEOValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.NCEO, value, this, this.Info.Properties.NCEO);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).NCEOValueInput(args);
    return args.NewValue;
  }

  protected global::System.String NCEAValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.NCEA, value, this, this.Info.Properties.NCEA);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).NCEAValueInput(args);
    return args.NewValue;
  }

  protected global::System.String AccountValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Account, value, this, this.Info.Properties.Account);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).AccountValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Parties.IBank BankValueInputHandler(global::Sungero.Parties.IBank value)
  {
    var args = new global::Sungero.Parties.Client.CounterpartyBankValueInputEventArgs(this.Bank, value, this, this.Info.Properties.Bank);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).BankValueInput(args);
    return args.NewValue;
  }


  protected global::System.Boolean? CanExchangeValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.CanExchange, value, this, this.Info.Properties.CanExchange);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).CanExchangeValueInput(args);
    return args.NewValue;
  }

  protected global::System.String CodeValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Code, value, this, this.Info.Properties.Code);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).CodeValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee ResponsibleValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Parties.Client.CounterpartyResponsibleValueInputEventArgs(this.Responsible, value, this, this.Info.Properties.Responsible);
    ((global::Sungero.Parties.CounterpartyClientHandlers)this.Handlers).ResponsibleValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitCityNavigationProperty()
              {
                this._City = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.ICity>("City", this);
                this._City.ValueChanged += (sender, e) => { this.CityChangedHandler(); };
                this.AddProperty(this._City as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitRegionNavigationProperty()
              {
                this._Region = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Commons.IRegion>("Region", this);
                this._Region.ValueChanged += (sender, e) => { this.RegionChangedHandler(); };
                this.AddProperty(this._Region as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitBankNavigationProperty()
              {
                this._Bank = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.IBank>("Bank", this);
                this._Bank.ValueChanged += (sender, e) => { this.BankChangedHandler(); };
                this.AddProperty(this._Bank as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitResponsibleNavigationProperty()
              {
                this._Responsible = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("Responsible", this);
                this._Responsible.ValueChanged += (sender, e) => { this.ResponsibleChangedHandler(); };
                this.AddProperty(this._Responsible as global::Sungero.Domain.Client.IProperty);
              }



            protected virtual void InitExchangeBoxesCollectionProperty()
            {
              this._ExchangeBoxes = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Parties.ICounterpartyExchangeBoxes>("ExchangeBoxes", this);
              this._ExchangeBoxes.ValueChanged += (sender, e) => { this.ExchangeBoxesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._ExchangeBoxes);
              this.SetExchangeBoxesEventHandlers();
            }

            protected void SetExchangeBoxesEventHandlers()
            {
              this._ExchangeBoxes.ChildEntityAdded += this.ExchangeBoxesAddedHandler;
              this._ExchangeBoxes.ChildEntityDeleted += this.ExchangeBoxesDeletedHandler;
            }


    public Counterparty()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._TIN = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("TIN", this);
            this._TIN.ValueChanged += (sender, e) => { this.TINChangedHandler(); };
            this.AddProperty(this._TIN);

            this._LegalAddress = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("LegalAddress", this);
            this._LegalAddress.ValueChanged += (sender, e) => { this.LegalAddressChangedHandler(); };
            this.AddProperty(this._LegalAddress);

            this._PostalAddress = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("PostalAddress", this);
            this._PostalAddress.ValueChanged += (sender, e) => { this.PostalAddressChangedHandler(); };
            this.AddProperty(this._PostalAddress);

            this._Phones = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Phones", this);
            this._Phones.ValueChanged += (sender, e) => { this.PhonesChangedHandler(); };
            this.AddProperty(this._Phones);

            this._Email = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Email", this);
            this._Email.ValueChanged += (sender, e) => { this.EmailChangedHandler(); };
            this.AddProperty(this._Email);

            this._Homepage = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Homepage", this);
            this._Homepage.ValueChanged += (sender, e) => { this.HomepageChangedHandler(); };
            this.AddProperty(this._Homepage);

            this._Note = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Note", this);
            this._Note.ValueChanged += (sender, e) => { this.NoteChangedHandler(); };
            this.AddProperty(this._Note);

            this._Nonresident = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("Nonresident", this);
            this._Nonresident.ValueChanged += (sender, e) => { this.NonresidentChangedHandler(); };
            this.AddProperty(this._Nonresident);

            this._PSRN = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("PSRN", this);
            this._PSRN.ValueChanged += (sender, e) => { this.PSRNChangedHandler(); };
            this.AddProperty(this._PSRN);

            this._NCEO = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("NCEO", this);
            this._NCEO.ValueChanged += (sender, e) => { this.NCEOChangedHandler(); };
            this.AddProperty(this._NCEO);

            this._NCEA = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("NCEA", this);
            this._NCEA.ValueChanged += (sender, e) => { this.NCEAChangedHandler(); };
            this.AddProperty(this._NCEA);

            this._Account = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Account", this);
            this._Account.ValueChanged += (sender, e) => { this.AccountChangedHandler(); };
            this.AddProperty(this._Account);

            this._CanExchange = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("CanExchange", this);
            this._CanExchange.ValueChanged += (sender, e) => { this.CanExchangeChangedHandler(); };
            this.AddProperty(this._CanExchange);

            this._Code = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Code", this);
            this._Code.ValueChanged += (sender, e) => { this.CodeChangedHandler(); };
            this.AddProperty(this._Code);

            this.InitCityNavigationProperty();

            this.InitRegionNavigationProperty();

            this.InitBankNavigationProperty();

            this.InitResponsibleNavigationProperty();


            this.InitExchangeBoxesCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// CounterpartyPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CounterpartyPresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Sungero.Parties.ICounterparty
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _WriteLetterCommand;

          public global::System.Windows.Input.ICommand WriteLetterCommand
          {
            get
            {
              if (this._WriteLetterCommand == null)
                  this._WriteLetterCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("WriteLetter", this, this.WriteLetter, this.CanWriteLetter) { IsEmptyParameterAllowed = true };
              return this._WriteLetterCommand;
            }
          }
          private global::System.Windows.Input.ICommand _GoToWebsiteCommand;

          public global::System.Windows.Input.ICommand GoToWebsiteCommand
          {
            get
            {
              if (this._GoToWebsiteCommand == null)
                  this._GoToWebsiteCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("GoToWebsite", this, this.GoToWebsite, this.CanGoToWebsite) { IsEmptyParameterAllowed = true };
              return this._GoToWebsiteCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SearchDocumentsCommand;

          public global::System.Windows.Input.ICommand SearchDocumentsCommand
          {
            get
            {
              if (this._SearchDocumentsCommand == null)
                  this._SearchDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SearchDocuments", this, this.SearchDocuments, this.CanSearchDocuments) { IsEmptyParameterAllowed = true };
              return this._SearchDocumentsCommand;
            }
          }
          private global::System.Windows.Input.ICommand _SendInvitationCommand;

          public global::System.Windows.Input.ICommand SendInvitationCommand
          {
            get
            {
              if (this._SendInvitationCommand == null)
                  this._SendInvitationCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SendInvitation", this, this.SendInvitation, this.CanSendInvitation) { IsEmptyParameterAllowed = true };
              return this._SendInvitationCommand;
            }
          }
          private global::System.Windows.Input.ICommand _AcceptInvitationCommand;

          public global::System.Windows.Input.ICommand AcceptInvitationCommand
          {
            get
            {
              if (this._AcceptInvitationCommand == null)
                  this._AcceptInvitationCommand = new global::Sungero.Domain.Client.SingleChildEntityCommand<global::Sungero.Parties.ICounterpartyExchangeBoxes>("AcceptInvitation", this, this.AcceptInvitation, this.CanAcceptInvitation);
              return this._AcceptInvitationCommand;
            }
          }
          private global::System.Windows.Input.ICommand _RejectInvitationCommand;

          public global::System.Windows.Input.ICommand RejectInvitationCommand
          {
            get
            {
              if (this._RejectInvitationCommand == null)
                  this._RejectInvitationCommand = new global::Sungero.Domain.Client.SingleChildEntityCommand<global::Sungero.Parties.ICounterpartyExchangeBoxes>("RejectInvitation", this, this.RejectInvitation, this.CanRejectInvitation);
              return this._RejectInvitationCommand;
            }
          }
          private global::System.Windows.Input.ICommand _CanExchangeCommand;

          public global::System.Windows.Input.ICommand CanExchangeCommand
          {
            get
            {
              if (this._CanExchangeCommand == null)
                  this._CanExchangeCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CanExchange", this, this.CanExchange, this.CanCanExchange) { IsEmptyParameterAllowed = true };
              return this._CanExchangeCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ShowDuplicatesCommand;

          public global::System.Windows.Input.ICommand ShowDuplicatesCommand
          {
            get
            {
              if (this._ShowDuplicatesCommand == null)
                  this._ShowDuplicatesCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowDuplicates", this, this.ShowDuplicates, this.CanShowDuplicates) { IsEmptyParameterAllowed = true };
              return this._ShowDuplicatesCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ShowCounterpartyDocumentsCommand;

          public global::System.Windows.Input.ICommand ShowCounterpartyDocumentsCommand
          {
            get
            {
              if (this._ShowCounterpartyDocumentsCommand == null)
                  this._ShowCounterpartyDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowCounterpartyDocuments", this, this.ShowCounterpartyDocuments, this.CanShowCounterpartyDocuments) { IsEmptyParameterAllowed = true };
              return this._ShowCounterpartyDocumentsCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ForceDuplicateSaveCommand;

          public global::System.Windows.Input.ICommand ForceDuplicateSaveCommand
          {
            get
            {
              if (this._ForceDuplicateSaveCommand == null)
                  this._ForceDuplicateSaveCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ForceDuplicateSave", this, this.ForceDuplicateSave, this.CanForceDuplicateSave) { IsEmptyParameterAllowed = true };
              return this._ForceDuplicateSaveCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanWriteLetter(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanWriteLetter(args);
              }

              private void WriteLetter(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.WriteLetter);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).WriteLetter(args);
              }

              private bool CanGoToWebsite(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanGoToWebsite(args);
              }

              private void GoToWebsite(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.GoToWebsite);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).GoToWebsite(args);
              }

              private bool CanSearchDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanSearchDocuments(args);
              }

              private void SearchDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SearchDocuments);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).SearchDocuments(args);
              }

              private bool CanSendInvitation(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanSendInvitation(args);
              }

              private void SendInvitation(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.SendInvitation);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).SendInvitation(args);
              }

            private bool CanAcceptInvitation(global::Sungero.Domain.Shared.IChildEntity selectedEntity,
              global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Domain.Shared.IChildEntity> entityCollection)
            {
              var args = new global::Sungero.Domain.Client.WpfCanExecuteChildCollectionActionArgs(this.Entity, this);
              return global::Sungero.Domain.Client.ActionExecutor.CanExecuteChildEntityAction<global::Sungero.Domain.Client.WpfCanExecuteChildCollectionActionArgs>(selectedEntity, entityCollection, args,
                ((Sungero.Parties.Client.CounterpartyExchangeBoxesActions)(this.Entity as global::Sungero.Parties.Client.Counterparty).ExchangeBoxesActionsHandlers).CanAcceptInvitation);
            }

            private void AcceptInvitation(global::Sungero.Domain.Shared.IChildEntity selectedEntity,
              global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Domain.Shared.IChildEntity> entityCollection)
            {
              var args = new global::Sungero.Domain.Client.WpfExecuteChildCollectionActionArgs(this.Entity, this);
              global::Sungero.Domain.Client.ActionExecutor.ExecuteChildEntityAction<global::Sungero.Domain.Client.WpfExecuteChildCollectionActionArgs>(selectedEntity, entityCollection, args,
                ((Sungero.Parties.Client.CounterpartyExchangeBoxesActions)(this.Entity as global::Sungero.Parties.Client.Counterparty).ExchangeBoxesActionsHandlers).AcceptInvitation);
            }
            private bool CanRejectInvitation(global::Sungero.Domain.Shared.IChildEntity selectedEntity,
              global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Domain.Shared.IChildEntity> entityCollection)
            {
              var args = new global::Sungero.Domain.Client.WpfCanExecuteChildCollectionActionArgs(this.Entity, this);
              return global::Sungero.Domain.Client.ActionExecutor.CanExecuteChildEntityAction<global::Sungero.Domain.Client.WpfCanExecuteChildCollectionActionArgs>(selectedEntity, entityCollection, args,
                ((Sungero.Parties.Client.CounterpartyExchangeBoxesActions)(this.Entity as global::Sungero.Parties.Client.Counterparty).ExchangeBoxesActionsHandlers).CanRejectInvitation);
            }

            private void RejectInvitation(global::Sungero.Domain.Shared.IChildEntity selectedEntity,
              global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Domain.Shared.IChildEntity> entityCollection)
            {
              var args = new global::Sungero.Domain.Client.WpfExecuteChildCollectionActionArgs(this.Entity, this);
              global::Sungero.Domain.Client.ActionExecutor.ExecuteChildEntityAction<global::Sungero.Domain.Client.WpfExecuteChildCollectionActionArgs>(selectedEntity, entityCollection, args,
                ((Sungero.Parties.Client.CounterpartyExchangeBoxesActions)(this.Entity as global::Sungero.Parties.Client.Counterparty).ExchangeBoxesActionsHandlers).RejectInvitation);
            }
              private bool CanCanExchange(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanCanExchange(args);
              }

              private void CanExchange(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.CanExchange);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanExchange(args);
              }

              private bool CanShowDuplicates(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanShowDuplicates(args);
              }

              private void ShowDuplicates(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowDuplicates);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).ShowDuplicates(args);
              }

              private bool CanShowCounterpartyDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanShowCounterpartyDocuments(args);
              }

              private void ShowCounterpartyDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowCounterpartyDocuments);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).ShowCounterpartyDocuments(args);
              }

              private bool CanForceDuplicateSave(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanForceDuplicateSave(args);
              }

              private void ForceDuplicateSave(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ForceDuplicateSave);
                ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).ForceDuplicateSave(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _CityCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter CityCollectionPresenter
              {
          get { return this._CityCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _RegionCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter RegionCollectionPresenter
              {
          get { return this._RegionCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _BankCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter BankCollectionPresenter
              {
          get { return this._BankCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ResponsibleCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ResponsibleCollectionPresenter
              {
          get { return this._ResponsibleCollectionPresenter; }
        }


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ExchangeBoxesBoxCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter ExchangeBoxesBoxCollectionPresenter
                          {
                  get { return this._ExchangeBoxesBoxCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
                  this._CityCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.ICity>(global::System.Guid.Parse("93db464a-c19f-441c-bf41-7ad6b9ea2fb5"));
              this._CityCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Commons.ICity>(() => this.Entity, typeof(T), "City");

                  this._RegionCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Commons.IRegion>(global::System.Guid.Parse("78b9f52c-febf-4a73-89ae-c7a4723e3944"));
              this._RegionCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.IRegion>(() => this.Entity.Id, typeof(T), "Region");

                  this._BankCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.IBank>(global::System.Guid.Parse("342f64bd-29fa-4e8b-bbdf-00fff9b097dc"));
              this._BankCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.IBank>(() => this.Entity.Id, typeof(T), "Bank");

                  this._ResponsibleCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("dbec1fc7-045d-4790-9452-1939eb678e89"));
              this._ResponsibleCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Responsible");


                          this._ExchangeBoxesBoxCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.ExchangeCore.IBusinessUnitBox>(global::System.Guid.Parse("6f85105e-ff7c-4a73-8bae-1cbf10c49654"));
                        this._ExchangeBoxesBoxCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.ExchangeCore.IBusinessUnitBox>(() => this.Entity.Id, typeof(Sungero.Parties.ICounterpartyExchangeBoxes), "Box");


    }

    public CounterpartyPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// CounterpartyCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CounterpartyCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Sungero.Parties.ICounterparty
  {
    #region Actions

          private global::System.Windows.Input.ICommand _SearchDocumentsCommand;  

          public global::System.Windows.Input.ICommand SearchDocumentsCommand 
          { 
            get
            { 
              if (this._SearchDocumentsCommand == null)
                this._SearchDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("SearchDocuments", this, this.SearchDocuments, this.CanSearchDocuments) { IsEmptyParameterAllowed = true };
              return this._SearchDocumentsCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _ShowCounterpartyDocumentsCommand;  

          public global::System.Windows.Input.ICommand ShowCounterpartyDocumentsCommand 
          { 
            get
            { 
              if (this._ShowCounterpartyDocumentsCommand == null)
                this._ShowCounterpartyDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowCounterpartyDocuments", this, this.ShowCounterpartyDocuments, this.CanShowCounterpartyDocuments) { IsEmptyParameterAllowed = true };
              return this._ShowCounterpartyDocumentsCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanSearchDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanSearchDocuments(args);
        }

        private void SearchDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.SearchDocuments);
          ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).SearchDocuments(args);
        }

        private bool CanShowCounterpartyDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).CanShowCounterpartyDocuments(args);
        }

        private void ShowCounterpartyDocuments(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.ShowCounterpartyDocuments);
          ((Sungero.Parties.Client.CounterpartyActions)(entity as Sungero.Parties.Client.Counterparty).ActionsHandlers).ShowCounterpartyDocuments(args);
        }



    #endregion

    public CounterpartyCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public CounterpartyCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public CounterpartyCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public CounterpartyCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// CounterpartyRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{ 
  public class CounterpartyRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Sungero.Parties.ICounterpartyRepositoryImplementer<T>
      where T : global::Sungero.Parties.ICounterparty
    {
       public new global::Sungero.Parties.ICounterpartyAccessRights AccessRights
       {
          get { return (global::Sungero.Parties.ICounterpartyAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Parties.ICounterpartyInfo Info
       {
          get { return (global::Sungero.Parties.ICounterpartyInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Parties.Client.CounterpartyTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CounterpartyAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Client
{
  public class CounterpartyAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Sungero.Parties.ICounterpartyAccessRights
  {
           public bool CanSetExchange(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, recipient);
           }
           public bool CanSetExchange()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanSetExchange()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange);
           }
           public bool CanChangeCard(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, recipient);
           }
           public bool CanChangeCard()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanChangeCard()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard);
           }


    public CounterpartyAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CounterpartyTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Sungero.Parties.ICounterpartyAccessRights
  {
           public bool CanSetExchange(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, recipient);
           }
           public bool CanSetExchange()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanSetExchange()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange);
           }
           public bool CanChangeCard(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, recipient);
           }
           public bool CanChangeCard()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanChangeCard()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard);
           }


    public CounterpartyTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
