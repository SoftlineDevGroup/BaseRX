
// ==================================================================
// CompanyBase.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyBaseFilter<T> :
      global::Sungero.Parties.Server.CounterpartyFilter<T>
      where T : class, global::Sungero.Parties.ICompanyBase
    {
      private global::Sungero.Parties.ICompanyBaseFilterState filter
      {
        get
        {
          return (Sungero.Parties.ICompanyBaseFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public CompanyBaseFilter(global::Sungero.Parties.ICompanyBaseFilterState filter)
      : base(filter)
      {
      }

      protected CompanyBaseFilter()
      {
      }
    }
      public class CompanyBaseUiFilter<T> :
        global::Sungero.Parties.Server.CounterpartyUiFilter<T>
        where T : class, global::Sungero.Parties.ICompanyBase
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class CompanyBaseSearchDialogModel : global::Sungero.Parties.Server.CounterpartySearchDialogModel
        {
                  public override global::System.String TIN { get; protected set; }
                  public override global::System.Boolean? CanExchange { get; protected set; }
                  public override global::System.String Phones { get; protected set; }
                  public override global::System.String Email { get; protected set; }
                  public override global::System.String Homepage { get; protected set; }
                  public override global::System.String Note { get; protected set; }
                  public override global::System.String PSRN { get; protected set; }
                  public override global::System.String NCEO { get; protected set; }
                  public override global::System.String NCEA { get; protected set; }
                  public override global::System.String Account { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Responsible { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.IBank> Bank { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Commons.ICity> City { get; protected set; }


                  public virtual global::System.String TRRC { get; protected set; }



                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new CompanyBaseExchangeBoxesModel ExchangeBoxes { get { return (CompanyBaseExchangeBoxesModel)base.ExchangeBoxes; } protected set { base.ExchangeBoxes = value; } }

        }

      public class CompanyBaseExchangeBoxesModel : global::Sungero.Parties.Server.CounterpartyExchangeBoxesModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class CompanyBaseFilterForHeadCompany<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICompany
    where TSourceEntity : class, global::Sungero.Parties.ICompanyBase
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Parties.CompanyBaseHeadCompanyPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).HeadCompanyFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CompanyBaseFilterForHeadCompany(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CompanyBaseSearchFilterForHeadCompany<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.ICompany
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Parties.CompanyBaseHeadCompanySearchPropertyFilteringServerHandler<TQueryEntity>().HeadCompanySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CompanyBaseSearchFilterForHeadCompany(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Parties.Server.CompanyBaseFilter<global::Sungero.Parties.ICompanyBase>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Parties.Server.CompanyBaseUiFilter<global::Sungero.Parties.ICompanyBase>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Parties.Server.CompanyBaseFilterForHeadCompany<global::Sungero.Parties.ICompany, global::Sungero.Parties.ICompanyBase>), "HeadCompany")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Parties.Server.CompanyBaseSearchFilterForHeadCompany<global::Sungero.Parties.ICompany>), "HeadCompany")]


  public class CompanyBase :
    global::Sungero.Parties.Server.Counterparty, global::Sungero.Parties.ICompanyBase
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("78278dd7-f0d2-4e35-b543-13d0bd462cd6");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Parties.Server.CompanyBase.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Parties.ICompanyBase, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Parties.ICompanyBaseState State
    {
      get { return (global::Sungero.Parties.ICompanyBaseState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Parties.Shared.CompanyBaseState(this);
    }

    public new virtual global::Sungero.Parties.ICompanyBaseInfo Info
    {
      get { return (global::Sungero.Parties.ICompanyBaseInfo)base.Info; }
    }

    public new virtual global::Sungero.Parties.ICompanyBaseAccessRights AccessRights
    {
      get { return (global::Sungero.Parties.ICompanyBaseAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Parties.Server.CompanyBaseAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Parties.Server.CompanyBaseFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Parties.Shared.CompanyBaseFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Parties.CompanyBaseServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Parties.CompanyBaseSharedHandlers(this);
    }

    private global::System.String _TRRC;
    public virtual global::System.String TRRC
    {
      get
      {
        return this._TRRC;
      }

      set
      {
        this.SetPropertyValue("TRRC", this._TRRC, value, (propertyValue) => { this._TRRC = propertyValue; }, this.TRRCChangedHandler);
      }
    }
    private global::System.Boolean? _IsCardReadOnly;
    public virtual global::System.Boolean? IsCardReadOnly
    {
      get
      {
        return this._IsCardReadOnly;
      }

      set
      {
        this.SetPropertyValue("IsCardReadOnly", this._IsCardReadOnly, value, (propertyValue) => { this._IsCardReadOnly = propertyValue; }, this.IsCardReadOnlyChangedHandler);
      }
    }
    private global::System.String _LegalName;
    public virtual global::System.String LegalName
    {
      get
      {
        return this._LegalName;
      }

      set
      {
        this.SetPropertyValue("LegalName", this._LegalName, value, (propertyValue) => { this._LegalName = propertyValue; }, this.LegalNameChangedHandler);
      }
    }







    private global::Sungero.Parties.ICompany _HeadCompany;
    public virtual global::Sungero.Parties.ICompany HeadCompany
    {
      get
      {
        return this._HeadCompany;
      }

      set
      {
        this.SetPropertyValue("HeadCompany", this._HeadCompany, value, (propertyValue) => { this._HeadCompany = propertyValue; }, this.HeadCompanyChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> CreateExchangeBoxesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Parties.ICompanyBaseExchangeBoxes>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Parties.CompanyBaseCreatingFromServerHandler((global::Sungero.Parties.ICompanyBase)entitySource, this.Info);
    }

    #region Framework events

    protected void HeadCompanyChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CompanyBaseHeadCompanyChangedEventArgs(this.State.Properties.HeadCompany, this.HeadCompany, this);
     ((global::Sungero.Parties.CompanyBaseSharedHandlers)this.SharedHandlers).HeadCompanyChanged(args);
    }

    protected void TRRCChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.TRRC, this.TRRC, this);
     ((global::Sungero.Parties.CompanyBaseSharedHandlers)this.SharedHandlers).TRRCChanged(args);
    }

    protected void IsCardReadOnlyChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsCardReadOnly, this.IsCardReadOnly, this);
     ((global::Sungero.Parties.CompanyBaseSharedHandlers)this.SharedHandlers).IsCardReadOnlyChanged(args);
    }

    protected void LegalNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.LegalName, this.LegalName, this);
     ((global::Sungero.Parties.CompanyBaseSharedHandlers)this.SharedHandlers).LegalNameChanged(args);
    }





    #endregion


    public CompanyBase()
    {
    }

  }
}

// ==================================================================
// CompanyBaseHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties
{
  public partial class CompanyBaseHeadCompanyPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICompany
  {
    private global::Sungero.Parties.ICompanyBase _obj
    {
      get { return (global::Sungero.Parties.ICompanyBase)this.Entity; }
    }

    public CompanyBaseHeadCompanyPropertyFilteringServerHandler(global::Sungero.Parties.ICompanyBase entity)
      : base(entity)
    {
    }
  }

  public partial class CompanyBaseHeadCompanySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.ICompany
  {

    public virtual global::System.Linq.IQueryable<T> HeadCompanySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CompanyBaseHeadCompanySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class CompanyBaseFilteringServerHandler<T>
    : global::Sungero.Parties.CounterpartyFilteringServerHandler<T>  
    where T : class, global::Sungero.Parties.ICompanyBase
  {
    private global::Sungero.Parties.ICompanyBaseFilterState _filter
    {
      get
      {
        return (Sungero.Parties.ICompanyBaseFilterState)this.Filter;
      }
    }

    public CompanyBaseFilteringServerHandler(global::Sungero.Parties.ICompanyBaseFilterState filter)
    : base(filter)
    {
    }

    protected CompanyBaseFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Company.IEmployee> ResponsibleFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.ResponsibleFiltering(query, e);
              return query;
      }


  }

  public partial class CompanyBaseUiFilteringServerHandler<T>
    : global::Sungero.Parties.CounterpartyUiFilteringServerHandler<T>
    where T : class, global::Sungero.Parties.ICompanyBase
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class CompanyBaseSearchDialogServerHandler : global::Sungero.Parties.CounterpartySearchDialogServerHandler
   {
     private global::Sungero.Parties.Server.CompanyBaseSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Parties.Server.CompanyBaseSearchDialogModel)this.Dialog;
       }
     }

     public CompanyBaseSearchDialogServerHandler(global::Sungero.Parties.Server.CompanyBaseSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class CompanyBaseServerHandlers : global::Sungero.Parties.CounterpartyServerHandlers
  {
    private global::Sungero.Parties.ICompanyBase _obj
    {
      get { return (global::Sungero.Parties.ICompanyBase)this.Entity; }
    }

    public CompanyBaseServerHandlers(global::Sungero.Parties.ICompanyBase entity)
      : base(entity)
    {
    }
  }

  public partial class CompanyBaseCreatingFromServerHandler : global::Sungero.Parties.CounterpartyCreatingFromServerHandler
  {
    private global::Sungero.Parties.ICompanyBase _source
    {
      get { return (global::Sungero.Parties.ICompanyBase)this.Source; }
    }

    private global::Sungero.Parties.ICompanyBaseInfo _info
    {
      get { return (global::Sungero.Parties.ICompanyBaseInfo)this._Info; }
    }

    public CompanyBaseCreatingFromServerHandler(global::Sungero.Parties.ICompanyBase source, global::Sungero.Parties.ICompanyBaseInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// CompanyBaseEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
}

// ==================================================================
// CompanyBaseAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CompanyBaseAccessRights : 
    Sungero.Parties.Server.CounterpartyAccessRights, Sungero.Parties.ICompanyBaseAccessRights
  {

    public CompanyBaseAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CompanyBaseTypeAccessRights : 
    Sungero.Parties.Server.CounterpartyTypeAccessRights, Sungero.Parties.ICompanyBaseAccessRights
  {

    public CompanyBaseTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// CompanyBaseRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyBaseRepositoryImplementer<T> : 
      global::Sungero.Parties.Server.CounterpartyRepositoryImplementer<T>,
      global::Sungero.Parties.ICompanyBaseRepositoryImplementer<T>
      where T : global::Sungero.Parties.ICompanyBase 
    {
       public new global::Sungero.Parties.ICompanyBaseAccessRights AccessRights
       {
          get { return (global::Sungero.Parties.ICompanyBaseAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Parties.ICompanyBaseInfo Info
       {
          get { return (global::Sungero.Parties.ICompanyBaseInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Parties.Server.CompanyBaseTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CompanyBasePanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyBaseResponsiblePanelNavigationFilter : global::Sungero.Parties.Server.CounterpartyResponsiblePanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Parties.ICompanyBase
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Parties.ICompanyBaseFilterState)this.State;
        var handlers = new global::Sungero.Parties.CompanyBaseFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ResponsibleFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Parties.ICompanyBase>(query);
      }
    }

}

// ==================================================================
// CompanyBaseServerFunctions.g.cs
// ==================================================================

namespace Sungero.Parties.Server
{
  public partial class CompanyBaseFunctions : global::Sungero.Parties.Server.CounterpartyFunctions
  {
    private global::Sungero.Parties.ICompanyBase _obj
    {
      get { return (global::Sungero.Parties.ICompanyBase)this.Entity; }
    }

    public CompanyBaseFunctions(global::Sungero.Parties.ICompanyBase entity) : base(entity) { }
  }
}

// ==================================================================
// CompanyBaseFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Functions
{
  internal static class CompanyBase
  {
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CompanyBaseFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Parties.Structures.CompanyBase.FoundCompanies FillFromService(global::Sungero.Parties.ICompanyBase companyBase, global::System.String specifiedPSRN)
    {
      var functions = (global::Sungero.Parties.Server.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.ServerFunctions;
      return functions.FillFromService(specifiedPSRN);
    }
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CompanyBaseFunctions" />
    internal static  global::System.String GetFormatOkved(CompanyData.CompaniesDTO.CompanyDTO company)
    {
      return global::Sungero.Parties.Server.CompanyBaseFunctions.GetFormatOkved(company);
    }

    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.String GetCounterpartyWithSameTinWarning(global::Sungero.Parties.ICompanyBase companyBase)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.GetCounterpartyWithSameTinWarning();
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.String GetCounterpartyDuplicatesErrorText(global::Sungero.Parties.ICompanyBase companyBase)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.GetCounterpartyDuplicatesErrorText();
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDuplicates(global::Sungero.Parties.ICompanyBase companyBase, global::System.Boolean excludeClosed)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.GetDuplicates(excludeClosed);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.Boolean IsSelfEmployed(global::Sungero.Parties.ICompanyBase companyBase)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.IsSelfEmployed();
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.String CheckPsrnLength(global::Sungero.Parties.ICompanyBase companyBase, global::System.String psrn)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.CheckPsrnLength(psrn);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CompanyBaseFunctions" />
    internal static  global::System.String CheckNceoLength(global::Sungero.Parties.ICompanyBase companyBase, global::System.String nceo)
    {
      var functions = (global::Sungero.Parties.Shared.CompanyBaseFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)companyBase).FunctionsContainer.SharedFunctions;
      return functions.CheckNceoLength(nceo);
    }

  }
}

// ==================================================================
// CompanyBaseServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CompanyBaseServerPublicFunctions : global::Sungero.Parties.Server.ICompanyBaseServerPublicFunctions
  {
  }
}

// ==================================================================
// CompanyBaseQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Queries
{
  public class CompanyBase
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Parties.Server.CompanyBase.CompanyBaseQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
