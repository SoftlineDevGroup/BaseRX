
// ==================================================================
// Counterparty.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CounterpartyFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Parties.ICounterparty
    {
      protected new global::Sungero.Parties.ICounterpartyFilterState Filter { get; private set; }

      private global::Sungero.Parties.ICounterpartyFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Parties.CounterpartyFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public CounterpartyFilter(global::Sungero.Parties.ICounterpartyFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected CounterpartyFilter()
      {
      }
    }
      public class CounterpartyUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Parties.ICounterparty
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class CounterpartySearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }
                  public virtual global::System.String TIN { get; protected set; }
                  public virtual global::System.String Phones { get; protected set; }
                  public virtual global::System.String Email { get; protected set; }
                  public virtual global::System.String Homepage { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }
                  public virtual global::System.String PSRN { get; protected set; }
                  public virtual global::System.String NCEO { get; protected set; }
                  public virtual global::System.String NCEA { get; protected set; }
                  public virtual global::System.String Account { get; protected set; }
                  public virtual global::System.Boolean? CanExchange { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Commons.ICity> City { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Parties.IBank> Bank { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Responsible { get; protected set; }


                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public CounterpartyExchangeBoxesModel ExchangeBoxes { get; protected set; }

        }


      public class CounterpartyExchangeBoxesModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class CounterpartyFilterForCity<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICity
    where TSourceEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Parties.CounterpartyCityPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CityFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyFilterForCity(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartySearchFilterForCity<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Commons.ICity
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Parties.CounterpartyCitySearchPropertyFilteringServerHandler<TQueryEntity>().CitySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartySearchFilterForCity(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyFilterForRegion<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Commons.IRegion
    where TSourceEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Parties.CounterpartyRegionPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).RegionFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyFilterForRegion(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartySearchFilterForRegion<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Commons.IRegion
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Parties.CounterpartyRegionSearchPropertyFilteringServerHandler<TQueryEntity>().RegionSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartySearchFilterForRegion(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyFilterForBank<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IBank
    where TSourceEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Parties.CounterpartyBankPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).BankFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyFilterForBank(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartySearchFilterForBank<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IBank
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Parties.CounterpartyBankSearchPropertyFilteringServerHandler<TQueryEntity>().BankSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartySearchFilterForBank(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartyFilterForResponsible<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Parties.ICounterparty
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Parties.CounterpartyResponsiblePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ResponsibleFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartyFilterForResponsible(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class CounterpartySearchFilterForResponsible<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Parties.CounterpartyResponsibleSearchPropertyFilteringServerHandler<TQueryEntity>().ResponsibleSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public CounterpartySearchFilterForResponsible(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Parties.Server.CounterpartyFilter<global::Sungero.Parties.ICounterparty>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Parties.Server.CounterpartyUiFilter<global::Sungero.Parties.ICounterparty>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartyFilterForCity<global::Sungero.Commons.ICity, global::Sungero.Parties.ICounterparty>), "City")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartySearchFilterForCity<global::Sungero.Commons.ICity>), "City")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartyFilterForRegion<global::Sungero.Commons.IRegion, global::Sungero.Parties.ICounterparty>), "Region")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartySearchFilterForRegion<global::Sungero.Commons.IRegion>), "Region")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartyFilterForBank<global::Sungero.Parties.IBank, global::Sungero.Parties.ICounterparty>), "Bank")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartySearchFilterForBank<global::Sungero.Parties.IBank>), "Bank")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartyFilterForResponsible<global::Sungero.Company.IEmployee, global::Sungero.Parties.ICounterparty>), "Responsible")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Parties.Server.CounterpartySearchFilterForResponsible<global::Sungero.CoreEntities.IRecipient>), "Responsible")]


  public class Counterparty :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Parties.ICounterparty
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("294767f1-009f-4fbd-80fc-f98c49ddc560");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Parties.Server.Counterparty.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Parties.ICounterparty, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Parties.ICounterpartyState State
    {
      get { return (global::Sungero.Parties.ICounterpartyState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Parties.Shared.CounterpartyState(this);
    }

    public new virtual global::Sungero.Parties.ICounterpartyInfo Info
    {
      get { return (global::Sungero.Parties.ICounterpartyInfo)base.Info; }
    }

    public new virtual global::Sungero.Parties.ICounterpartyAccessRights AccessRights
    {
      get { return (global::Sungero.Parties.ICounterpartyAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Parties.Server.CounterpartyAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Parties.Server.CounterpartyFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Parties.Shared.CounterpartyFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Parties.CounterpartyServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Parties.CounterpartySharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.String _TIN;
    public virtual global::System.String TIN
    {
      get
      {
        return this._TIN;
      }

      set
      {
        this.SetPropertyValue("TIN", this._TIN, value, (propertyValue) => { this._TIN = propertyValue; }, this.TINChangedHandler);
      }
    }
    private global::System.String _LegalAddress;
    public virtual global::System.String LegalAddress
    {
      get
      {
        return this._LegalAddress;
      }

      set
      {
        this.SetPropertyValue("LegalAddress", this._LegalAddress, value, (propertyValue) => { this._LegalAddress = propertyValue; }, this.LegalAddressChangedHandler);
      }
    }
    private global::System.String _PostalAddress;
    public virtual global::System.String PostalAddress
    {
      get
      {
        return this._PostalAddress;
      }

      set
      {
        this.SetPropertyValue("PostalAddress", this._PostalAddress, value, (propertyValue) => { this._PostalAddress = propertyValue; }, this.PostalAddressChangedHandler);
      }
    }
    private global::System.String _Phones;
    public virtual global::System.String Phones
    {
      get
      {
        return this._Phones;
      }

      set
      {
        this.SetPropertyValue("Phones", this._Phones, value, (propertyValue) => { this._Phones = propertyValue; }, this.PhonesChangedHandler);
      }
    }
    private global::System.String _Email;
    public virtual global::System.String Email
    {
      get
      {
        return this._Email;
      }

      set
      {
        this.SetPropertyValue("Email", this._Email, value, (propertyValue) => { this._Email = propertyValue; }, this.EmailChangedHandler);
      }
    }
    private global::System.String _Homepage;
    public virtual global::System.String Homepage
    {
      get
      {
        return this._Homepage;
      }

      set
      {
        this.SetPropertyValue("Homepage", this._Homepage, value, (propertyValue) => { this._Homepage = propertyValue; }, this.HomepageChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.Boolean? _Nonresident;
    public virtual global::System.Boolean? Nonresident
    {
      get
      {
        return this._Nonresident;
      }

      set
      {
        this.SetPropertyValue("Nonresident", this._Nonresident, value, (propertyValue) => { this._Nonresident = propertyValue; }, this.NonresidentChangedHandler);
      }
    }
    private global::System.String _PSRN;
    public virtual global::System.String PSRN
    {
      get
      {
        return this._PSRN;
      }

      set
      {
        this.SetPropertyValue("PSRN", this._PSRN, value, (propertyValue) => { this._PSRN = propertyValue; }, this.PSRNChangedHandler);
      }
    }
    private global::System.String _NCEO;
    public virtual global::System.String NCEO
    {
      get
      {
        return this._NCEO;
      }

      set
      {
        this.SetPropertyValue("NCEO", this._NCEO, value, (propertyValue) => { this._NCEO = propertyValue; }, this.NCEOChangedHandler);
      }
    }
    private global::System.String _NCEA;
    public virtual global::System.String NCEA
    {
      get
      {
        return this._NCEA;
      }

      set
      {
        this.SetPropertyValue("NCEA", this._NCEA, value, (propertyValue) => { this._NCEA = propertyValue; }, this.NCEAChangedHandler);
      }
    }
    private global::System.String _Account;
    public virtual global::System.String Account
    {
      get
      {
        return this._Account;
      }

      set
      {
        this.SetPropertyValue("Account", this._Account, value, (propertyValue) => { this._Account = propertyValue; }, this.AccountChangedHandler);
      }
    }
    private global::System.Boolean? _CanExchange;
    public virtual global::System.Boolean? CanExchange
    {
      get
      {
        return this._CanExchange;
      }

      set
      {
        this.SetPropertyValue("CanExchange", this._CanExchange, value, (propertyValue) => { this._CanExchange = propertyValue; }, this.CanExchangeChangedHandler);
      }
    }
    private global::System.String _Code;
    public virtual global::System.String Code
    {
      get
      {
        return this._Code;
      }

      set
      {
        this.SetPropertyValue("Code", this._Code, value, (propertyValue) => { this._Code = propertyValue; }, this.CodeChangedHandler);
      }
    }







    private global::Sungero.Commons.ICity _City;
    public virtual global::Sungero.Commons.ICity City
    {
      get
      {
        return this._City;
      }

      set
      {
        this.SetPropertyValue("City", this._City, value, (propertyValue) => { this._City = propertyValue; }, this.CityChangedHandler);
      }
    }
    private global::Sungero.Commons.IRegion _Region;
    public virtual global::Sungero.Commons.IRegion Region
    {
      get
      {
        return this._Region;
      }

      set
      {
        this.SetPropertyValue("Region", this._Region, value, (propertyValue) => { this._Region = propertyValue; }, this.RegionChangedHandler);
      }
    }
    private global::Sungero.Parties.IBank _Bank;
    public virtual global::Sungero.Parties.IBank Bank
    {
      get
      {
        return this._Bank;
      }

      set
      {
        this.SetPropertyValue("Bank", this._Bank, value, (propertyValue) => { this._Bank = propertyValue; }, this.BankChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _Responsible;
    public virtual global::Sungero.Company.IEmployee Responsible
    {
      get
      {
        return this._Responsible;
      }

      set
      {
        this.SetPropertyValue("Responsible", this._Responsible, value, (propertyValue) => { this._Responsible = propertyValue; }, this.ResponsibleChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> _ExchangeBoxes;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> ExchangeBoxes
    {
      get
      {
        if (this._ExchangeBoxes == null)
        {
          this._ExchangeBoxes = this.CreateExchangeBoxesCollection();
          this.SetExchangeBoxesEventHandlers();
        }
        return this._ExchangeBoxes;
      }

      set
      {
        if (this._ExchangeBoxes != null)
          this.UnsetChildCollectionEventHandlers(this._ExchangeBoxes);

        this._ExchangeBoxes = value;
        this.SetExchangeBoxesEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> CreateExchangeBoxesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes>() { RootEntity = this };
    }

    private void SetExchangeBoxesEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._ExchangeBoxes, "ExchangeBoxes");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._ExchangeBoxes;
      changeNotifier.Added += this.ExchangeBoxesAddedHandler;
      changeNotifier.Deleted += this.ExchangeBoxesDeletedHandler;
      changeNotifier.Added += this.ExchangeBoxesCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.ExchangeBoxesCollectionUpdateEventHandler;
      changeNotifier.Updated += this.ExchangeBoxesCollectionUpdateEventHandler;
    }

    private void ExchangeBoxesCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.ExchangeBoxesChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Parties.CounterpartyCreatingFromServerHandler((global::Sungero.Parties.ICounterparty)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void TINChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.TIN, this.TIN, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).TINChanged(args);
    }

    protected void CityChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyCityChangedEventArgs(this.State.Properties.City, this.City, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CityChanged(args);
    }

    protected void RegionChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyRegionChangedEventArgs(this.State.Properties.Region, this.Region, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).RegionChanged(args);
    }

    protected void LegalAddressChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.LegalAddress, this.LegalAddress, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).LegalAddressChanged(args);
    }

    protected void PostalAddressChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.PostalAddress, this.PostalAddress, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PostalAddressChanged(args);
    }

    protected void PhonesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Phones, this.Phones, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PhonesChanged(args);
    }

    protected void EmailChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Email, this.Email, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).EmailChanged(args);
    }

    protected void HomepageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Homepage, this.Homepage, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).HomepageChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void NonresidentChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.Nonresident, this.Nonresident, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NonresidentChanged(args);
    }

    protected void PSRNChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.PSRN, this.PSRN, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).PSRNChanged(args);
    }

    protected void NCEOChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.NCEO, this.NCEO, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NCEOChanged(args);
    }

    protected void NCEAChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.NCEA, this.NCEA, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).NCEAChanged(args);
    }

    protected void AccountChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Account, this.Account, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).AccountChanged(args);
    }

    protected void BankChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyBankChangedEventArgs(this.State.Properties.Bank, this.Bank, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).BankChanged(args);
    }

    protected void ExchangeBoxesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).ExchangeBoxesChanged(args);
    }

    protected void CanExchangeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.CanExchange, this.CanExchange, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CanExchangeChanged(args);
    }

    protected void CodeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Code, this.Code, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).CodeChanged(args);
    }

    protected void ResponsibleChangedHandler()
    {
      var args = new global::Sungero.Parties.Shared.CounterpartyResponsibleChangedEventArgs(this.State.Properties.Responsible, this.Responsible, this);
     ((global::Sungero.Parties.CounterpartySharedHandlers)this.SharedHandlers).ResponsibleChanged(args);
    }



    protected virtual global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers CreateExchangeBoxesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers CreateExchangeBoxesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Parties.CounterpartyExchangeBoxesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void ExchangeBoxesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeBoxesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.ExchangeBoxesAdded(args);
      }
    }

    protected virtual void ExchangeBoxesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateExchangeBoxesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.ExchangeBoxesDeleted(args);
      }
    }


    #endregion


    public Counterparty()
    {
    }

  }
}

// ==================================================================
// CounterpartyHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties
{
  public partial class CounterpartyCityPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICity
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public CounterpartyCityPropertyFilteringServerHandler(global::Sungero.Parties.ICounterparty entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyCitySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.ICity
  {

    public virtual global::System.Linq.IQueryable<T> CitySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyCitySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class CounterpartyRegionPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.IRegion
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> RegionFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyRegionPropertyFilteringServerHandler(global::Sungero.Parties.ICounterparty entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyRegionSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Commons.IRegion
  {

    public virtual global::System.Linq.IQueryable<T> RegionSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyRegionSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class CounterpartyBankPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IBank
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> BankFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyBankPropertyFilteringServerHandler(global::Sungero.Parties.ICounterparty entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyBankSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IBank
  {

    public virtual global::System.Linq.IQueryable<T> BankSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyBankSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class CounterpartyResponsiblePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ResponsibleFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyResponsiblePropertyFilteringServerHandler(global::Sungero.Parties.ICounterparty entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyResponsibleSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> ResponsibleSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public CounterpartyResponsibleSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class CounterpartyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Parties.ICounterparty
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Parties.ICounterpartyFilterState Filter { get; private set; }

    private global::Sungero.Parties.ICounterpartyFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public CounterpartyFilteringServerHandler(global::Sungero.Parties.ICounterpartyFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected CounterpartyFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> ResponsibleFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class CounterpartyUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Parties.ICounterparty
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class CounterpartySearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Parties.Server.CounterpartySearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Parties.Server.CounterpartySearchDialogModel)this.Dialog;
       }
     }

     public CounterpartySearchDialogServerHandler(global::Sungero.Parties.Server.CounterpartySearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class CounterpartyServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public CounterpartyServerHandlers(global::Sungero.Parties.ICounterparty entity)
      : base(entity)
    {
    }
  }

  public partial class CounterpartyCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Parties.ICounterparty _source
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Source; }
    }

    private global::Sungero.Parties.ICounterpartyInfo _info
    {
      get { return (global::Sungero.Parties.ICounterpartyInfo)this._Info; }
    }

    public CounterpartyCreatingFromServerHandler(global::Sungero.Parties.ICounterparty source, global::Sungero.Parties.ICounterpartyInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// CounterpartyEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
}

// ==================================================================
// CounterpartyAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CounterpartyAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Parties.ICounterpartyAccessRights
  {
           public bool CanSetExchange(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, recipient);
           }
           public bool CanSetExchange()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanSetExchange()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange);
           }
           public bool CanChangeCard(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, recipient);
           }
           public bool CanChangeCard()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanChangeCard()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard);
           }


    public CounterpartyAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CounterpartyTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Parties.ICounterpartyAccessRights
  {
           public bool CanSetExchange(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, recipient);
           }
           public bool CanSetExchange()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanSetExchange()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.SetExchange);
           }
           public bool CanChangeCard(global::Sungero.CoreEntities.IRecipient recipient)
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, recipient);
           }
           public bool CanChangeCard()
           {
              return this.IsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard, null);
           }
           public global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> GetSubstitutedWhoCanChangeCard()
           {
              return this.GetSubstitutedWhoIsGranted(global::Sungero.Parties.CounterpartyOperations.ChangeCard);
           }


    public CounterpartyTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// CounterpartyRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CounterpartyRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Parties.ICounterpartyRepositoryImplementer<T>
      where T : global::Sungero.Parties.ICounterparty 
    {
       public new global::Sungero.Parties.ICounterpartyAccessRights AccessRights
       {
          get { return (global::Sungero.Parties.ICounterpartyAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Parties.ICounterpartyInfo Info
       {
          get { return (global::Sungero.Parties.ICounterpartyInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Parties.Server.CounterpartyTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CounterpartyPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CounterpartyResponsiblePanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Parties.ICounterparty
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Parties.ICounterpartyFilterState)this.State;
        var handlers = new global::Sungero.Parties.CounterpartyFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ResponsibleFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Parties.ICounterparty>(query);
      }
    }

}

// ==================================================================
// CounterpartyServerFunctions.g.cs
// ==================================================================

namespace Sungero.Parties.Server
{
  public partial class CounterpartyFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Parties.ICounterparty _obj
    {
      get { return (global::Sungero.Parties.ICounterparty)this.Entity; }
    }

    public CounterpartyFunctions(global::Sungero.Parties.ICounterparty entity) : base(entity) { }
  }
}

// ==================================================================
// CounterpartyFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Functions
{
  internal static class Counterparty
  {
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CounterpartyFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Parties.Structures.Counterparty.SendInvitation InvitationBoxes(global::Sungero.Parties.ICounterparty counterparty)
    {
      var functions = (global::Sungero.Parties.Server.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.ServerFunctions;
      return functions.InvitationBoxes();
    }
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CounterpartyFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.Structures.Counterparty.AllowedBoxes> CanSendInvitation(global::Sungero.Parties.ICounterparty counterparty)
    {
      return global::Sungero.Parties.Server.CounterpartyFunctions.CanSendInvitation(counterparty);
    }
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CounterpartyFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetExchangeCounterparty(global::Sungero.Company.IBusinessUnit businessUnit)
    {
      return global::Sungero.Parties.Server.CounterpartyFunctions.GetExchangeCounterparty(businessUnit);
    }
    /// <redirect project="Sungero.Parties.Server" type="Sungero.Parties.Server.CounterpartyFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Parties.ICounterparty GetDistributionListCounterparty()
    {
      return global::Sungero.Parties.Server.CounterpartyFunctions.GetDistributionListCounterparty();
    }

    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String CheckTin(global::System.String tin, global::System.Boolean forCompany)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.CheckTin(tin, forCompany);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String CheckTin(global::Sungero.Parties.ICounterparty counterparty, global::System.String tin)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.CheckTin(tin);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String GetCounterpartyWithSameTinWarning(global::Sungero.Parties.ICounterparty counterparty)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.GetCounterpartyWithSameTinWarning();
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String GetCounterpartyWithSameTinWarning(global::System.String tin, global::System.String trrc, global::System.Nullable<global::System.Int32> companyId)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GetCounterpartyWithSameTinWarning(tin, trrc, companyId);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String GetCounterpartyDuplicatesErrorText(global::Sungero.Parties.ICounterparty counterparty)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.GetCounterpartyDuplicatesErrorText();
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String GenerateCounterpartyDuplicatesErrorText(global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> duplicates, global::System.String trrc)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GenerateCounterpartyDuplicatesErrorText(duplicates, trrc);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDuplicates(global::Sungero.Parties.ICounterparty counterparty, global::System.Boolean excludeClosed)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.GetDuplicates(excludeClosed);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDuplicateCounterparties(global::System.String tin, global::System.String trrc, global::System.String name, global::System.Boolean excludeClosed)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GetDuplicateCounterparties(tin, trrc, name, excludeClosed);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDuplicateCounterpartiesFromList(global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> source, global::System.String tin, global::System.String trrc, global::System.String name, global::System.Boolean excludeClosed)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GetDuplicateCounterpartiesFromList(source, tin, trrc, name, excludeClosed);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.Collections.Generic.List<global::Sungero.Parties.ICounterparty> GetDuplicateCounterparties(global::System.String tin, global::System.String trrc, global::System.String name, global::System.Nullable<global::System.Int32> excludedCounterpartyId, global::System.Boolean excludeClosed)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GetDuplicateCounterparties(tin, trrc, name, excludedCounterpartyId, excludeClosed);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String CheckPsrnLength(global::Sungero.Parties.ICounterparty counterparty, global::System.String psrn)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.CheckPsrnLength(psrn);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String CheckNceoLength(global::Sungero.Parties.ICounterparty counterparty, global::System.String nceo)
    {
      var functions = (global::Sungero.Parties.Shared.CounterpartyFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)counterparty).FunctionsContainer.SharedFunctions;
      return functions.CheckNceoLength(nceo);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String CheckAccountLength(global::System.String account)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.CheckAccountLength(account);
    }
    /// <redirect project="Sungero.Parties.Shared" type="Sungero.Parties.Shared.CounterpartyFunctions" />
    internal static  global::System.String GetTypeDisplayValue(global::Sungero.Domain.Shared.IEntity entity, CommonLibrary.DeclensionCase declension)
    {
      return global::Sungero.Parties.Shared.CounterpartyFunctions.GetTypeDisplayValue(entity, declension);
    }

  }
}

// ==================================================================
// CounterpartyServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CounterpartyServerPublicFunctions : global::Sungero.Parties.Server.ICounterpartyServerPublicFunctions
  {
  }
}

// ==================================================================
// CounterpartyQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Queries
{
  public class Counterparty
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Parties.Server.Counterparty.CounterpartyQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
