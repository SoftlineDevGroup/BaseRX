
// ==================================================================
// Company.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyFilter<T> :
      global::Sungero.Parties.Server.CompanyBaseFilter<T>
      where T : class, global::Sungero.Parties.ICompany
    {
      private global::Sungero.Parties.ICompanyFilterState filter
      {
        get
        {
          return (Sungero.Parties.ICompanyFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public CompanyFilter(global::Sungero.Parties.ICompanyFilterState filter)
      : base(filter)
      {
      }

      protected CompanyFilter()
      {
      }
    }
      public class CompanyUiFilter<T> :
        global::Sungero.Parties.Server.CompanyBaseUiFilter<T>
        where T : class, global::Sungero.Parties.ICompany
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class CompanySearchDialogModel : global::Sungero.Parties.Server.CompanyBaseSearchDialogModel
        {
                  public override global::System.String TIN { get; protected set; }
                  public override global::System.Boolean? CanExchange { get; protected set; }
                  public override global::System.String Note { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String TRRC { get; protected set; }
                  public override global::System.String Phones { get; protected set; }
                  public override global::System.String Email { get; protected set; }
                  public override global::System.String Homepage { get; protected set; }
                  public override global::System.String PSRN { get; protected set; }
                  public override global::System.String NCEO { get; protected set; }
                  public override global::System.String NCEA { get; protected set; }
                  public override global::System.String Account { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Responsible { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.IBank> Bank { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Commons.ICity> City { get; protected set; }




                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new CompanyExchangeBoxesModel ExchangeBoxes { get { return (CompanyExchangeBoxesModel)base.ExchangeBoxes; } protected set { base.ExchangeBoxes = value; } }

        }

      public class CompanyExchangeBoxesModel : global::Sungero.Parties.Server.CompanyBaseExchangeBoxesModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }





  [global::Sungero.Domain.Filter(typeof(global::Sungero.Parties.Server.CompanyFilter<global::Sungero.Parties.ICompany>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Parties.Server.CompanyUiFilter<global::Sungero.Parties.ICompany>))]

  public class Company :
    global::Sungero.Parties.Server.CompanyBase, global::Sungero.Parties.ICompany
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("593e143c-616c-4d95-9457-fd916c4aa7f8");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Parties.Server.Company.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Parties.ICompany, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Parties.ICompanyState State
    {
      get { return (global::Sungero.Parties.ICompanyState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Parties.Shared.CompanyState(this);
    }

    public new virtual global::Sungero.Parties.ICompanyInfo Info
    {
      get { return (global::Sungero.Parties.ICompanyInfo)base.Info; }
    }

    public new virtual global::Sungero.Parties.ICompanyAccessRights AccessRights
    {
      get { return (global::Sungero.Parties.ICompanyAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Parties.Server.CompanyAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Parties.Server.CompanyFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Parties.Shared.CompanyFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Parties.CompanyServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Parties.CompanySharedHandlers(this);
    }









    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Parties.ICounterpartyExchangeBoxes> CreateExchangeBoxesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Parties.ICompanyExchangeBoxes>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Parties.CompanyCreatingFromServerHandler((global::Sungero.Parties.ICompany)entitySource, this.Info);
    }

    #region Framework events




    #endregion


    public Company()
    {
    }

  }
}

// ==================================================================
// CompanyHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties
{

  public partial class CompanyFilteringServerHandler<T>
    : global::Sungero.Parties.CompanyBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Parties.ICompany
  {
    private global::Sungero.Parties.ICompanyFilterState _filter
    {
      get
      {
        return (Sungero.Parties.ICompanyFilterState)this.Filter;
      }
    }

    public CompanyFilteringServerHandler(global::Sungero.Parties.ICompanyFilterState filter)
    : base(filter)
    {
    }

    protected CompanyFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Company.IEmployee> ResponsibleFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.ResponsibleFiltering(query, e);
              return query;
      }


  }

  public partial class CompanyUiFilteringServerHandler<T>
    : global::Sungero.Parties.CompanyBaseUiFilteringServerHandler<T>
    where T : class, global::Sungero.Parties.ICompany
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class CompanySearchDialogServerHandler : global::Sungero.Parties.CompanyBaseSearchDialogServerHandler
   {
     private global::Sungero.Parties.Server.CompanySearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Parties.Server.CompanySearchDialogModel)this.Dialog;
       }
     }

     public CompanySearchDialogServerHandler(global::Sungero.Parties.Server.CompanySearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class CompanyServerHandlers : global::Sungero.Parties.CompanyBaseServerHandlers
  {
    private global::Sungero.Parties.ICompany _obj
    {
      get { return (global::Sungero.Parties.ICompany)this.Entity; }
    }

    public CompanyServerHandlers(global::Sungero.Parties.ICompany entity)
      : base(entity)
    {
    }
  }

  public partial class CompanyCreatingFromServerHandler : global::Sungero.Parties.CompanyBaseCreatingFromServerHandler
  {
    private global::Sungero.Parties.ICompany _source
    {
      get { return (global::Sungero.Parties.ICompany)this.Source; }
    }

    private global::Sungero.Parties.ICompanyInfo _info
    {
      get { return (global::Sungero.Parties.ICompanyInfo)this._Info; }
    }

    public CompanyCreatingFromServerHandler(global::Sungero.Parties.ICompany source, global::Sungero.Parties.ICompanyInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// CompanyEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
}

// ==================================================================
// CompanyAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CompanyAccessRights : 
    Sungero.Parties.Server.CompanyBaseAccessRights, Sungero.Parties.ICompanyAccessRights
  {

    public CompanyAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class CompanyTypeAccessRights : 
    Sungero.Parties.Server.CompanyBaseTypeAccessRights, Sungero.Parties.ICompanyAccessRights
  {

    public CompanyTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// CompanyRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyRepositoryImplementer<T> : 
      global::Sungero.Parties.Server.CompanyBaseRepositoryImplementer<T>,
      global::Sungero.Parties.ICompanyRepositoryImplementer<T>
      where T : global::Sungero.Parties.ICompany 
    {
       public new global::Sungero.Parties.ICompanyAccessRights AccessRights
       {
          get { return (global::Sungero.Parties.ICompanyAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Parties.ICompanyInfo Info
       {
          get { return (global::Sungero.Parties.ICompanyInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Parties.Server.CompanyTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// CompanyPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
    public class CompanyResponsiblePanelNavigationFilter : global::Sungero.Parties.Server.CompanyBaseResponsiblePanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Parties.ICompany
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Parties.ICompanyFilterState)this.State;
        var handlers = new global::Sungero.Parties.CompanyFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.ResponsibleFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Parties.ICompany>(query);
      }
    }

}

// ==================================================================
// CompanyServerFunctions.g.cs
// ==================================================================

namespace Sungero.Parties.Server
{
  public partial class CompanyFunctions : global::Sungero.Parties.Server.CompanyBaseFunctions
  {
    private global::Sungero.Parties.ICompany _obj
    {
      get { return (global::Sungero.Parties.ICompany)this.Entity; }
    }

    public CompanyFunctions(global::Sungero.Parties.ICompany entity) : base(entity) { }
  }
}

// ==================================================================
// CompanyFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Functions
{
  internal static class Company
  {
  }
}

// ==================================================================
// CompanyServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Server
{
  public class CompanyServerPublicFunctions : global::Sungero.Parties.Server.ICompanyServerPublicFunctions
  {
  }
}

// ==================================================================
// CompanyQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Parties.Queries
{
  public class Company
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Parties.Server.Company.CompanyQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
