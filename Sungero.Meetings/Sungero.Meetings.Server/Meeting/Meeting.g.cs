
// ==================================================================
// Meeting.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class MeetingFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Sungero.Meetings.IMeeting
    {
      protected new global::Sungero.Meetings.IMeetingFilterState Filter { get; private set; }

      private global::Sungero.Meetings.IMeetingFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = new global::Sungero.Meetings.MeetingFilteringServerHandler<T>(this.filter).Filtering(query, args);
        if (args.DisableCheckRights)
    	  global::Sungero.Domain.Security.FilteringAccessRightsOptions.DisableCheckRights<T>();
        return result;
      }

      public MeetingFilter(global::Sungero.Meetings.IMeetingFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected MeetingFilter()
      {
      }
    }
      public class MeetingUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Sungero.Meetings.IMeeting
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class MeetingSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }
                  public virtual global::System.String Location { get; protected set; }
                  public virtual global::System.String Note { get; protected set; }
                  public virtual global::System.Double? Duration { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> Status { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> DateTime { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Secretary { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> President { get; protected set; }


                   public MeetingMembersModel Members { get; protected set; }

        }


      public class MeetingMembersModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


                      public virtual global::System.Collections.Generic.IEnumerable<global::Sungero.CoreEntities.IRecipient> Member { get; protected set; }

         }



  public class MeetingFilterForSecretary<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Meetings.IMeeting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Meetings.MeetingSecretaryPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).SecretaryFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public MeetingFilterForSecretary(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class MeetingSearchFilterForSecretary<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Meetings.MeetingSecretarySearchPropertyFilteringServerHandler<TQueryEntity>().SecretarySearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public MeetingSearchFilterForSecretary(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class MeetingFilterForPresident<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Meetings.IMeeting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Meetings.MeetingPresidentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).PresidentFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public MeetingFilterForPresident(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class MeetingSearchFilterForPresident<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Meetings.MeetingPresidentSearchPropertyFilteringServerHandler<TQueryEntity>().PresidentSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public MeetingSearchFilterForPresident(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Meetings.Server.MeetingFilter<global::Sungero.Meetings.IMeeting>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Sungero.Meetings.Server.MeetingUiFilter<global::Sungero.Meetings.IMeeting>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Meetings.Server.MeetingFilterForSecretary<global::Sungero.Company.IEmployee, global::Sungero.Meetings.IMeeting>), "Secretary")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Meetings.Server.MeetingSearchFilterForSecretary<global::Sungero.CoreEntities.IRecipient>), "Secretary")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Meetings.Server.MeetingFilterForPresident<global::Sungero.Company.IEmployee, global::Sungero.Meetings.IMeeting>), "President")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Meetings.Server.MeetingSearchFilterForPresident<global::Sungero.CoreEntities.IRecipient>), "President")]


  public class Meeting :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Sungero.Meetings.IMeeting, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("dbc0dd63-4d23-4f41-92ae-cab59bb70c8c");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Meetings.Server.Meeting.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Meetings.IMeeting, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.DisplayName; }
      set { this.DisplayName = value; }
    }

    public new virtual global::Sungero.Meetings.IMeetingState State
    {
      get { return (global::Sungero.Meetings.IMeetingState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Meetings.Shared.MeetingState(this);
    }

    public new virtual global::Sungero.Meetings.IMeetingInfo Info
    {
      get { return (global::Sungero.Meetings.IMeetingInfo)base.Info; }
    }

    public new virtual global::Sungero.Meetings.IMeetingAccessRights AccessRights
    {
      get { return (global::Sungero.Meetings.IMeetingAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Meetings.Server.MeetingAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Meetings.Server.MeetingFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Meetings.Shared.MeetingFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Meetings.MeetingServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Meetings.MeetingSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.DateTime? _DateTime;
    public virtual global::System.DateTime? DateTime
    {
      get
      {
        return this._DateTime;
      }

      set
      {
        this.SetPropertyValue("DateTime", this._DateTime, value, (propertyValue) => { this._DateTime = propertyValue; }, this.DateTimeChangedHandler);
      }
    }
    private global::System.String _Location;
    public virtual global::System.String Location
    {
      get
      {
        return this._Location;
      }

      set
      {
        this.SetPropertyValue("Location", this._Location, value, (propertyValue) => { this._Location = propertyValue; }, this.LocationChangedHandler);
      }
    }
    private global::System.String _Note;
    public virtual global::System.String Note
    {
      get
      {
        return this._Note;
      }

      set
      {
        this.SetPropertyValue("Note", this._Note, value, (propertyValue) => { this._Note = propertyValue; }, this.NoteChangedHandler);
      }
    }
    private global::System.String _DisplayName;
    public virtual global::System.String DisplayName
    {
      get
      {
        return this._DisplayName;
      }

      set
      {
        this.SetPropertyValue("DisplayName", this._DisplayName, value, (propertyValue) => { this._DisplayName = propertyValue; }, this.DisplayNameChangedHandler);
      }
    }
    private global::System.Double? _Duration;
    public virtual global::System.Double? Duration
    {
      get
      {
        return this._Duration;
      }

      set
      {
        this.SetPropertyValue("Duration", this._Duration, value, (propertyValue) => { this._Duration = propertyValue; }, this.DurationChangedHandler);
      }
    }







    private global::Sungero.Company.IEmployee _Secretary;
    public virtual global::Sungero.Company.IEmployee Secretary
    {
      get
      {
        return this._Secretary;
      }

      set
      {
        this.SetPropertyValue("Secretary", this._Secretary, value, (propertyValue) => { this._Secretary = propertyValue; }, this.SecretaryChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _President;
    public virtual global::Sungero.Company.IEmployee President
    {
      get
      {
        return this._President;
      }

      set
      {
        this.SetPropertyValue("President", this._President, value, (propertyValue) => { this._President = propertyValue; }, this.PresidentChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Meetings.IMeetingMembers> _Members;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Meetings.IMeetingMembers> Members
    {
      get
      {
        if (this._Members == null)
        {
          this._Members = this.CreateMembersCollection();
          this.SetMembersEventHandlers();
        }
        return this._Members;
      }

      set
      {
        if (this._Members != null)
          this.UnsetChildCollectionEventHandlers(this._Members);

        this._Members = value;
        this.SetMembersEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Meetings.IMeetingMembers> CreateMembersCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Meetings.IMeetingMembers>() { RootEntity = this };
    }

    private void SetMembersEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Members, "Members");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Members;
      changeNotifier.Added += this.MembersAddedHandler;
      changeNotifier.Deleted += this.MembersDeletedHandler;
      changeNotifier.Added += this.MembersCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.MembersCollectionUpdateEventHandler;
      changeNotifier.Updated += this.MembersCollectionUpdateEventHandler;
    }

    private void MembersCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.MembersChangedHandler();
    }



    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Meetings.MeetingCreatingFromServerHandler((global::Sungero.Meetings.IMeeting)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DateTimeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.DateTime, this.DateTime, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DateTimeChanged(args);
    }

    protected void LocationChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Location, this.Location, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).LocationChanged(args);
    }

    protected void SecretaryChangedHandler()
    {
      var args = new global::Sungero.Meetings.Shared.MeetingSecretaryChangedEventArgs(this.State.Properties.Secretary, this.Secretary, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).SecretaryChanged(args);
    }

    protected void PresidentChangedHandler()
    {
      var args = new global::Sungero.Meetings.Shared.MeetingPresidentChangedEventArgs(this.State.Properties.President, this.President, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).PresidentChanged(args);
    }

    protected void MembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).MembersChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void DisplayNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.DisplayName, this.DisplayName, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DisplayNameChanged(args);
    }

    protected void DurationChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.Duration, this.Duration, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DurationChanged(args);
    }



    protected virtual global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers CreateMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers CreateMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void MembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.MembersAdded(args);
      }
    }

    protected virtual void MembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.MembersDeleted(args);
      }
    }


    #endregion


    public Meeting()
    {
    }

  }
}

// ==================================================================
// MeetingHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings
{
  public partial class MeetingSecretaryPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Meetings.IMeeting _obj
    {
      get { return (global::Sungero.Meetings.IMeeting)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> SecretaryFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public MeetingSecretaryPropertyFilteringServerHandler(global::Sungero.Meetings.IMeeting entity)
      : base(entity)
    {
    }
  }

  public partial class MeetingSecretarySearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> SecretarySearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public MeetingSecretarySearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class MeetingPresidentPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Meetings.IMeeting _obj
    {
      get { return (global::Sungero.Meetings.IMeeting)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> PresidentFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public MeetingPresidentPropertyFilteringServerHandler(global::Sungero.Meetings.IMeeting entity)
      : base(entity)
    {
    }
  }

  public partial class MeetingPresidentSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> PresidentSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public MeetingPresidentSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class MeetingFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Sungero.Meetings.IMeeting
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Sungero.Meetings.IMeetingFilterState Filter { get; private set; }

    private global::Sungero.Meetings.IMeetingFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public MeetingFilteringServerHandler(global::Sungero.Meetings.IMeetingFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected MeetingFilteringServerHandler()
    {
    }

      public virtual global::System.Linq.IQueryable<Sungero.Company.IEmployee> EmployeeFiltering(global::System.Linq.IQueryable<Sungero.Company.IEmployee> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        return query;
      }


  }

  public partial class MeetingUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Sungero.Meetings.IMeeting
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class MeetingSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Sungero.Meetings.Server.MeetingSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Meetings.Server.MeetingSearchDialogModel)this.Dialog;
       }
     }

     public MeetingSearchDialogServerHandler(global::Sungero.Meetings.Server.MeetingSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class MeetingServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Sungero.Meetings.IMeeting _obj
    {
      get { return (global::Sungero.Meetings.IMeeting)this.Entity; }
    }

    public MeetingServerHandlers(global::Sungero.Meetings.IMeeting entity)
      : base(entity)
    {
    }
  }

  public partial class MeetingCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Sungero.Meetings.IMeeting _source
    {
      get { return (global::Sungero.Meetings.IMeeting)this.Source; }
    }

    private global::Sungero.Meetings.IMeetingInfo _info
    {
      get { return (global::Sungero.Meetings.IMeetingInfo)this._Info; }
    }

    public MeetingCreatingFromServerHandler(global::Sungero.Meetings.IMeeting source, global::Sungero.Meetings.IMeetingInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// MeetingEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
}

// ==================================================================
// MeetingAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
  public class MeetingAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Sungero.Meetings.IMeetingAccessRights
  {

    public MeetingAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class MeetingTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Sungero.Meetings.IMeetingAccessRights
  {

    public MeetingTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// MeetingRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class MeetingRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Sungero.Meetings.IMeetingRepositoryImplementer<T>
      where T : global::Sungero.Meetings.IMeeting 
    {
       public new global::Sungero.Meetings.IMeetingAccessRights AccessRights
       {
          get { return (global::Sungero.Meetings.IMeetingAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Meetings.IMeetingInfo Info
       {
          get { return (global::Sungero.Meetings.IMeetingInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Meetings.Server.MeetingTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// MeetingPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class MeetingEmployeePanelNavigationFilter : global::Sungero.Domain.PanelNavigationFilterBase
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Meetings.IMeeting
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IEmployee>)query;
        var typedState = (global::Sungero.Meetings.IMeetingFilterState)this.State;
        var handlers = new global::Sungero.Meetings.MeetingFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.EmployeeFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IEmployee>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Meetings.IMeeting>(query);
      }
    }

}

// ==================================================================
// MeetingServerFunctions.g.cs
// ==================================================================

namespace Sungero.Meetings.Server
{
  public partial class MeetingFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Sungero.Meetings.IMeeting _obj
    {
      get { return (global::Sungero.Meetings.IMeeting)this.Entity; }
    }

    public MeetingFunctions(global::Sungero.Meetings.IMeeting entity) : base(entity) { }
  }
}

// ==================================================================
// MeetingFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Functions
{
  internal static class Meeting
  {
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Meetings.IMeeting CreateMeeting()
    {
      return global::Sungero.Meetings.Server.MeetingFunctions.CreateMeeting();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    internal static  global::Sungero.Meetings.IMeeting GetContextMeeting()
    {
      return global::Sungero.Meetings.Server.MeetingFunctions.GetContextMeeting();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Meetings.IAgenda> GetOrCreateAgenda(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetOrCreateAgenda();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Meetings.IMinutes> GetOrCreateMinutes(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetOrCreateMinutes();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Content.IElectronicDocument> GetMeetingDocuments(global::Sungero.Meetings.IMeeting meeting, global::System.String relationName)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetMeetingDocuments(relationName);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    internal static  void SetRightsOnDocument(global::Sungero.Meetings.IMeeting meeting, global::Sungero.Content.IElectronicDocument document)
    {
    global::Sungero.Meetings.Server.MeetingFunctions.SetRightsOnDocument(meeting, document);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::Sungero.Core.StateView GetStateView(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetStateView();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String GetMeetingMembersString(global::Sungero.Meetings.IMeeting meeting, global::System.Boolean onlyMembers, global::System.Boolean withJobTitle)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetMeetingMembersString(onlyMembers, withJobTitle);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String GetMeetingNameWithDateIgnoreAccessRights(global::System.Int32 id)
    {
      return global::Sungero.Meetings.Server.MeetingFunctions.GetMeetingNameWithDateIgnoreAccessRights(id);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.String GetMeetingNameIgnoreAccessRights(global::System.Int32 id)
    {
      return global::Sungero.Meetings.Server.MeetingFunctions.GetMeetingNameIgnoreAccessRights(id);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.RecordManagement.IActionItemExecutionTask> GetActionItemsByMeeting(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
      return functions.GetActionItemsByMeeting();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.MeetingFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  void SetRecipientToMembers(global::Sungero.Meetings.IMeeting meeting, global::Sungero.CoreEntities.IRecipient recipient)
    {
      var functions = (global::Sungero.Meetings.Server.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.ServerFunctions;
    functions.SetRecipientToMembers(recipient);
    }

    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.MeetingFunctions" />
    internal static  global::System.String GetMeetingNameWithDate(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Shared.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.SharedFunctions;
      return functions.GetMeetingNameWithDate();
    }
    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.MeetingFunctions" />
    internal static  global::System.String GetMeetingName(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Shared.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.SharedFunctions;
      return functions.GetMeetingName();
    }
    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.MeetingFunctions" />
    internal static  global::System.String GetMeetingTimeAsString(global::Sungero.Meetings.IMeeting meeting)
    {
      var functions = (global::Sungero.Meetings.Shared.MeetingFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)meeting).FunctionsContainer.SharedFunctions;
      return functions.GetMeetingTimeAsString();
    }

  }
}

// ==================================================================
// MeetingServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
  public class MeetingServerPublicFunctions : global::Sungero.Meetings.Server.IMeetingServerPublicFunctions
  {
    public global::Sungero.Meetings.IMeeting GetContextMeeting()
    {
      return global::Sungero.Meetings.Functions.Meeting.GetContextMeeting();
    }
    public void SetRightsOnDocument(global::Sungero.Meetings.IMeeting meeting, global::Sungero.Content.IElectronicDocument document)
    {
global::Sungero.Meetings.Functions.Meeting.SetRightsOnDocument(meeting, document);
    }
  }
}

// ==================================================================
// MeetingQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Queries
{
  public class Meeting
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Meetings.Server.Meeting.MeetingQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
