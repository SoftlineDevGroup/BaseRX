
// ==================================================================
// Agenda.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class AgendaFilter<T> :
      global::Sungero.Docflow.Server.InternalDocumentBaseFilter<T>
      where T : class, global::Sungero.Meetings.IAgenda
    {
      private global::Sungero.Meetings.IAgendaFilterState filter
      {
        get
        {
          return (Sungero.Meetings.IAgendaFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public AgendaFilter(global::Sungero.Meetings.IAgendaFilterState filter)
      : base(filter)
      {
      }

      protected AgendaFilter()
      {
      }
    }
    public class AgendaSearchDialogModel : global::Sungero.Docflow.Server.InternalDocumentBaseSearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> PreparedBy { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Meetings.IMeeting> Meeting { get; protected set; }


                   public new AgendaVersionsModel Versions { get { return (AgendaVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new AgendaTrackingModel Tracking { get { return (AgendaTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }

        }

      public class AgendaVersionsModel : global::Sungero.Docflow.Server.InternalDocumentBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class AgendaTrackingModel : global::Sungero.Docflow.Server.InternalDocumentBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class AgendaFilterForMeeting<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Meetings.IMeeting
    where TSourceEntity : class, global::Sungero.Meetings.IAgenda
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Meetings.AgendaMeetingPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).MeetingFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AgendaFilterForMeeting(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class AgendaSearchFilterForMeeting<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Meetings.IMeeting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Meetings.AgendaMeetingSearchPropertyFilteringServerHandler<TQueryEntity>().MeetingSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public AgendaSearchFilterForMeeting(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Meetings.Server.AgendaFilter<global::Sungero.Meetings.IAgenda>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Meetings.Server.AgendaFilterForMeeting<global::Sungero.Meetings.IMeeting, global::Sungero.Meetings.IAgenda>), "Meeting")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Meetings.Server.AgendaSearchFilterForMeeting<global::Sungero.Meetings.IMeeting>), "Meeting")]


  public class Agenda :
    global::Sungero.Docflow.Server.InternalDocumentBase, global::Sungero.Meetings.IAgenda, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("5261da93-7879-4210-b3db-c92fa894ab4d");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Meetings.Server.Agenda.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Meetings.IAgenda, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Meetings.IAgendaState State
    {
      get { return (global::Sungero.Meetings.IAgendaState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Meetings.Shared.AgendaState(this);
    }

    public new virtual global::Sungero.Meetings.IAgendaInfo Info
    {
      get { return (global::Sungero.Meetings.IAgendaInfo)base.Info; }
    }

    public new virtual global::Sungero.Meetings.IAgendaAccessRights AccessRights
    {
      get { return (global::Sungero.Meetings.IAgendaAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Meetings.Server.AgendaAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Meetings.Server.AgendaFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Meetings.Shared.AgendaFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Meetings.AgendaServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Meetings.AgendaSharedHandlers(this);
    }







    private global::Sungero.Meetings.IMeeting _Meeting;
    public virtual global::Sungero.Meetings.IMeeting Meeting
    {
      get
      {
        return this._Meeting;
      }

      set
      {
        this.SetPropertyValue("Meeting", this._Meeting, value, (propertyValue) => { this._Meeting = propertyValue; }, this.MeetingChangedHandler);
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Meetings.IAgendaVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Meetings.IAgendaTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Meetings.AgendaCreatingFromServerHandler((global::Sungero.Meetings.IAgenda)entitySource, this.Info);
    }

    #region Framework events

    protected void MeetingChangedHandler()
    {
      var args = new global::Sungero.Meetings.Shared.AgendaMeetingChangedEventArgs(this.State.Properties.Meeting, this.Meeting, this);
     ((global::Sungero.Meetings.AgendaSharedHandlers)this.SharedHandlers).MeetingChanged(args);
    }





    #endregion


    public Agenda()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Meetings.AgendaConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// AgendaHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings
{
  public partial class AgendaMeetingPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Meetings.IMeeting
  {
    private global::Sungero.Meetings.IAgenda _obj
    {
      get { return (global::Sungero.Meetings.IAgenda)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> MeetingFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public AgendaMeetingPropertyFilteringServerHandler(global::Sungero.Meetings.IAgenda entity)
      : base(entity)
    {
    }
  }

  public partial class AgendaMeetingSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Meetings.IMeeting
  {

    public virtual global::System.Linq.IQueryable<T> MeetingSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public AgendaMeetingSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class AgendaFilteringServerHandler<T>
    : global::Sungero.Docflow.InternalDocumentBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Meetings.IAgenda
  {
    private global::Sungero.Meetings.IAgendaFilterState _filter
    {
      get
      {
        return (Sungero.Meetings.IAgendaFilterState)this.Filter;
      }
    }

    public AgendaFilteringServerHandler(global::Sungero.Meetings.IAgendaFilterState filter)
    : base(filter)
    {
    }

    protected AgendaFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> DocumentRegisterFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentRegister> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentRegisterFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> DocumentKindFiltering(global::System.Linq.IQueryable<Sungero.Docflow.IDocumentKind> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DocumentKindFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> BusinessUnitFiltering(global::System.Linq.IQueryable<Sungero.Company.IBusinessUnit> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.BusinessUnitFiltering(query, e);
              return query;
      }

      public override global::System.Linq.IQueryable<Sungero.Company.IDepartment> DepartmentFiltering(global::System.Linq.IQueryable<Sungero.Company.IDepartment> query, global::Sungero.Domain.FilteringEventArgs e)
      {
        query = base.DepartmentFiltering(query, e);
              return query;
      }


  }

  public partial class AgendaSearchDialogServerHandler : global::Sungero.Docflow.InternalDocumentBaseSearchDialogServerHandler
   {
     private global::Sungero.Meetings.Server.AgendaSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Meetings.Server.AgendaSearchDialogModel)this.Dialog;
       }
     }

     public AgendaSearchDialogServerHandler(global::Sungero.Meetings.Server.AgendaSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class AgendaServerHandlers : global::Sungero.Docflow.InternalDocumentBaseServerHandlers
  {
    private global::Sungero.Meetings.IAgenda _obj
    {
      get { return (global::Sungero.Meetings.IAgenda)this.Entity; }
    }

    public AgendaServerHandlers(global::Sungero.Meetings.IAgenda entity)
      : base(entity)
    {
    }
  }

  public partial class AgendaCreatingFromServerHandler : global::Sungero.Docflow.InternalDocumentBaseCreatingFromServerHandler
  {
    private global::Sungero.Meetings.IAgenda _source
    {
      get { return (global::Sungero.Meetings.IAgenda)this.Source; }
    }

    private global::Sungero.Meetings.IAgendaInfo _info
    {
      get { return (global::Sungero.Meetings.IAgendaInfo)this._Info; }
    }

    public AgendaCreatingFromServerHandler(global::Sungero.Meetings.IAgenda source, global::Sungero.Meetings.IAgendaInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// AgendaEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
}

// ==================================================================
// AgendaAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
  public class AgendaAccessRights : 
    Sungero.Docflow.Server.InternalDocumentBaseAccessRights, Sungero.Meetings.IAgendaAccessRights
  {

    public AgendaAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class AgendaTypeAccessRights : 
    Sungero.Docflow.Server.InternalDocumentBaseTypeAccessRights, Sungero.Meetings.IAgendaAccessRights
  {

    public AgendaTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// AgendaRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class AgendaRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.InternalDocumentBaseRepositoryImplementer<T>,
      global::Sungero.Meetings.IAgendaRepositoryImplementer<T>
      where T : global::Sungero.Meetings.IAgenda 
    {
       public new global::Sungero.Meetings.IAgendaAccessRights AccessRights
       {
          get { return (global::Sungero.Meetings.IAgendaAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Meetings.IAgendaInfo Info
       {
          get { return (global::Sungero.Meetings.IAgendaInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Meetings.Server.AgendaTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// AgendaPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
    public class AgendaDocumentRegisterPanelNavigationFilter : global::Sungero.Docflow.Server.InternalDocumentBaseDocumentRegisterPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Meetings.IAgenda
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentRegister>)query;
        var typedState = (global::Sungero.Meetings.IAgendaFilterState)this.State;
        var handlers = new global::Sungero.Meetings.AgendaFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentRegisterFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentRegister>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Meetings.IAgenda>(query);
      }
    }

    public class AgendaDocumentKindPanelNavigationFilter : global::Sungero.Docflow.Server.InternalDocumentBaseDocumentKindPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Meetings.IAgenda
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Docflow.IDocumentKind>)query;
        var typedState = (global::Sungero.Meetings.IAgendaFilterState)this.State;
        var handlers = new global::Sungero.Meetings.AgendaFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DocumentKindFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Docflow.IDocumentKind>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Meetings.IAgenda>(query);
      }
    }

    public class AgendaBusinessUnitPanelNavigationFilter : global::Sungero.Docflow.Server.InternalDocumentBaseBusinessUnitPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Meetings.IAgenda
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IBusinessUnit>)query;
        var typedState = (global::Sungero.Meetings.IAgendaFilterState)this.State;
        var handlers = new global::Sungero.Meetings.AgendaFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.BusinessUnitFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IBusinessUnit>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Meetings.IAgenda>(query);
      }
    }

    public class AgendaDepartmentPanelNavigationFilter : global::Sungero.Docflow.Server.InternalDocumentBaseDepartmentPanelNavigationFilter
    {
      private global::System.Linq.IQueryable Apply<T>(global::System.Linq.IQueryable query) where T: class, global::Sungero.Meetings.IAgenda
      {
        var typedQuery = (global::System.Linq.IQueryable<global::Sungero.Company.IDepartment>)query;
        var typedState = (global::Sungero.Meetings.IAgendaFilterState)this.State;
        var handlers = new global::Sungero.Meetings.AgendaFilteringServerHandler<T>(typedState);
        var args = new global::Sungero.Domain.FilteringEventArgs();
        var result = handlers.DepartmentFiltering(typedQuery, args);
        if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<global::Sungero.Company.IDepartment>();
        return result;
      }

      public override global::System.Linq.IQueryable Apply(global::System.Linq.IQueryable query)
      {
        return this.Apply<global::Sungero.Meetings.IAgenda>(query);
      }
    }

}

// ==================================================================
// AgendaServerFunctions.g.cs
// ==================================================================

namespace Sungero.Meetings.Server
{
  public partial class AgendaFunctions : global::Sungero.Docflow.Server.InternalDocumentBaseFunctions
  {
    private global::Sungero.Meetings.IAgenda _obj
    {
      get { return (global::Sungero.Meetings.IAgenda)this.Entity; }
    }

    public AgendaFunctions(global::Sungero.Meetings.IAgenda entity) : base(entity) { }
  }
}

// ==================================================================
// AgendaFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Functions
{
  internal static class Agenda
  {
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::Sungero.Meetings.IAgenda CreateAgenda()
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.CreateAgenda();
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::Sungero.Company.IEmployee GetMeetingPresident(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingPresident(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::Sungero.Company.IEmployee GetMeetingSecretary(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingSecretary(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.String GetMeetingName(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingName(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.String GetMeetingMembers(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingMembers(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.String GetMeetingMembersWithJobTitle(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingMembersWithJobTitle(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.Nullable<global::System.DateTime> GetMeetingDate(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingDate(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.String GetMeetingTime(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingTime(agenda);
    }
    /// <redirect project="Sungero.Meetings.Server" type="Sungero.Meetings.Server.AgendaFunctions" />
    internal static  global::System.String GetMeetingLocation(global::Sungero.Meetings.IAgenda agenda)
    {
      return global::Sungero.Meetings.Server.AgendaFunctions.GetMeetingLocation(agenda);
    }

    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.AgendaFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.Meetings.IAgenda agenda)
    {
      var functions = (global::Sungero.Meetings.Shared.AgendaFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)agenda).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }
    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.AgendaFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.Meetings.IAgenda agenda, global::System.Boolean isEnabled, global::System.Boolean repeatRegister)
    {
      var functions = (global::Sungero.Meetings.Shared.AgendaFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)agenda).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, repeatRegister);
    }
    /// <redirect project="Sungero.Meetings.Shared" type="Sungero.Meetings.Shared.AgendaFunctions" />
    internal static  void FillName(global::Sungero.Meetings.IAgenda agenda)
    {
      var functions = (global::Sungero.Meetings.Shared.AgendaFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)agenda).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }

  }
}

// ==================================================================
// AgendaServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Server
{
  public class AgendaServerPublicFunctions : global::Sungero.Meetings.Server.IAgendaServerPublicFunctions
  {
  }
}

// ==================================================================
// AgendaQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Queries
{
  public class Agenda
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Meetings.Server.Agenda.AgendaQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// AgendaServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings
{
  public partial class AgendaConvertingFromServerHandler : global::Sungero.Docflow.InternalDocumentBaseConvertingFromServerHandler
  { 
    private global::Sungero.Meetings.IAgendaInfo _info
    {
      get { return (global::Sungero.Meetings.IAgendaInfo)this._Info; }
    }

    public AgendaConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Meetings.IAgendaInfo info)
      : base(source, info)
    {
    }
  }
}
