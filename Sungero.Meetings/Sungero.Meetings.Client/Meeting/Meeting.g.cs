
// ==================================================================
// Meeting.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Client
{
  public class Meeting :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Sungero.Meetings.IMeeting
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("dbc0dd63-4d23-4f41-92ae-cab59bb70c8c");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Meetings.Client.Meeting.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Meetings.IMeeting, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.DisplayName; }
        set { this.DisplayName = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "DisplayName"; }
      }


    public new global::Sungero.Meetings.IMeetingState State
    {
      get
      {
        return (global::Sungero.Meetings.IMeetingState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Meetings.Shared.MeetingState(this);
    }

    public new global::Sungero.Meetings.IMeetingInfo Info
    {
      get
      {
        return (global::Sungero.Meetings.IMeetingInfo)base.Info;
      }
    }

    public new global::Sungero.Meetings.IMeetingAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Meetings.IMeetingAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Meetings.Client.MeetingAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _DateTime;

        public virtual global::System.DateTime? DateTime
        {
          get { return this._DateTime.Value; }
          set { this._DateTime.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Location;

        public virtual global::System.String Location
        {
          get { return this._Location.Value; }
          set { this._Location.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Note;

        public virtual global::System.String Note
        {
          get { return this._Note.Value; }
          set { this._Note.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _DisplayName;

        public virtual global::System.String DisplayName
        {
          get { return this._DisplayName.Value; }
          set { this._DisplayName.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Double?> _Duration;

        public virtual global::System.Double? Duration
        {
          get { return this._Duration.Value; }
          set { this._Duration.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _Secretary;

              public virtual global::Sungero.Company.IEmployee Secretary
              {
              get
              {
                return this._Secretary.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._Secretary as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _President;

              public virtual global::Sungero.Company.IEmployee President
              {
              get
              {
                return this._President.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._President as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.Meetings.IMeetingMembers> _Members;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Meetings.IMeetingMembers> Members
          {
            get { return this._Members.Value; }
          }






    private object _MembersActionsHandlers;

    public object MembersActionsHandlers
    {
      get
      {
        if (this._MembersActionsHandlers == null)
          this._MembersActionsHandlers = this.CreateMembersActionsHandlers();
        return this._MembersActionsHandlers;
      }
    }

    private object _MembersCollectionActionsHandlers;

    public object MembersCollectionActionsHandlers
    {
      get
      {
        if (this._MembersCollectionActionsHandlers == null)
          this._MembersCollectionActionsHandlers = this.CreateMembersCollectionActionsHandlers();
        return this._MembersCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Sungero.Meetings.Client.MeetingActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Sungero.Meetings.Client.MeetingCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Sungero.Meetings.Client.MeetingAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Sungero.Meetings.Client.MeetingAnyChildEntityCollectionActions();
    }

    protected object CreateMembersActionsHandlers()
    {
      return null;
    }

    protected object CreateMembersCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Meetings.Client.MeetingFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Meetings.Shared.MeetingFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Meetings.MeetingClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Meetings.MeetingSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DateTimeChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.DateTime, this.DateTime, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DateTimeChanged(args);
    }

    protected void LocationChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Location, this.Location, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).LocationChanged(args);
    }

    protected void SecretaryChangedHandler()
    {
      var args = new global::Sungero.Meetings.Shared.MeetingSecretaryChangedEventArgs(this.State.Properties.Secretary, this.Secretary, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).SecretaryChanged(args);
    }

    protected void PresidentChangedHandler()
    {
      var args = new global::Sungero.Meetings.Shared.MeetingPresidentChangedEventArgs(this.State.Properties.President, this.President, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).PresidentChanged(args);
    }

    protected void MembersChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).MembersChanged(args);
    }

    protected void NoteChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Note, this.Note, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).NoteChanged(args);
    }

    protected void DisplayNameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.DisplayName, this.DisplayName, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DisplayNameChanged(args);
    }

    protected void DurationChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DoublePropertyChangedEventArgs(this.State.Properties.Duration, this.Duration, this);
     ((global::Sungero.Meetings.MeetingSharedHandlers)this.SharedHandlers).DurationChanged(args);
    }



    protected virtual global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers CreateMembersAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers CreateMembersDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Meetings.MeetingMembersSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void MembersAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.MembersAdded(args);
      }
    }

    protected virtual void MembersDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMembersDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.MembersDeleted(args);
      }
    }


  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? DateTimeValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.DateTime, value, this, this.Info.Properties.DateTime);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).DateTimeValueInput(args);
    return args.NewValue;
  }

  protected global::System.String LocationValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Location, value, this, this.Info.Properties.Location);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).LocationValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee SecretaryValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Meetings.Client.MeetingSecretaryValueInputEventArgs(this.Secretary, value, this, this.Info.Properties.Secretary);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).SecretaryValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee PresidentValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Meetings.Client.MeetingPresidentValueInputEventArgs(this.President, value, this, this.Info.Properties.President);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).PresidentValueInput(args);
    return args.NewValue;
  }


  protected global::System.String NoteValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Note, value, this, this.Info.Properties.Note);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).NoteValueInput(args);
    return args.NewValue;
  }

  protected global::System.String DisplayNameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.DisplayName, value, this, this.Info.Properties.DisplayName);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).DisplayNameValueInput(args);
    return args.NewValue;
  }

  protected global::System.Double? DurationValueInputHandler(global::System.Double? value)
  {
    var args = new global::Sungero.Presentation.DoubleValueInputEventArgs(this.Duration, value, this, this.Info.Properties.Duration);
    ((global::Sungero.Meetings.MeetingClientHandlers)this.Handlers).DurationValueInput(args);
    return args.NewValue;
  }



    #endregion

    #region Constructors



              protected virtual void InitSecretaryNavigationProperty()
              {
                this._Secretary = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("Secretary", this);
                this._Secretary.ValueChanged += (sender, e) => { this.SecretaryChangedHandler(); };
                this.AddProperty(this._Secretary as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitPresidentNavigationProperty()
              {
                this._President = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("President", this);
                this._President.ValueChanged += (sender, e) => { this.PresidentChangedHandler(); };
                this.AddProperty(this._President as global::Sungero.Domain.Client.IProperty);
              }



            protected virtual void InitMembersCollectionProperty()
            {
              this._Members = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Meetings.IMeetingMembers>("Members", this);
              this._Members.ValueChanged += (sender, e) => { this.MembersChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Members);
              this.SetMembersEventHandlers();
            }

            protected void SetMembersEventHandlers()
            {
              this._Members.ChildEntityAdded += this.MembersAddedHandler;
              this._Members.ChildEntityDeleted += this.MembersDeletedHandler;
            }


    public Meeting()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._DateTime = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("DateTime", this);
            this._DateTime.ValueChanged += (sender, e) => { this.DateTimeChangedHandler(); };
            this.AddProperty(this._DateTime);

            this._Location = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Location", this);
            this._Location.ValueChanged += (sender, e) => { this.LocationChangedHandler(); };
            this.AddProperty(this._Location);

            this._Note = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Note", this);
            this._Note.ValueChanged += (sender, e) => { this.NoteChangedHandler(); };
            this.AddProperty(this._Note);

            this._DisplayName = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("DisplayName", this);
            this._DisplayName.ValueChanged += (sender, e) => { this.DisplayNameChangedHandler(); };
            this.AddProperty(this._DisplayName);

            this._Duration = new global::Sungero.Domain.Client.SimpleProperty<global::System.Double?>("Duration", this);
            this._Duration.ValueChanged += (sender, e) => { this.DurationChangedHandler(); };
            this.AddProperty(this._Duration);

            this.InitSecretaryNavigationProperty();

            this.InitPresidentNavigationProperty();


            this.InitMembersCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// MeetingPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Client
{
  public class MeetingPresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Sungero.Meetings.IMeeting
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _CreateOrShowAgendaCommand;

          public global::System.Windows.Input.ICommand CreateOrShowAgendaCommand
          {
            get
            {
              if (this._CreateOrShowAgendaCommand == null)
                  this._CreateOrShowAgendaCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CreateOrShowAgenda", this, this.CreateOrShowAgenda, this.CanCreateOrShowAgenda) { IsEmptyParameterAllowed = true };
              return this._CreateOrShowAgendaCommand;
            }
          }
          private global::System.Windows.Input.ICommand _CreateOrShowMinutesCommand;

          public global::System.Windows.Input.ICommand CreateOrShowMinutesCommand
          {
            get
            {
              if (this._CreateOrShowMinutesCommand == null)
                  this._CreateOrShowMinutesCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CreateOrShowMinutes", this, this.CreateOrShowMinutes, this.CanCreateOrShowMinutes) { IsEmptyParameterAllowed = true };
              return this._CreateOrShowMinutesCommand;
            }
          }
          private global::System.Windows.Input.ICommand _OpenActionItemExecutionReportCommand;

          public global::System.Windows.Input.ICommand OpenActionItemExecutionReportCommand
          {
            get
            {
              if (this._OpenActionItemExecutionReportCommand == null)
                  this._OpenActionItemExecutionReportCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItemExecutionReport", this, this.OpenActionItemExecutionReport, this.CanOpenActionItemExecutionReport) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemExecutionReportCommand;
            }
          }
          private global::System.Windows.Input.ICommand _MeetingDocumentsCommand;

          public global::System.Windows.Input.ICommand MeetingDocumentsCommand
          {
            get
            {
              if (this._MeetingDocumentsCommand == null)
                  this._MeetingDocumentsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("MeetingDocuments", this, this.MeetingDocuments, this.CanMeetingDocuments) { IsEmptyParameterAllowed = true };
              return this._MeetingDocumentsCommand;
            }
          }
          private global::System.Windows.Input.ICommand _OpenActionItemsCommand;

          public global::System.Windows.Input.ICommand OpenActionItemsCommand
          {
            get
            {
              if (this._OpenActionItemsCommand == null)
                  this._OpenActionItemsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItems", this, this.OpenActionItems, this.CanOpenActionItems) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemsCommand;
            }
          }
          private global::System.Windows.Input.ICommand _AddToCalendarCommand;

          public global::System.Windows.Input.ICommand AddToCalendarCommand
          {
            get
            {
              if (this._AddToCalendarCommand == null)
                  this._AddToCalendarCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("AddToCalendar", this, this.AddToCalendar, this.CanAddToCalendar) { IsEmptyParameterAllowed = true };
              return this._AddToCalendarCommand;
            }
          }
          private global::System.Windows.Input.ICommand _AddMemberCommand;

          public global::System.Windows.Input.ICommand AddMemberCommand
          {
            get
            {
              if (this._AddMemberCommand == null)
                  this._AddMemberCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("AddMember", this, this.AddMember, this.CanAddMember) { IsEmptyParameterAllowed = true };
              return this._AddMemberCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanCreateOrShowAgenda(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanCreateOrShowAgenda(args);
              }

              private void CreateOrShowAgenda(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.CreateOrShowAgenda);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CreateOrShowAgenda(args);
              }

              private bool CanCreateOrShowMinutes(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanCreateOrShowMinutes(args);
              }

              private void CreateOrShowMinutes(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.CreateOrShowMinutes);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CreateOrShowMinutes(args);
              }

              private bool CanOpenActionItemExecutionReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanOpenActionItemExecutionReport(args);
              }

              private void OpenActionItemExecutionReport(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenActionItemExecutionReport);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).OpenActionItemExecutionReport(args);
              }

              private bool CanMeetingDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanMeetingDocuments(args);
              }

              private void MeetingDocuments(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.MeetingDocuments);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).MeetingDocuments(args);
              }

              private bool CanOpenActionItems(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanOpenActionItems(args);
              }

              private void OpenActionItems(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.OpenActionItems);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).OpenActionItems(args);
              }

              private bool CanAddToCalendar(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanAddToCalendar(args);
              }

              private void AddToCalendar(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.AddToCalendar);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).AddToCalendar(args);
              }

              private bool CanAddMember(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanAddMember(args);
              }

              private void AddMember(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.AddMember);
                ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).AddMember(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _SecretaryCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter SecretaryCollectionPresenter
              {
          get { return this._SecretaryCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _PresidentCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter PresidentCollectionPresenter
              {
          get { return this._PresidentCollectionPresenter; }
        }


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _MembersMemberCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter MembersMemberCollectionPresenter
                          {
                  get { return this._MembersMemberCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
                  this._SecretaryCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("1a9d3323-7957-4e3b-af0c-c0be647a56ae"));
              this._SecretaryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Secretary");

                  this._PresidentCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("8d3a3598-e7d7-4eff-a528-d8773aee284e"));
              this._PresidentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "President");


                          this._MembersMemberCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.CoreEntities.IRecipient>(global::System.Guid.Parse("c6e9e44e-de68-41b4-ba8d-5423eeebda18"));
                        this._MembersMemberCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IRecipient>(() => this.Entity.Id, typeof(Sungero.Meetings.IMeetingMembers), "Member");


    }

    public MeetingPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// MeetingCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Client
{
  public class MeetingCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Sungero.Meetings.IMeeting
  {
    #region Actions

          private global::System.Windows.Input.ICommand _OpenActionItemsCommand;  

          public global::System.Windows.Input.ICommand OpenActionItemsCommand 
          { 
            get
            { 
              if (this._OpenActionItemsCommand == null)
                this._OpenActionItemsCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("OpenActionItems", this, this.OpenActionItems, this.CanOpenActionItems) { IsEmptyParameterAllowed = true };
              return this._OpenActionItemsCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanOpenActionItems(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).CanOpenActionItems(args);
        }

        private void OpenActionItems(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.OpenActionItems);
          ((Sungero.Meetings.Client.MeetingActions)(entity as Sungero.Meetings.Client.Meeting).ActionsHandlers).OpenActionItems(args);
        }



    #endregion

    public MeetingCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public MeetingCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public MeetingCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public MeetingCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// MeetingRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Client
{ 
  public class MeetingRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Sungero.Meetings.IMeetingRepositoryImplementer<T>
      where T : global::Sungero.Meetings.IMeeting
    {
       public new global::Sungero.Meetings.IMeetingAccessRights AccessRights
       {
          get { return (global::Sungero.Meetings.IMeetingAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Meetings.IMeetingInfo Info
       {
          get { return (global::Sungero.Meetings.IMeetingInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Meetings.Client.MeetingTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// MeetingAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Meetings.Client
{
  public class MeetingAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Sungero.Meetings.IMeetingAccessRights
  {

    public MeetingAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class MeetingTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Sungero.Meetings.IMeetingAccessRights
  {

    public MeetingTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
