
// ==================================================================
// ContractualDocument.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class ContractualDocumentFilter<T> :
      global::Sungero.Docflow.Server.ContractualDocumentBaseFilter<T>
      where T : class, global::Sungero.Contracts.IContractualDocument
    {
      private global::Sungero.Contracts.IContractualDocumentFilterState filter
      {
        get
        {
          return (Sungero.Contracts.IContractualDocumentFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public ContractualDocumentFilter(global::Sungero.Contracts.IContractualDocumentFilterState filter)
      : base(filter)
      {
      }

      protected ContractualDocumentFilter()
      {
      }
    }
    public class ContractualDocumentSearchDialogModel : global::Sungero.Docflow.Server.ContractualDocumentBaseSearchDialogModel
        {
                  public override global::System.String Subject { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.Double? TotalAmount { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }


                  public virtual global::System.Boolean? IsStandard { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> ResponsibleEmployee { get; protected set; }


                   public new ContractualDocumentVersionsModel Versions { get { return (ContractualDocumentVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new ContractualDocumentTrackingModel Tracking { get { return (ContractualDocumentTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public ContractualDocumentMilestonesModel Milestones { get; protected set; }

        }

      public class ContractualDocumentVersionsModel : global::Sungero.Docflow.Server.ContractualDocumentBaseVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class ContractualDocumentTrackingModel : global::Sungero.Docflow.Server.ContractualDocumentBaseTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }


      public class ContractualDocumentMilestonesModel : global::Sungero.Domain.CollectionPropertySearchDialogModel
          {
            public override global::System.Int32? Id { get; protected set; }


         }



  public class ContractualDocumentFilterForCounterpartySignatory<TQueryEntity, TSourceEntity>
    : global::Sungero.Docflow.Server.ContractualDocumentBaseFilterForCounterpartySignatory<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.Contracts.IContractualDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Contracts.ContractualDocumentCounterpartySignatoryPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).CounterpartySignatoryFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentFilterForCounterpartySignatory(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentFilterForContact<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
    where TSourceEntity : class, global::Sungero.Contracts.IContractualDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Contracts.ContractualDocumentContactPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ContactFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentSearchFilterForContact<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Parties.IContact
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Contracts.ContractualDocumentContactSearchPropertyFilteringServerHandler<TQueryEntity>().ContactSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentSearchFilterForContact(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentFilterForResponsibleEmployee<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Company.IEmployee
    where TSourceEntity : class, global::Sungero.Contracts.IContractualDocument
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Contracts.ContractualDocumentResponsibleEmployeePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).ResponsibleEmployeeFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentFilterForResponsibleEmployee(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class ContractualDocumentSearchFilterForResponsibleEmployee<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.CoreEntities.IRecipient
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      var result = new global::Sungero.Contracts.ContractualDocumentResponsibleEmployeeSearchPropertyFilteringServerHandler<TQueryEntity>().ResponsibleEmployeeSearchDialogFiltering(query, args);
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public ContractualDocumentSearchFilterForResponsibleEmployee(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Contracts.Server.ContractualDocumentFilter<global::Sungero.Contracts.IContractualDocument>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Contracts.Server.ContractualDocumentFilterForCounterpartySignatory<global::Sungero.Parties.IContact, global::Sungero.Contracts.IContractualDocument>), "CounterpartySignatory")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Contracts.Server.ContractualDocumentFilterForContact<global::Sungero.Parties.IContact, global::Sungero.Contracts.IContractualDocument>), "Contact")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Contracts.Server.ContractualDocumentSearchFilterForContact<global::Sungero.Parties.IContact>), "Contact")]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Contracts.Server.ContractualDocumentFilterForResponsibleEmployee<global::Sungero.Company.IEmployee, global::Sungero.Contracts.IContractualDocument>), "ResponsibleEmployee")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Sungero.Contracts.Server.ContractualDocumentSearchFilterForResponsibleEmployee<global::Sungero.CoreEntities.IRecipient>), "ResponsibleEmployee")]


  public class ContractualDocument :
    global::Sungero.Docflow.Server.ContractualDocumentBase, global::Sungero.Contracts.IContractualDocument, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("59079f7f-a326-4947-bbd6-0ae6dfb5f59b");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Contracts.Server.ContractualDocument.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Contracts.IContractualDocument, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Contracts.IContractualDocumentState State
    {
      get { return (global::Sungero.Contracts.IContractualDocumentState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Contracts.Shared.ContractualDocumentState(this);
    }

    public new virtual global::Sungero.Contracts.IContractualDocumentInfo Info
    {
      get { return (global::Sungero.Contracts.IContractualDocumentInfo)base.Info; }
    }

    public new virtual global::Sungero.Contracts.IContractualDocumentAccessRights AccessRights
    {
      get { return (global::Sungero.Contracts.IContractualDocumentAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Contracts.Server.ContractualDocumentAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Contracts.Server.ContractualDocumentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Contracts.Shared.ContractualDocumentFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Contracts.ContractualDocumentServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Contracts.ContractualDocumentSharedHandlers(this);
    }

    private global::System.DateTime? _ValidFrom;
    public virtual global::System.DateTime? ValidFrom
    {
      get
      {
        return this._ValidFrom;
      }

      set
      {
        this.SetPropertyValue("ValidFrom", this._ValidFrom, value, (propertyValue) => { this._ValidFrom = propertyValue; }, this.ValidFromChangedHandler);
      }
    }
    private global::System.DateTime? _ValidTill;
    public virtual global::System.DateTime? ValidTill
    {
      get
      {
        return this._ValidTill;
      }

      set
      {
        this.SetPropertyValue("ValidTill", this._ValidTill, value, (propertyValue) => { this._ValidTill = propertyValue; }, this.ValidTillChangedHandler);
      }
    }
    private global::System.Boolean? _IsStandard;
    public virtual global::System.Boolean? IsStandard
    {
      get
      {
        return this._IsStandard;
      }

      set
      {
        this.SetPropertyValue("IsStandard", this._IsStandard, value, (propertyValue) => { this._IsStandard = propertyValue; }, this.IsStandardChangedHandler);
      }
    }







    private global::Sungero.Parties.IContact _Contact;
    public virtual global::Sungero.Parties.IContact Contact
    {
      get
      {
        return this._Contact;
      }

      set
      {
        this.SetPropertyValue("Contact", this._Contact, value, (propertyValue) => { this._Contact = propertyValue; }, this.ContactChangedHandler);
      }
    }
    private global::Sungero.Company.IEmployee _ResponsibleEmployee;
    public virtual global::Sungero.Company.IEmployee ResponsibleEmployee
    {
      get
      {
        return this._ResponsibleEmployee;
      }

      set
      {
        this.SetPropertyValue("ResponsibleEmployee", this._ResponsibleEmployee, value, (propertyValue) => { this._ResponsibleEmployee = propertyValue; }, this.ResponsibleEmployeeChangedHandler);
      }
    }


    protected global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones> _Milestones;

    public virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones> Milestones
    {
      get
      {
        if (this._Milestones == null)
        {
          this._Milestones = this.CreateMilestonesCollection();
          this.SetMilestonesEventHandlers();
        }
        return this._Milestones;
      }

      set
      {
        if (this._Milestones != null)
          this.UnsetChildCollectionEventHandlers(this._Milestones);

        this._Milestones = value;
        this.SetMilestonesEventHandlers();
      }
    }

    protected virtual global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones> CreateMilestonesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones>() { RootEntity = this };
    }

    private void SetMilestonesEventHandlers()
    {
      this.SetChildCollectionEventHandlers(this._Milestones, "Milestones");

      var changeNotifier = (global::Sungero.Domain.Shared.INotifyChildEntityCollectionChanged)this._Milestones;
      changeNotifier.Added += this.MilestonesAddedHandler;
      changeNotifier.Deleted += this.MilestonesDeletedHandler;
      changeNotifier.Added += this.MilestonesCollectionUpdateEventHandler;
      changeNotifier.Deleted += this.MilestonesCollectionUpdateEventHandler;
      changeNotifier.Updated += this.MilestonesCollectionUpdateEventHandler;
    }

    private void MilestonesCollectionUpdateEventHandler(object sender, global::Sungero.Domain.Shared.BaseChildEntityEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      if (this.IsPropertyChangedHandlerEnabled)
        this.MilestonesChangedHandler();
    }


    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.IContractualDocumentVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.IContractualDocumentTracking>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Contracts.ContractualDocumentCreatingFromServerHandler((global::Sungero.Contracts.IContractualDocument)entitySource, this.Info);
    }

    #region Framework events

    protected void ContactChangedHandler()
    {
      var args = new global::Sungero.Contracts.Shared.ContractualDocumentContactChangedEventArgs(this.State.Properties.Contact, this.Contact, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ContactChanged(args);
    }

    protected void ValidFromChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidFrom, this.ValidFrom, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ValidFromChanged(args);
    }

    protected void ValidTillChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidTill, this.ValidTill, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ValidTillChanged(args);
    }

    protected void ResponsibleEmployeeChangedHandler()
    {
      var args = new global::Sungero.Contracts.Shared.ContractualDocumentResponsibleEmployeeChangedEventArgs(this.State.Properties.ResponsibleEmployee, this.ResponsibleEmployee, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ResponsibleEmployeeChanged(args);
    }

    protected void IsStandardChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsStandard, this.IsStandard, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).IsStandardChanged(args);
    }


    protected void MilestonesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).MilestonesChanged(args);
    }





    protected virtual global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers CreateMilestonesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers CreateMilestonesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void MilestonesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMilestonesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.MilestonesAdded(args);
      }
    }

    protected virtual void MilestonesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMilestonesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.MilestonesDeleted(args);
      }
    }


    #endregion


    public ContractualDocument()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Contracts.ContractualDocumentConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// ContractualDocumentHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class ContractualDocumentCounterpartySignatoryPropertyFilteringServerHandler<T>
    : global::Sungero.Docflow.ContractualDocumentBaseCounterpartySignatoryPropertyFilteringServerHandler<T>
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.Contracts.IContractualDocument _obj
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Entity; }
    }

    public ContractualDocumentCounterpartySignatoryPropertyFilteringServerHandler(global::Sungero.Contracts.IContractualDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentContactPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {
    private global::Sungero.Contracts.IContractualDocument _obj
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Entity; }
    }

    public ContractualDocumentContactPropertyFilteringServerHandler(global::Sungero.Contracts.IContractualDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentContactSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Parties.IContact
  {

    public virtual global::System.Linq.IQueryable<T> ContactSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentContactSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }

  public partial class ContractualDocumentResponsibleEmployeePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Company.IEmployee
  {
    private global::Sungero.Contracts.IContractualDocument _obj
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> ResponsibleEmployeeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentResponsibleEmployeePropertyFilteringServerHandler(global::Sungero.Contracts.IContractualDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentResponsibleEmployeeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.CoreEntities.IRecipient
  {

    public virtual global::System.Linq.IQueryable<T> ResponsibleEmployeeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public ContractualDocumentResponsibleEmployeeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class ContractualDocumentFilteringServerHandler<T>
    : global::Sungero.Docflow.ContractualDocumentBaseFilteringServerHandler<T>  
    where T : class, global::Sungero.Contracts.IContractualDocument
  {
    private global::Sungero.Contracts.IContractualDocumentFilterState _filter
    {
      get
      {
        return (Sungero.Contracts.IContractualDocumentFilterState)this.Filter;
      }
    }

    public ContractualDocumentFilteringServerHandler(global::Sungero.Contracts.IContractualDocumentFilterState filter)
    : base(filter)
    {
    }

    protected ContractualDocumentFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }


  }

  public partial class ContractualDocumentSearchDialogServerHandler : global::Sungero.Docflow.ContractualDocumentBaseSearchDialogServerHandler
   {
     private global::Sungero.Contracts.Server.ContractualDocumentSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Contracts.Server.ContractualDocumentSearchDialogModel)this.Dialog;
       }
     }

     public ContractualDocumentSearchDialogServerHandler(global::Sungero.Contracts.Server.ContractualDocumentSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class ContractualDocumentServerHandlers : global::Sungero.Docflow.ContractualDocumentBaseServerHandlers
  {
    private global::Sungero.Contracts.IContractualDocument _obj
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Entity; }
    }

    public ContractualDocumentServerHandlers(global::Sungero.Contracts.IContractualDocument entity)
      : base(entity)
    {
    }
  }

  public partial class ContractualDocumentCreatingFromServerHandler : global::Sungero.Docflow.ContractualDocumentBaseCreatingFromServerHandler
  {
    private global::Sungero.Contracts.IContractualDocument _source
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Source; }
    }

    private global::Sungero.Contracts.IContractualDocumentInfo _info
    {
      get { return (global::Sungero.Contracts.IContractualDocumentInfo)this._Info; }
    }

    public ContractualDocumentCreatingFromServerHandler(global::Sungero.Contracts.IContractualDocument source, global::Sungero.Contracts.IContractualDocumentInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// ContractualDocumentEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
}

// ==================================================================
// ContractualDocumentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class ContractualDocumentAccessRights : 
    Sungero.Docflow.Server.ContractualDocumentBaseAccessRights, Sungero.Contracts.IContractualDocumentAccessRights
  {

    public ContractualDocumentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ContractualDocumentTypeAccessRights : 
    Sungero.Docflow.Server.ContractualDocumentBaseTypeAccessRights, Sungero.Contracts.IContractualDocumentAccessRights
  {

    public ContractualDocumentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// ContractualDocumentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class ContractualDocumentRepositoryImplementer<T> : 
      global::Sungero.Docflow.Server.ContractualDocumentBaseRepositoryImplementer<T>,
      global::Sungero.Contracts.IContractualDocumentRepositoryImplementer<T>
      where T : global::Sungero.Contracts.IContractualDocument 
    {
       public new global::Sungero.Contracts.IContractualDocumentAccessRights AccessRights
       {
          get { return (global::Sungero.Contracts.IContractualDocumentAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Contracts.IContractualDocumentInfo Info
       {
          get { return (global::Sungero.Contracts.IContractualDocumentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Contracts.Server.ContractualDocumentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ContractualDocumentPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
}

// ==================================================================
// ContractualDocumentServerFunctions.g.cs
// ==================================================================

namespace Sungero.Contracts.Server
{
  public partial class ContractualDocumentFunctions : global::Sungero.Docflow.Server.ContractualDocumentBaseFunctions
  {
    private global::Sungero.Contracts.IContractualDocument _obj
    {
      get { return (global::Sungero.Contracts.IContractualDocument)this.Entity; }
    }

    public ContractualDocumentFunctions(global::Sungero.Contracts.IContractualDocument entity) : base(entity) { }
  }
}

// ==================================================================
// ContractualDocumentFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Functions
{
  internal static class ContractualDocument
  {
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.ContractualDocumentFunctions" />
    internal static  global::Sungero.Contracts.IContractualDocument GetIgnoreAccessRights(global::System.Int32 documentId)
    {
      return global::Sungero.Contracts.Server.ContractualDocumentFunctions.GetIgnoreAccessRights(documentId);
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.ContractualDocumentFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.String GetRegistrationNumberIgnoreAccessRights(global::System.Int32 documentId)
    {
      return global::Sungero.Contracts.Server.ContractualDocumentFunctions.GetRegistrationNumberIgnoreAccessRights(documentId);
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.ContractualDocumentFunctions" />
    internal static  global::System.String TotalAmountInCurrencyToWords(global::Sungero.Contracts.IContractualDocument contractualDocument)
    {
      return global::Sungero.Contracts.Server.ContractualDocumentFunctions.TotalAmountInCurrencyToWords(contractualDocument);
    }

    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.ContractualDocumentFunctions" />
    internal static  global::Sungero.Company.IEmployee GetDocumentResponsibleEmployee(global::Sungero.Contracts.IContractualDocument contractualDocument)
    {
      var functions = (global::Sungero.Contracts.Shared.ContractualDocumentFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)contractualDocument).FunctionsContainer.SharedFunctions;
      return functions.GetDocumentResponsibleEmployee();
    }

  }
}

// ==================================================================
// ContractualDocumentServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class ContractualDocumentServerPublicFunctions : global::Sungero.Contracts.Server.IContractualDocumentServerPublicFunctions
  {
  }
}

// ==================================================================
// ContractualDocumentQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Queries
{
  public class ContractualDocument
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Contracts.Server.ContractualDocument.ContractualDocumentQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ContractualDocumentServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class ContractualDocumentConvertingFromServerHandler : global::Sungero.Docflow.ContractualDocumentBaseConvertingFromServerHandler
  { 
    private global::Sungero.Contracts.IContractualDocumentInfo _info
    {
      get { return (global::Sungero.Contracts.IContractualDocumentInfo)this._Info; }
    }

    public ContractualDocumentConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Contracts.IContractualDocumentInfo info)
      : base(source, info)
    {
    }
  }
}
