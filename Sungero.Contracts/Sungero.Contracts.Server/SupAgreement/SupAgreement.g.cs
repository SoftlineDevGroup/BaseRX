
// ==================================================================
// SupAgreement.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class SupAgreementFilter<T> :
      global::Sungero.Contracts.Server.ContractualDocumentFilter<T>
      where T : class, global::Sungero.Contracts.ISupAgreement
    {
      private global::Sungero.Contracts.ISupAgreementFilterState filter
      {
        get
        {
          return (Sungero.Contracts.ISupAgreementFilterState)this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public SupAgreementFilter(global::Sungero.Contracts.ISupAgreementFilterState filter)
      : base(filter)
      {
      }

      protected SupAgreementFilter()
      {
      }
    }
    public class SupAgreementSearchDialogModel : global::Sungero.Contracts.Server.ContractualDocumentSearchDialogModel
        {
                  public override global::System.Boolean? IsStandard { get; protected set; }
                  public override global::System.Double? TotalAmount { get; protected set; }
                  public override global::System.Int32? Id { get; protected set; }
                  public override global::System.String Name { get; protected set; }
                  public override global::System.String Subject { get; protected set; }


                  public override global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> VerificationState { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IDepartment> Department { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> Author { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<CommonLibrary.DateRangeValue> Created { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Content.IAssociatedApplication> AssociatedApplication { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentKind> DocumentKind { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Company.IBusinessUnit> BusinessUnit { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> OurSignatory { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.Parties.ICounterparty> Counterparty { get; protected set; }
                  public override global::System.Collections.Generic.IEnumerable<Sungero.CoreEntities.IRecipient> ResponsibleEmployee { get; protected set; }



                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IOfficialDocument> LeadingDocument { get; protected set; }


                   public new SupAgreementVersionsModel Versions { get { return (SupAgreementVersionsModel)base.Versions; } protected set { base.Versions = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new SupAgreementTrackingModel Tracking { get { return (SupAgreementTrackingModel)base.Tracking; } protected set { base.Tracking = value; } }
                   [Sungero.Domain.Shared.HideInDevStudio()]
                   public new SupAgreementMilestonesModel Milestones { get { return (SupAgreementMilestonesModel)base.Milestones; } protected set { base.Milestones = value; } }

        }

      public class SupAgreementVersionsModel : global::Sungero.Contracts.Server.ContractualDocumentVersionsModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }
                      public override global::System.String Body { get; protected set; }




         }
      public class SupAgreementTrackingModel : global::Sungero.Contracts.Server.ContractualDocumentTrackingModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }
      public class SupAgreementMilestonesModel : global::Sungero.Contracts.Server.ContractualDocumentMilestonesModel
          {
                      [Sungero.Domain.Shared.HideInDevStudio()]
                      public override global::System.Int32? Id { get; protected set; }




         }




  public class SupAgreementFilterForLeadingDocument<TQueryEntity, TSourceEntity>
    : global::Sungero.Docflow.Server.OfficialDocumentFilterForLeadingDocument<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Contracts.IContractBase
    where TSourceEntity : class, global::Sungero.Contracts.ISupAgreement
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      var result = new global::Sungero.Contracts.SupAgreementLeadingDocumentPropertyFilteringServerHandler<TQueryEntity>(sourceEntity).LeadingDocumentFiltering(query, args);
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public SupAgreementFilterForLeadingDocument(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Sungero.Contracts.Server.SupAgreementFilter<global::Sungero.Contracts.ISupAgreement>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Sungero.Contracts.Server.SupAgreementFilterForLeadingDocument<global::Sungero.Contracts.IContractBase, global::Sungero.Contracts.ISupAgreement>), "LeadingDocument")]


  public class SupAgreement :
    global::Sungero.Contracts.Server.ContractualDocument, global::Sungero.Contracts.ISupAgreement, global::Sungero.Domain.Shared.ISecurableEntity, global::Sungero.Domain.IInternalSecurableEntity
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("265f2c57-6a8a-4a15-833b-ca00e8047fa5");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Contracts.Server.SupAgreement.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Contracts.ISupAgreement, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Sungero.Contracts.ISupAgreementState State
    {
      get { return (global::Sungero.Contracts.ISupAgreementState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Contracts.Shared.SupAgreementState(this);
    }

    public new virtual global::Sungero.Contracts.ISupAgreementInfo Info
    {
      get { return (global::Sungero.Contracts.ISupAgreementInfo)base.Info; }
    }

    public new virtual global::Sungero.Contracts.ISupAgreementAccessRights AccessRights
    {
      get { return (global::Sungero.Contracts.ISupAgreementAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Contracts.Server.SupAgreementAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Sungero.Contracts.Server.SupAgreementFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Contracts.Shared.SupAgreementFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Sungero.Contracts.SupAgreementServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Sungero.Contracts.SupAgreementSharedHandlers(this);
    }






    private static global::Sungero.Domain.Shared.EnumerationItems _LifeCycleStateItems = new global::Sungero.Domain.Shared.EnumerationItems(
      global::Sungero.Contracts.Server.ContractualDocument.LifeCycleStateItems,
      typeof(global::Sungero.Contracts.SupAgreement.LifeCycleState),
      typeof(global::Sungero.Contracts.Server.SupAgreement),
      "LifeCycleState");

    public static new global::Sungero.Domain.Shared.EnumerationItems LifeCycleStateItems
    {
      get { return global::Sungero.Contracts.Server.SupAgreement._LifeCycleStateItems; }
    }

    public override global::Sungero.Domain.Shared.EnumerationItems LifeCycleStateAllowedItems
    {
      get { return global::Sungero.Contracts.Server.SupAgreement.LifeCycleStateItems; }
    }



    public new virtual global::Sungero.Contracts.IContractBase LeadingDocument
    {
      get
      {
      return base.LeadingDocument as global::Sungero.Contracts.IContractBase;
      }

      set
      {
      base.LeadingDocument = value;
      }
    }



    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Content.IElectronicDocumentVersions> CreateVersionsCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.ISupAgreementVersions>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Docflow.IOfficialDocumentTracking> CreateTrackingCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.ISupAgreementTracking>() { RootEntity = this };
    }
    protected override global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones> CreateMilestonesCollection()
    {
      return new global::Sungero.Domain.ChildEntityCollection<global::Sungero.Contracts.ISupAgreementStages>() { RootEntity = this };
    }


    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Contracts.SupAgreementCreatingFromServerHandler((global::Sungero.Contracts.ISupAgreement)entitySource, this.Info);
    }

    #region Framework events






    #endregion


    public SupAgreement()
    {
    }

    protected override global::Sungero.Domain.Shared.EntityConvertingFromServerHandler CreateConvertingFromServerHandler(   
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      return new global::Sungero.Contracts.SupAgreementConvertingFromServerHandler((global::Sungero.Content.IElectronicDocument)entitySource, this.Info);
    }

  }
}

// ==================================================================
// SupAgreementHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class SupAgreementLeadingDocumentPropertyFilteringServerHandler<T>
    : global::Sungero.Docflow.OfficialDocumentLeadingDocumentPropertyFilteringServerHandler<T>
    where T : class, global::Sungero.Contracts.IContractBase
  {
    private global::Sungero.Contracts.ISupAgreement _obj
    {
      get { return (global::Sungero.Contracts.ISupAgreement)this.Entity; }
    }

    public SupAgreementLeadingDocumentPropertyFilteringServerHandler(global::Sungero.Contracts.ISupAgreement entity)
      : base(entity)
    {
    }
  }



  public partial class SupAgreementFilteringServerHandler<T>
    : global::Sungero.Contracts.ContractualDocumentFilteringServerHandler<T>  
    where T : class, global::Sungero.Contracts.ISupAgreement
  {
    private global::Sungero.Contracts.ISupAgreementFilterState _filter
    {
      get
      {
        return (Sungero.Contracts.ISupAgreementFilterState)this.Filter;
      }
    }

    public SupAgreementFilteringServerHandler(global::Sungero.Contracts.ISupAgreementFilterState filter)
    : base(filter)
    {
    }

    protected SupAgreementFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }


  }

  public partial class SupAgreementSearchDialogServerHandler : global::Sungero.Contracts.ContractualDocumentSearchDialogServerHandler
   {
     private global::Sungero.Contracts.Server.SupAgreementSearchDialogModel _dialog
     {
       get
       {
         return (global::Sungero.Contracts.Server.SupAgreementSearchDialogModel)this.Dialog;
       }
     }

     public SupAgreementSearchDialogServerHandler(global::Sungero.Contracts.Server.SupAgreementSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class SupAgreementServerHandlers : global::Sungero.Contracts.ContractualDocumentServerHandlers
  {
    private global::Sungero.Contracts.ISupAgreement _obj
    {
      get { return (global::Sungero.Contracts.ISupAgreement)this.Entity; }
    }

    public SupAgreementServerHandlers(global::Sungero.Contracts.ISupAgreement entity)
      : base(entity)
    {
    }
  }

  public partial class SupAgreementCreatingFromServerHandler : global::Sungero.Contracts.ContractualDocumentCreatingFromServerHandler
  {
    private global::Sungero.Contracts.ISupAgreement _source
    {
      get { return (global::Sungero.Contracts.ISupAgreement)this.Source; }
    }

    private global::Sungero.Contracts.ISupAgreementInfo _info
    {
      get { return (global::Sungero.Contracts.ISupAgreementInfo)this._Info; }
    }

    public SupAgreementCreatingFromServerHandler(global::Sungero.Contracts.ISupAgreement source, global::Sungero.Contracts.ISupAgreementInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// SupAgreementEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
}

// ==================================================================
// SupAgreementAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class SupAgreementAccessRights : 
    Sungero.Contracts.Server.ContractualDocumentAccessRights, Sungero.Contracts.ISupAgreementAccessRights
  {

    public SupAgreementAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class SupAgreementTypeAccessRights : 
    Sungero.Contracts.Server.ContractualDocumentTypeAccessRights, Sungero.Contracts.ISupAgreementAccessRights
  {

    public SupAgreementTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// SupAgreementRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
    public class SupAgreementRepositoryImplementer<T> : 
      global::Sungero.Contracts.Server.ContractualDocumentRepositoryImplementer<T>,
      global::Sungero.Contracts.ISupAgreementRepositoryImplementer<T>
      where T : global::Sungero.Contracts.ISupAgreement 
    {
       public new global::Sungero.Contracts.ISupAgreementAccessRights AccessRights
       {
          get { return (global::Sungero.Contracts.ISupAgreementAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Contracts.ISupAgreementInfo Info
       {
          get { return (global::Sungero.Contracts.ISupAgreementInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Contracts.Server.SupAgreementTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// SupAgreementPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
}

// ==================================================================
// SupAgreementServerFunctions.g.cs
// ==================================================================

namespace Sungero.Contracts.Server
{
  public partial class SupAgreementFunctions : global::Sungero.Contracts.Server.ContractualDocumentFunctions
  {
    private global::Sungero.Contracts.ISupAgreement _obj
    {
      get { return (global::Sungero.Contracts.ISupAgreement)this.Entity; }
    }

    public SupAgreementFunctions(global::Sungero.Contracts.ISupAgreement entity) : base(entity) { }
  }
}

// ==================================================================
// SupAgreementFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Functions
{
  internal static class SupAgreement
  {
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.SupAgreementFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.Linq.IQueryable<global::Sungero.Contracts.ISupAgreement> GetDuplicates(global::Sungero.Contracts.ISupAgreement supAgreement, global::Sungero.Company.IBusinessUnit businessUnit, global::System.String registrationNumber, global::System.Nullable<global::System.DateTime> registrationDate, global::Sungero.Parties.ICounterparty counterparty, global::Sungero.Docflow.IOfficialDocument contract)
    {
      return global::Sungero.Contracts.Server.SupAgreementFunctions.GetDuplicates(supAgreement, businessUnit, registrationNumber, registrationDate, counterparty, contract);
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.SupAgreementFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static  global::System.String GetNamePartBySupAgreementIgnoreAccessRights(global::System.Int32 supAgreementId)
    {
      return global::Sungero.Contracts.Server.SupAgreementFunctions.GetNamePartBySupAgreementIgnoreAccessRights(supAgreementId);
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.SupAgreementFunctions" />
    [global::Sungero.Core.RemoteAttribute()]
    internal static  global::System.Collections.Generic.List<global::Sungero.Docflow.IApprovalRuleBase> GetApprovalRules(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Server.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.ServerFunctions;
      return functions.GetApprovalRules();
    }
    /// <redirect project="Sungero.Contracts.Server" type="Sungero.Contracts.Server.SupAgreementFunctions" />
    internal static  global::Sungero.Core.StateView GetDocumentSummary(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Server.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.ServerFunctions;
      return functions.GetDocumentSummary();
    }

    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.Boolean IsVerificationModeSupported(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
      return functions.IsVerificationModeSupported();
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.Boolean HasEmptyRequiredProperties(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
      return functions.HasEmptyRequiredProperties();
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::Sungero.Docflow.IDocumentGroupBase GetDocumentGroup(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
      return functions.GetDocumentGroup();
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.Boolean HaveDuplicates(global::Sungero.Contracts.ISupAgreement supAgreement, global::Sungero.Company.IBusinessUnit businessUnit, global::System.String registrationNumber, global::System.Nullable<global::System.DateTime> registrationDate, global::Sungero.Parties.ICounterparty counterparty, global::Sungero.Docflow.IOfficialDocument contract)
    {
      return global::Sungero.Contracts.Shared.SupAgreementFunctions.HaveDuplicates(supAgreement, businessUnit, registrationNumber, registrationDate, counterparty, contract);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.String GetLeadDocumentNumber(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
      return functions.GetLeadDocumentNumber();
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.String GetNamePartBySupAgreement(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      return global::Sungero.Contracts.Shared.SupAgreementFunctions.GetNamePartBySupAgreement(supAgreement);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  global::System.String GetSupAgreementNamePart(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      return global::Sungero.Contracts.Shared.SupAgreementFunctions.GetSupAgreementNamePart(supAgreement);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  void SetObsolete(global::Sungero.Contracts.ISupAgreement supAgreement, global::System.Boolean isActive)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
    functions.SetObsolete(isActive);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  void FillName(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
    functions.FillName();
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  void ChangeDocumentPropertiesAccess(global::Sungero.Contracts.ISupAgreement supAgreement, global::System.Boolean isEnabled, global::System.Boolean isRepeatRegister)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
    functions.ChangeDocumentPropertiesAccess(isEnabled, isRepeatRegister);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  void AddRelatedDocumentsToAttachmentGroup(global::Sungero.Contracts.ISupAgreement supAgreement, Sungero.Workflow.Interfaces.IWorkflowEntityAttachmentGroup group)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
    functions.AddRelatedDocumentsToAttachmentGroup(group);
    }
    /// <redirect project="Sungero.Contracts.Shared" type="Sungero.Contracts.Shared.SupAgreementFunctions" />
    internal static  void SetRequiredProperties(global::Sungero.Contracts.ISupAgreement supAgreement)
    {
      var functions = (global::Sungero.Contracts.Shared.SupAgreementFunctions)((global::Sungero.Domain.Shared.IEntityFunctions)supAgreement).FunctionsContainer.SharedFunctions;
    functions.SetRequiredProperties();
    }

  }
}

// ==================================================================
// SupAgreementServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Server
{
  public class SupAgreementServerPublicFunctions : global::Sungero.Contracts.Server.ISupAgreementServerPublicFunctions
  {
  }
}

// ==================================================================
// SupAgreementQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Queries
{
  public class SupAgreement
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Sungero.Contracts.Server.SupAgreement.SupAgreementQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// SupAgreementServerHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts
{
  public partial class SupAgreementConvertingFromServerHandler : global::Sungero.Contracts.ContractualDocumentConvertingFromServerHandler
  { 
    private global::Sungero.Contracts.ISupAgreementInfo _info
    {
      get { return (global::Sungero.Contracts.ISupAgreementInfo)this._Info; }
    }

    public SupAgreementConvertingFromServerHandler(global::Sungero.Content.IElectronicDocument source, global::Sungero.Contracts.ISupAgreementInfo info)
      : base(source, info)
    {
    }
  }
}
