
// ==================================================================
// ContractualDocument.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Client
{
  public class ContractualDocument :
    global::Sungero.Docflow.Client.ContractualDocumentBase, global::Sungero.Contracts.IContractualDocument
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("59079f7f-a326-4947-bbd6-0ae6dfb5f59b");

    public override global::System.Guid TypeGuid
    {
      get { return global::Sungero.Contracts.Client.ContractualDocument.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Sungero.Contracts.IContractualDocument, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Sungero.Contracts.IContractualDocumentState State
    {
      get
      {
        return (global::Sungero.Contracts.IContractualDocumentState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Sungero.Contracts.Shared.ContractualDocumentState(this);
    }

    public new global::Sungero.Contracts.IContractualDocumentInfo Info
    {
      get
      {
        return (global::Sungero.Contracts.IContractualDocumentInfo)base.Info;
      }
    }

    public new global::Sungero.Contracts.IContractualDocumentAccessRights AccessRights
    {
      get
      {
        return (global::Sungero.Contracts.IContractualDocumentAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Sungero.Contracts.Client.ContractualDocumentAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _ValidFrom;

        public virtual global::System.DateTime? ValidFrom
        {
          get { return this._ValidFrom.Value; }
          set { this._ValidFrom.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?> _ValidTill;

        public virtual global::System.DateTime? ValidTill
        {
          get { return this._ValidTill.Value; }
          set { this._ValidTill.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?> _IsStandard;

        public virtual global::System.Boolean? IsStandard
        {
          get { return this._IsStandard.Value; }
          set { this._IsStandard.Value = value; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Parties.IContact> _Contact;

              public virtual global::Sungero.Parties.IContact Contact
              {
              get
              {
                return this._Contact.Value as global::Sungero.Parties.IContact;
              }

              set
              {
                (this._Contact as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }



              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Company.IEmployee> _ResponsibleEmployee;

              public virtual global::Sungero.Company.IEmployee ResponsibleEmployee
              {
              get
              {
                return this._ResponsibleEmployee.Value as global::Sungero.Company.IEmployee;
              }

              set
              {
                (this._ResponsibleEmployee as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }







          protected global::Sungero.Domain.Client.IListProperty<global::Sungero.Contracts.IContractualDocumentMilestones> _Milestones;

          virtual public global::Sungero.Domain.Shared.IChildEntityCollection<global::Sungero.Contracts.IContractualDocumentMilestones> Milestones
          {
            get { return this._Milestones.Value; }
          }






    private object _MilestonesActionsHandlers;

    public object MilestonesActionsHandlers
    {
      get
      {
        if (this._MilestonesActionsHandlers == null)
          this._MilestonesActionsHandlers = this.CreateMilestonesActionsHandlers();
        return this._MilestonesActionsHandlers;
      }
    }

    private object _MilestonesCollectionActionsHandlers;

    public object MilestonesCollectionActionsHandlers
    {
      get
      {
        if (this._MilestonesCollectionActionsHandlers == null)
          this._MilestonesCollectionActionsHandlers = this.CreateMilestonesCollectionActionsHandlers();
        return this._MilestonesCollectionActionsHandlers;
      }
    }

    #endregion

    #region Methods

    protected virtual object CreateMilestonesActionsHandlers()
    {
      return null;
    }

    protected virtual object CreateMilestonesCollectionActionsHandlers()
    {
      return null;
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Sungero.Contracts.Client.ContractualDocumentFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Sungero.Contracts.Shared.ContractualDocumentFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Sungero.Contracts.ContractualDocumentClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Sungero.Contracts.ContractualDocumentSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void ContactChangedHandler()
    {
      var args = new global::Sungero.Contracts.Shared.ContractualDocumentContactChangedEventArgs(this.State.Properties.Contact, this.Contact, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ContactChanged(args);
    }

    protected void ValidFromChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidFrom, this.ValidFrom, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ValidFromChanged(args);
    }

    protected void ValidTillChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.DateTimePropertyChangedEventArgs(this.State.Properties.ValidTill, this.ValidTill, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ValidTillChanged(args);
    }

    protected void ResponsibleEmployeeChangedHandler()
    {
      var args = new global::Sungero.Contracts.Shared.ContractualDocumentResponsibleEmployeeChangedEventArgs(this.State.Properties.ResponsibleEmployee, this.ResponsibleEmployee, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).ResponsibleEmployeeChanged(args);
    }

    protected void IsStandardChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.BooleanPropertyChangedEventArgs(this.State.Properties.IsStandard, this.IsStandard, this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).IsStandardChanged(args);
    }


    protected void MilestonesChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.CollectionPropertyChangedEventArgs(this);
     ((global::Sungero.Contracts.ContractualDocumentSharedHandlers)this.SharedHandlers).MilestonesChanged(args);
    }





    protected virtual global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers CreateMilestonesAddedHandler(global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers(this, e.Value, null, e.Source);
    }

    protected virtual global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers CreateMilestonesDeletedHandler(global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {
      return new global::Sungero.Contracts.ContractualDocumentMilestonesSharedCollectionHandlers(this, null, e.Value, null);
    }

    protected virtual void MilestonesAddedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityAddedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMilestonesAddedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyAddedEventArgs(this);
        collectionHandlers.MilestonesAdded(args);
      }
    }

    protected virtual void MilestonesDeletedHandler(object sender, global::Sungero.Domain.Shared.ChildEntityDeletedEventArgs<global::Sungero.Domain.Shared.IChildEntity> e)
    {  
      var collectionHandlers = this.CreateMilestonesDeletedHandler(e);
      if (collectionHandlers != null)
      {
        var args = new global::Sungero.Domain.Shared.CollectionPropertyDeletedEventArgs(this);
        collectionHandlers.MilestonesDeleted(args);
      }
    }


  protected global::Sungero.Parties.IContact ContactValueInputHandler(global::Sungero.Parties.IContact value)
  {
    var args = new global::Sungero.Contracts.Client.ContractualDocumentContactValueInputEventArgs(this.Contact, value, this, this.Info.Properties.Contact);
    ((global::Sungero.Contracts.ContractualDocumentClientHandlers)this.Handlers).ContactValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? ValidFromValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.ValidFrom, value, this, this.Info.Properties.ValidFrom);
    ((global::Sungero.Contracts.ContractualDocumentClientHandlers)this.Handlers).ValidFromValueInput(args);
    return args.NewValue;
  }

  protected global::System.DateTime? ValidTillValueInputHandler(global::System.DateTime? value)
  {
    var args = new global::Sungero.Presentation.DateTimeValueInputEventArgs(this.ValidTill, value, this, this.Info.Properties.ValidTill);
    ((global::Sungero.Contracts.ContractualDocumentClientHandlers)this.Handlers).ValidTillValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Company.IEmployee ResponsibleEmployeeValueInputHandler(global::Sungero.Company.IEmployee value)
  {
    var args = new global::Sungero.Contracts.Client.ContractualDocumentResponsibleEmployeeValueInputEventArgs(this.ResponsibleEmployee, value, this, this.Info.Properties.ResponsibleEmployee);
    ((global::Sungero.Contracts.ContractualDocumentClientHandlers)this.Handlers).ResponsibleEmployeeValueInput(args);
    return args.NewValue;
  }

  protected global::System.Boolean? IsStandardValueInputHandler(global::System.Boolean? value)
  {
    var args = new global::Sungero.Presentation.BooleanValueInputEventArgs(this.IsStandard, value, this, this.Info.Properties.IsStandard);
    ((global::Sungero.Contracts.ContractualDocumentClientHandlers)this.Handlers).IsStandardValueInput(args);
    return args.NewValue;
  }





    #endregion

    #region Constructors























              protected virtual void InitContactNavigationProperty()
              {
                this._Contact = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Parties.IContact>("Contact", this);
                this._Contact.ValueChanged += (sender, e) => { this.ContactChangedHandler(); };
                this.AddProperty(this._Contact as global::Sungero.Domain.Client.IProperty);
              }




              protected virtual void InitResponsibleEmployeeNavigationProperty()
              {
                this._ResponsibleEmployee = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Company.IEmployee>("ResponsibleEmployee", this);
                this._ResponsibleEmployee.ValueChanged += (sender, e) => { this.ResponsibleEmployeeChangedHandler(); };
                this.AddProperty(this._ResponsibleEmployee as global::Sungero.Domain.Client.IProperty);
              }



            protected override void InitVersionsCollectionProperty()
            {
              this._Versions = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Contracts.IContractualDocumentVersions>("Versions", this);
              this._Versions.ValueChanged += (sender, e) => { this.VersionsChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Versions);
              this.SetVersionsEventHandlers();
            }

            protected override void InitTrackingCollectionProperty()
            {
              this._Tracking = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Contracts.IContractualDocumentTracking>("Tracking", this);
              this._Tracking.ValueChanged += (sender, e) => { this.TrackingChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Tracking);
              this.SetTrackingEventHandlers();
            }

            protected virtual void InitMilestonesCollectionProperty()
            {
              this._Milestones = new global::Sungero.Domain.Client.ListProperty<global::Sungero.Contracts.IContractualDocumentMilestones>("Milestones", this);
              this._Milestones.ValueChanged += (sender, e) => { this.MilestonesChangedHandler(); };
              this.AddProperty((global::Sungero.Domain.Client.IProperty)this._Milestones);
              this.SetMilestonesEventHandlers();
            }

            protected void SetMilestonesEventHandlers()
            {
              this._Milestones.ChildEntityAdded += this.MilestonesAddedHandler;
              this._Milestones.ChildEntityDeleted += this.MilestonesDeletedHandler;
            }


    public ContractualDocument()
    {
            this._ValidFrom = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("ValidFrom", this);
            this._ValidFrom.ValueChanged += (sender, e) => { this.ValidFromChangedHandler(); };
            this.AddProperty(this._ValidFrom);

            this._ValidTill = new global::Sungero.Domain.Client.SimpleProperty<global::System.DateTime?>("ValidTill", this);
            this._ValidTill.ValueChanged += (sender, e) => { this.ValidTillChangedHandler(); };
            this.AddProperty(this._ValidTill);

            this._IsStandard = new global::Sungero.Domain.Client.SimpleProperty<global::System.Boolean?>("IsStandard", this);
            this._IsStandard.ValueChanged += (sender, e) => { this.IsStandardChangedHandler(); };
            this.AddProperty(this._IsStandard);

            this.InitContactNavigationProperty();

            this.InitResponsibleEmployeeNavigationProperty();


            this.InitMilestonesCollectionProperty();







    }

    #endregion

  }
}

// ==================================================================
// ContractualDocumentPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Client
{
  public class ContractualDocumentPresenter<T> :
    global::Sungero.Docflow.Client.ContractualDocumentBasePresenter<T>
    where T : class, global::Sungero.Contracts.IContractualDocument
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _ShowDuplicatesCommand;

          public global::System.Windows.Input.ICommand ShowDuplicatesCommand
          {
            get
            {
              if (this._ShowDuplicatesCommand == null)
                  this._ShowDuplicatesCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ShowDuplicates", this, this.ShowDuplicates, this.CanShowDuplicates) { IsEmptyParameterAllowed = true };
              return this._ShowDuplicatesCommand;
            }
          }
          private global::System.Windows.Input.ICommand _CreateCoverLetterCommand;

          public global::System.Windows.Input.ICommand CreateCoverLetterCommand
          {
            get
            {
              if (this._CreateCoverLetterCommand == null)
                  this._CreateCoverLetterCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CreateCoverLetter", this, this.CreateCoverLetter, this.CanCreateCoverLetter) { IsEmptyParameterAllowed = true };
              return this._CreateCoverLetterCommand;
            }
          }
          private global::System.Windows.Input.ICommand _ExportFinancialDocumentCommand;

          public global::System.Windows.Input.ICommand ExportFinancialDocumentCommand
          {
            get
            {
              if (this._ExportFinancialDocumentCommand == null)
                  this._ExportFinancialDocumentCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("ExportFinancialDocument", this, this.ExportFinancialDocument, this.CanExportFinancialDocument) { IsEmptyParameterAllowed = true };
              return this._ExportFinancialDocumentCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanShowDuplicates(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).CanShowDuplicates(args);
              }

              private void ShowDuplicates(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ShowDuplicates);
                ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).ShowDuplicates(args);
              }

              private bool CanCreateCoverLetter(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).CanCreateCoverLetter(args);
              }

              private void CreateCoverLetter(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.CreateCoverLetter);
                ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).CreateCoverLetter(args);
              }

              private bool CanExportFinancialDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
                  global::Sungero.Contracts.Client.ContractualDocumentCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanExportFinancialDocument);
              }

              private void ExportFinancialDocument(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.ExportFinancialDocument);
                var entities = new global::System.Collections.ObjectModel.Collection<T> { entity };
                global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
                  global::Sungero.Contracts.Client.ContractualDocumentCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
                    actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.ExportFinancialDocument);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ContactCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ContactCollectionPresenter
              {
          get { return this._ContactCollectionPresenter; }
        }
              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _ResponsibleEmployeeCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter ResponsibleEmployeeCollectionPresenter
              {
          get { return this._ResponsibleEmployeeCollectionPresenter; }
        }


                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _MilestonesPerformerCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter MilestonesPerformerCollectionPresenter
                          {
                  get { return this._MilestonesPerformerCollectionPresenter; }
                }
                          protected global::Sungero.Domain.Client.IEntityCollectionPresenter _MilestonesTaskCollectionPresenter;
                          public global::Sungero.Domain.Client.IEntityCollectionPresenter MilestonesTaskCollectionPresenter
                          {
                  get { return this._MilestonesTaskCollectionPresenter; }
                }



    #region Constructors

    private void Init()
    {
              this._DeliveryMethodCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IMailDeliveryMethod>(() => this.Entity.Id, typeof(T), "DeliveryMethod");

              this._CaseFileCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.ICaseFile>(() => this.Entity.Id, typeof(T), "CaseFile");

              this._DeliveredToCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "DeliveredTo");

              this._ResponsibleForReturnEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleForReturnEmployee");

              this._PreparedByCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "PreparedBy");

              this._StorageCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IStorage>(() => this.Entity.Id, typeof(T), "Storage");

              this._AuthorCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(T), "Author");

              this._DepartmentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IDepartment>(() => this.Entity.Id, typeof(T), "Department");

              this._AssociatedApplicationCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(T), "AssociatedApplication");

              this._AssigneeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "Assignee");

              this._ProjectCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IProjectBase>(() => this.Entity.Id, typeof(T), "Project");

              this._LeadingDocumentCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IOfficialDocument>(() => this.Entity.Id, typeof(T), "LeadingDocument");

              this._CurrencyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Commons.ICurrency>(() => this.Entity.Id, typeof(T), "Currency");

              this._DocumentRegisterCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentRegister>(() => this.Entity, typeof(T), "DocumentRegister");

              this._DocumentKindCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentKind>(() => this.Entity, typeof(T), "DocumentKind");

              this._BusinessUnitCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IBusinessUnit>(() => this.Entity.Id, typeof(T), "BusinessUnit");

              this._OurSignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Company.IEmployee>(() => this.Entity, typeof(T), "OurSignatory");

              this._DocumentGroupCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Docflow.IDocumentGroupBase>(() => this.Entity, typeof(T), "DocumentGroup");

              this._CounterpartyCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Parties.ICounterparty>(() => this.Entity.Id, typeof(T), "Counterparty");

              this._CounterpartySignatoryCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Parties.IContact>(() => this.Entity, typeof(T), "CounterpartySignatory");

                  this._ContactCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Parties.IContact>(global::System.Guid.Parse("90dcb094-0fea-422c-b6f8-5f28d51f0782"));
              this._ContactCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationProperty<global::Sungero.Parties.IContact>(() => this.Entity, typeof(T), "Contact");

                  this._ResponsibleEmployeeCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("17f86b14-c82a-4827-8dc0-275881319a17"));
              this._ResponsibleEmployeeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(T), "ResponsibleEmployee");


                        this._VersionsAuthorCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentVersions), "Author");

                        this._VersionsModifiedByCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.CoreEntities.IUser>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentVersions), "ModifiedBy");

                        this._VersionsAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentVersions), "AssociatedApplication");

                        this._VersionsBodyAssociatedApplicationCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Content.IAssociatedApplication>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentVersions), "BodyAssociatedApplication");


                        this._TrackingDeliveredToCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentTracking), "DeliveredTo");

                        this._TrackingReturnTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ITask>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentTracking), "ReturnTask");


                          this._MilestonesPerformerCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Company.IEmployee>(global::System.Guid.Parse("5ec273fe-4b23-4077-916f-43ad241247c4"));
                        this._MilestonesPerformerCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Company.IEmployee>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentMilestones), "Performer");

                          this._MilestonesTaskCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Workflow.ISimpleTask>(global::System.Guid.Parse("3d208fea-3332-422a-91b4-30b78373b90b"));
                        this._MilestonesTaskCollectionPresenter
                        .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Workflow.ISimpleTask>(() => this.Entity.Id, typeof(Sungero.Contracts.IContractualDocumentMilestones), "Task");


    }

    public ContractualDocumentPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// ContractualDocumentCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Client
{
  public class ContractualDocumentCollectionPresenter<T> : 
    global::Sungero.Docflow.Client.ContractualDocumentBaseCollectionPresenter<T>
    where T: class, global::Sungero.Contracts.IContractualDocument
  {
    #region Actions

          private global::System.Windows.Input.ICommand _CreateCoverLetterCommand;  

          public global::System.Windows.Input.ICommand CreateCoverLetterCommand 
          { 
            get
            { 
              if (this._CreateCoverLetterCommand == null)
                this._CreateCoverLetterCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("CreateCoverLetter", this, this.CreateCoverLetter, this.CanCreateCoverLetter) { IsEmptyParameterAllowed = true };
              return this._CreateCoverLetterCommand; 
            }
          }
          private global::System.Windows.Input.ICommand _ExportFinancialDocumentCommand;  

          public global::System.Windows.Input.ICommand ExportFinancialDocumentCommand 
          { 
            get
            { 
              if (this._ExportFinancialDocumentCommand == null)
                this._ExportFinancialDocumentCommand = new global::Sungero.Domain.Client.EntityCollectionCommand<T>("ExportFinancialDocument", this, this.ExportFinancialDocument, this.CanExportFinancialDocument) { IsEmptyParameterAllowed = true };
              return this._ExportFinancialDocumentCommand; 
            }
          }



    #endregion

    #region Methods

        private bool CanCreateCoverLetter(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this);
          return ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).CanCreateCoverLetter(args);
        }

        private void CreateCoverLetter(T entity)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, entity, this, entity.Info.Actions.CreateCoverLetter);
          ((Sungero.Contracts.Client.ContractualDocumentActions)(entity as Sungero.Contracts.Client.ContractualDocument).ActionsHandlers).CreateCoverLetter(args);
        }

        private bool CanExportFinancialDocument(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          return global::Sungero.Domain.Client.ActionExecutor.CanExecuteEntityCollectionAction<
            global::Sungero.Contracts.Client.ContractualDocumentCollectionActions, global::Sungero.Domain.Client.WpfCanExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Func<global::Sungero.Domain.Client.WpfCanExecuteActionArgs, bool>)actionHandlers.CanExportFinancialDocument);
        }

        private void ExportFinancialDocument(global::System.Collections.Generic.ICollection<T> entities)
        {
          var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Collection, null, this);
          global::Sungero.Domain.Client.ActionExecutor.ExecuteEntityCollectionAction<
            global::Sungero.Contracts.Client.ContractualDocumentCollectionActions, global::Sungero.Domain.Client.WpfExecuteActionArgs>(entities, args,
              actionHandlers => (global::System.Action<global::Sungero.Domain.Client.WpfExecuteActionArgs>)actionHandlers.ExportFinancialDocument);
        }



    #endregion

    public ContractualDocumentCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public ContractualDocumentCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public ContractualDocumentCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public ContractualDocumentCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// ContractualDocumentRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Client
{ 
  public class ContractualDocumentRepositoryImplementer<T> : 
      global::Sungero.Docflow.Client.ContractualDocumentBaseRepositoryImplementer<T>,
      global::Sungero.Contracts.IContractualDocumentRepositoryImplementer<T>
      where T : global::Sungero.Contracts.IContractualDocument
    {
       public new global::Sungero.Contracts.IContractualDocumentAccessRights AccessRights
       {
          get { return (global::Sungero.Contracts.IContractualDocumentAccessRights)base.AccessRights; }
       }

       public new global::Sungero.Contracts.IContractualDocumentInfo Info
       {
          get { return (global::Sungero.Contracts.IContractualDocumentInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Sungero.Contracts.Client.ContractualDocumentTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// ContractualDocumentAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sungero.Contracts.Client
{
  public class ContractualDocumentAccessRights : 
    Sungero.Docflow.Client.ContractualDocumentBaseAccessRights, Sungero.Contracts.IContractualDocumentAccessRights
  {

    public ContractualDocumentAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class ContractualDocumentTypeAccessRights : 
    Sungero.Docflow.Client.ContractualDocumentBaseTypeAccessRights, Sungero.Contracts.IContractualDocumentAccessRights
  {

    public ContractualDocumentTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
